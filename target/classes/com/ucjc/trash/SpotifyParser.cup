/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes
package com.ucjc.analizers;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

//------> Codigo para el parser,variables, metodos
parser code
{:
    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>();

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);


    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);

    }
:}


/*------> Codigo para las acciones gramaticales
action code
{:
    // Define a simple Song class for demonstration purposes
    public class Song {
        private String number;
        private String songName;
        private String artist;
        private String album;
        private String millionStreams;
        private String releaseDate;

        public Song(String number, String songName, String artist, String album, String millionStreams, String releaseDate) {
            this.number = number;
            this.songName = songName;
            this.artist = artist;
            this.album = album;
            this.millionStreams = millionStreams;
            this.releaseDate = releaseDate;
        }

        // Getter methods...

        @Override
        public String toString() {
            return "Song{" +
                    "number='" + number + '\'' +
                    ", songName='" + songName + '\'' +
                    ", artist='" + artist + '\'' +
                    ", album='" + album + '\'' +
                    ", millionStreams='" + millionStreams + '\'' +
                    ", releaseDate='" + releaseDate + '\'' +
                    '}';
        }
    }
}

:}

/*--------------- 2da Area: Declaraciones -----------------------*/
//------> declaracion de terminales
terminal SEARCH, COMMA, SLASH, NUM, STRING;
terminal String num, song_name, artist, album, million_streams, release_date;

//------> declaracion de no terminales
non terminal Song INICIO, SONGS, SONG;

//----> precedencia de menor a mayor
precedence left SLASH, COMMA;

start with INICIO;

/*--------------- 3ra Area: Reglas Semanticas -----------------------*/
INICIO ::= SEARCH ':' SONGS;

SONGS ::= SONG { System.out.println("Found song: " + $1); }
         | SONGS COMMA SONG { System.out.println("Found song: " + $3); }
         | SONGS SLASH SONG { System.out.println("Found song: " + $3); }

SONG ::= NUM ',' STRING ',' STRING ',' STRING ',' STRING ',' STRING {
    return new Song($1, $3, $5, $7, $9, $11);
}

%whitespace ::= [\t\r\n];
