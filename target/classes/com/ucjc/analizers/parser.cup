/*--------------------1. Codigo del Usuario---------------------*/

//------> Paquetes e importaciones
package com.ucjc.compiled.generated;

import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.ucjc.utils.TError;

/*--------------------2. Opciones y declaraciones--------------------*/

parser code {:
    // Import necessary packages and define additional code if needed

    // public String resultado="";
    // public static LinkedList<TError> TablaES = new LinkedList<TError>();

    // //Metodo al que se llama automaticamente ante algun error sintactico
    // public void syntax_error(Symbol s) {
    // Object value = s.value;
    // String lexema = (value != null) ? value.toString() : "null";
    // int fila = s.right;
    // int columna = s.left;

    // System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
    // System.out.println("\t\tLexema: " + lexema);
    // System.out.println("\t\tFila: " + fila);
    // System.out.println("\t\tColumna: " + columna);

    // TError datos = new TError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
    // TablaES.add(datos);
    // }

    // public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
    // Object value = s.value;
    // String lexema = (value != null) ? value.toString() : "null";
    // int fila = s.right;
    // int columna = s.left;

    // System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!!");
    // System.out.println("\t\tLexema: " + lexema);
    // System.out.println("\t\tFila: " + fila);
    // System.out.println("\t\tColumna: " + columna);

    // TError datos = new TError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
    // TablaES.add(datos);
    // }

    // public int error_count() {
    //     return TablaES.size();
    // }

    // Define your data structures and methods here
:};



/* Define terminal and non-terminal symbols */
terminal NUMBER, SONG_NAME, ARTIST, ALBUM, MILLION_STREAMS, RELEASE_DATE, WORD, COMMA, NUM, STRING, MORE_THAN, LESS_THAN, MORE_THAN_EQUAL, LESS_THAN_EQUAL, EQUALS, SEARCH, WHITE_SPACE;
non terminal Field, Search, NumberField, SongNameField, ArtistField, AlbumField, MillionStreamsField, ComparisonOperator, ReleaseDateField;

/* Grammar */
precedence left EQUALS;
precedence left MORE_THAN, LESS_THAN, MORE_THAN_EQUAL, LESS_THAN_EQUAL;

/* Define the start symbol */
start with Search;

/* Define the grammar rules */
/* Search Statement */
Search ::= Field
         | Field Field
         | Field SEARCH
         | Field SEARCH WHITE_SPACE
         ;

/* Fields */
Field ::= NumberField
        | SongNameField
        | ArtistField
        | AlbumField
        | MillionStreamsField
        | ReleaseDateField
        | COMMA
        | STRING
        ;

/* Specific Fields */
NumberField ::= NUMBER EQUALS NUM;

SongNameField ::= SONG_NAME EQUALS STRING;

ArtistField ::= ARTIST EQUALS STRING;

AlbumField ::= ALBUM EQUALS STRING;

MillionStreamsField ::= MILLION_STREAMS ComparisonOperator NUM;

ReleaseDateField ::= RELEASE_DATE EQUALS STRING;

ComparisonOperator ::= MORE_THAN
                     | LESS_THAN
                     | MORE_THAN_EQUAL
                     | LESS_THAN_EQUAL
                     | EQUALS
                     ;


