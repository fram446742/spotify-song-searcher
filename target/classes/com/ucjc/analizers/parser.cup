/*--------------------1. Codigo del Usuario---------------------*/

//------> Paquetes e importaciones
package com.ucjc.compiled.generated;

import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.ucjc.utils.TError;
import java.io.FileReader;

/*--------------------2. Opciones y declaraciones--------------------*/

parser code {:
    // Import necessary packages and define additional code if needed
    public String result = "";
    public String str = "";
    public String num = "";

    public static LinkedList<TError> SyntaxErrorTable = new LinkedList<TError>();

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s) {
    Object value = s.value;
    String lexeme = (value != null) ? value.toString() : "null";
    int line = s.left;
    int column = s.right;

    System.out.println("!!!!!!! Syntax Error Recovered !!!!!!!");
    System.out.println("\t\tLexeme: " + lexeme);
    System.out.println("\t\tLine: " + line);
    System.out.println("\t\tColumn: " + column);

    TError data = new TError(lexeme, line, column, "Syntax Error", "Unexpected character");
    SyntaxErrorTable.add(data);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
    Object value = s.value;
    String lexeme = (value != null) ? value.toString() : "null";
    int line = s.left;
    int column = s.right;

    System.out.println("!!!!!!! Syntax Error, Panic Mode !!!!!!!");
    System.out.println("\t\tLexeme: " + lexeme);
    System.out.println("\t\tLine: " + line);
    System.out.println("\t\tColumn: " + column);

    TError data = new TError(lexeme, line, column, "Syntax Error", "Unexpected character");
    SyntaxErrorTable.add(data);
    }


    public int error_count() {
        return SyntaxErrorTable.size();
    }

    public LinkedList getTable(){
      return SyntaxErrorTable;
    }

    public String modifyString(Object input) {
    // Realiza las modificaciones deseadas
    result = input.toString(); // Ejemplo: convierte a may√∫sculas
    return result;

    }

    // Define your data structures and methods here
:};

action code
{:
:}

/* Define terminal and non-terminal symbols */
terminal  COMMA, MORE_THAN, LESS_THAN, MORE_THAN_EQUAL, LESS_THAN_EQUAL, EQUALS, WHITE_SPACE;
terminal String SONG_NAME, ARTIST, ALBUM, RELEASE_DATE, NUMBER, MILLION_STREAMS, SEARCH, STRING, NUM;
non terminal ComparisonOperator;
non terminal String Search, Field, SongNameField, ArtistField, AlbumField, ReleaseDateField, NumberField, MillionStreamsField, CompareString, QUERY;
non terminal Integer CompareNum;

/* Grammar */
precedence left EQUALS,
               MORE_THAN, LESS_THAN, MORE_THAN_EQUAL, LESS_THAN_EQUAL;

/* Define the start symbol */
start with QUERY;

/* Define the grammar rules */
/* Search Statement */

QUERY ::= Search:res {:result = res;:}
         ;

Search ::= Field:a SEARCH {:RESULT = a;:}
         ;

/* Fields */
Field ::= NumberField
        | SongNameField
        | ArtistField
        | AlbumField
        | MillionStreamsField
        | ReleaseDateField
        ;

/* Specific Fields */
NumberField ::= NUMBER:numericValue CompareNum:comparisonValue {: RESULT = numericValue + String.valueOf(comparisonValue); :};

SongNameField ::= SONG_NAME:songName CompareString:comparisonString {: RESULT = songName + comparisonString; :};

ArtistField ::= ARTIST:artistName CompareString:comparisonString {: RESULT = artistName + comparisonString; :};

AlbumField ::= ALBUM:albumName CompareString:comparisonString {: RESULT = albumName + comparisonString; :};

MillionStreamsField ::= MILLION_STREAMS:millionStreams ComparisonOperator:comparisonOperator NUM:number {: RESULT = millionStreams + comparisonOperator +  String.valueOf(number); :};

ReleaseDateField ::= RELEASE_DATE:releaseDate CompareString:comparisonString {: RESULT = releaseDate + comparisonString; :};

ComparisonOperator ::= MORE_THAN
                     | LESS_THAN
                     | MORE_THAN_EQUAL
                     | LESS_THAN_EQUAL
                     | EQUALS
                     ;

CompareString ::= EQUALS STRING:stringValue {: RESULT = stringValue; :};

CompareNum ::= EQUALS NUM:numberValue {: RESULT = Integer.parseInt(numberValue); :};


