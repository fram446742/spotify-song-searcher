
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.ucjc.generated;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import com.ucjc.utils.TError;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym0.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\002\004\000\002\012\003\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\007\004\000\002\004\004\000\002" +
    "\005\004\000\002\006\004\000\002\010\005\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\002\000\002\011\003\000" +
    "\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\016\004\013\005\004\006\006\007\021\010" +
    "\012\012\011\001\002\000\004\013\022\001\002\000\004" +
    "\002\000\001\002\000\004\014\036\001\002\000\006\002" +
    "\ufff9\011\ufff9\001\002\000\004\002\035\001\002\000\004" +
    "\002\ufffd\001\002\000\016\014\uffed\015\033\016\027\017" +
    "\032\020\031\021\030\001\002\000\004\013\022\001\002" +
    "\000\006\002\ufffb\011\ufffb\001\002\000\006\002\ufffe\011" +
    "\024\001\002\000\006\002\ufffa\011\ufffa\001\002\000\006" +
    "\002\ufffc\011\ufffc\001\002\000\006\002\ufff8\011\ufff8\001" +
    "\002\000\004\013\022\001\002\000\006\002\uffec\011\uffec" +
    "\001\002\000\006\002\ufff4\011\ufff4\001\002\000\004\002" +
    "\uffff\001\002\000\006\002\ufff6\011\ufff6\001\002\000\004" +
    "\014\034\001\002\000\004\014\ufff1\001\002\000\004\014" +
    "\uffee\001\002\000\004\014\uffef\001\002\000\004\014\ufff0" +
    "\001\002\000\004\014\ufff2\001\002\000\006\002\ufff3\011" +
    "\ufff3\001\002\000\004\002\001\001\002\000\006\002\uffeb" +
    "\011\uffeb\001\002\000\006\002\ufff7\011\ufff7\001\002\000" +
    "\006\002\ufff5\011\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\022\002\004\003\014\004\013\005\015\006" +
    "\006\007\016\010\017\012\007\001\001\000\004\011\037" +
    "\001\001\000\002\001\001\000\004\014\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\025\001\001\000\004\011\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Import necessary packages and define additional code if needed
    public String result = "";
    public String str = "";
    public String num = "";

    public static LinkedList<TError> SyntaxErrorTable = new LinkedList<TError>();

    //Method that is automatically called when there is a syntax error
    public void syntax_error(Symbol s) {
    Object value = s.value;
    String lexeme = (value != null) ? value.toString() : "null";
    int line = s.left;
    int column = s.right;

    System.out.println("!!!!!!! Syntax Error Recovered !!!!!!!");
    System.out.println("\t\tLexeme: " + lexeme);
    System.out.println("\t\tLine: " + line);
    System.out.println("\t\tColumn: " + column);

    TError data = new TError(lexeme, line, column, "Syntax Error", "Unexpected character");
    SyntaxErrorTable.add(data);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
    Object value = s.value;
    String lexeme = (value != null) ? value.toString() : "null";
    int line = s.left;
    int column = s.right;

    System.out.println("!!!!!!! Syntax Error, Panic Mode !!!!!!!");
    System.out.println("\t\tLexeme: " + lexeme);
    System.out.println("\t\tLine: " + line);
    System.out.println("\t\tColumn: " + column);

    TError data = new TError(lexeme, line, column, "Syntax Error", "Unexpected character");
    SyntaxErrorTable.add(data);
    }

    public int error_count() {
        return SyntaxErrorTable.size();
    }

    public LinkedList getTable(){
      return SyntaxErrorTable;
    }

        public LinkedList clearTable(){
      SyntaxErrorTable.clear();
      return SyntaxErrorTable;
    }

    public static List<String> searchInDatabase(String jdbcUrl, String username, String password,
                                            String tableName, String columnName, String targetValue, String comparisonOperator) {
    List<String> results = new ArrayList<>();

    if (jdbcUrl == null || username == null || password == null || tableName == null || columnName == null || comparisonOperator == null) {
        // Add appropriate error handling or logging for invalid input parameters
        return results;
    }

    try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
        // Build the SQL query dynamically based on the comparison operator
        String sql = "SELECT * FROM " + tableName + " WHERE " + columnName + " " + comparisonOperator + " ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            // Set the parameter value
            statement.setString(1, targetValue);

            try (ResultSet resultSet = statement.executeQuery()) {
                while (resultSet.next()) {
                    // Construct a string representation of the entire row and add it to the results
                    StringBuilder row = new StringBuilder();
                    ResultSetMetaData metaData = resultSet.getMetaData();
                    int columnCount = metaData.getColumnCount();
                    for (int i = 1; i <= columnCount; i++) {
                        row.append(resultSet.getString(i));
                        if (i < columnCount) {
                            row.append(", ");
                        }
                    }
                    results.add(row.toString());
                }
            }
        }
    } catch (SQLException e) {
        // Log or handle the exception appropriately
        e.printStackTrace();
    }

    return results;
}

public String genericSearch(String columnName, String target, String comparisonOperator) {
    String jdbcUrl = "jdbc:mysql://sql8.freesqldatabase.com:3306/sql8672470";
    String username = "sql8672470";
    String password = "tjUFjunKny";
    String tableName = "Spotify";

    System.out.println("Target (value): " + target);
    System.out.println("Column name (filter for the database): " + columnName);
    System.out.println("Comparison operator: " + comparisonOperator);

    // Get column names from the database
    List<String> columnNames = getColumnNames(jdbcUrl, username, password, tableName);

    if (!columnNames.isEmpty()) {
        // Build a table with column names and values
        StringBuilder table = new StringBuilder();

        // Add column names as headers
        for (String colName : columnNames) {
            table.append(String.format("%-20s", colName)); // Adjust the width as needed
        }
        table.append(System.lineSeparator());

        // Retrieve values based on the provided search criteria
        List<String> foundValues = searchInDatabase(jdbcUrl, username, password, tableName, columnName, target, comparisonOperator);

        // Add values for each row
        for (String value : foundValues) {
            String[] rowValues = value.split(", ");
            for (String rowValue : rowValues) {
                table.append(String.format("%-20s", rowValue)); // Adjust the width as needed
            }
            table.append(System.lineSeparator());
        }

        return table.toString();
    } else {
        System.out.println("Unable to retrieve column names from the database.");
        return null;
    }
}

// Helper method to retrieve column names from the database
private static List<String> getColumnNames(String jdbcUrl, String username, String password, String tableName) {
    List<String> columnNames = new ArrayList<>();

    try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
        DatabaseMetaData metaData = connection.getMetaData();
        try (ResultSet resultSet = metaData.getColumns(null, null, tableName, null)) {
            while (resultSet.next()) {
                String columnName = resultSet.getString("COLUMN_NAME");
                columnNames.add(columnName);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace(); // Log or handle the exception appropriately
    }

    return columnNames;
}


public static List<String> getAllFromDatabase(String jdbcUrl, String username, String password, String tableName) {
    List<String> results = new ArrayList<>();

    if (jdbcUrl == null || username == null || password == null || tableName == null) {
        // Add appropriate error handling or logging for invalid input parameters
        return results;
    }

    try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
        // Build the SQL query to select all records from the table
        String sql = "SELECT * FROM " + tableName;
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            try (ResultSet resultSet = statement.executeQuery()) {
                while (resultSet.next()) {
                    // Construct a string representation of the entire row and add it to the results
                    StringBuilder row = new StringBuilder();
                    ResultSetMetaData metaData = resultSet.getMetaData();
                    int columnCount = metaData.getColumnCount();
                    for (int i = 1; i <= columnCount; i++) {
                        row.append(resultSet.getString(i));
                        if (i < columnCount) {
                            row.append(", ");
                        }
                    }
                    results.add(row.toString());
                }
            }
        }
    } catch (SQLException e) {
        // Log or handle the exception appropriately
        e.printStackTrace();
    }

    return results;
}


public String getAllRecords() {
    String jdbcUrl = "jdbc:mysql://sql8.freesqldatabase.com:3306/sql8672470";
    String username = "sql8672470";
    String password = "tjUFjunKny";
    String tableName = "Spotify";

    List<String> allValues = getAllFromDatabase(jdbcUrl, username, password, tableName);

    if (!allValues.isEmpty()) {
        // Get column names from the database
        List<String> columnNames = getColumnNames(jdbcUrl, username, password, tableName);

        // Build a table with column names and values
        StringBuilder table = new StringBuilder();

        // Add column names as headers
        for (String colName : columnNames) {
            table.append(String.format("%-20s", colName)); // Adjust the width as needed
        }
        table.append(System.lineSeparator());

        // Add values for each row
        for (String value : allValues) {
            String[] rowValues = value.split(", ");
            for (String rowValue : rowValues) {
                table.append(String.format("%-20s", rowValue)); // Adjust the width as needed
            }
            table.append(System.lineSeparator());
        }

        return table.toString();
    } else {
        System.out.println("No records found in the database.");
        return null;
    }
}




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {



  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= QUERY EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // QUERY ::= Search 
            {
              String RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    result = res; 
    System.out.println("QUERY: " + result);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("QUERY",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Search ::= Field SEARCH 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Search",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Search ::= Field 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = a;
    System.out.println("Search: " + RESULT);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Search",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Search ::= ALL 
            {
              String RESULT =null;
		
    RESULT = getAllRecords();
    System.out.println("Getting everything... " + RESULT);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Search",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Field ::= NumberField 
            {
              String RESULT =null;
		int fld1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fld1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fld1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = fld1; 
    System.out.println("Field: " + RESULT);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Field ::= SongNameField 
            {
              String RESULT =null;
		int fld2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fld2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fld2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = fld2; 
    System.out.println("Field: " + RESULT);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Field ::= ArtistField 
            {
              String RESULT =null;
		int fld3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fld3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fld3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = fld3; 
    System.out.println("Field: " + RESULT);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Field ::= AlbumField 
            {
              String RESULT =null;
		int fld4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fld4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fld4 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = fld4; 
    System.out.println("Field: " + RESULT);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Field ::= MillionStreamsField 
            {
              String RESULT =null;
		int fld5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fld5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fld5 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = fld5; 
    System.out.println("Field: " + RESULT);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NumberField ::= NUMBER CompareNum 
            {
              String RESULT =null;
		int numericValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int numericValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String numericValue = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = genericSearch("NUMBER", String.valueOf(comparisonValue), "="); 
    System.out.println("Specific field: " + RESULT);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NumberField",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SongNameField ::= SONG_NAME CompareString 
            {
              String RESULT =null;
		int songNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int songNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String songName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int comparisonStringleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comparisonStringright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String comparisonString = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = genericSearch("SONG_NAME", comparisonString, "="); 
    System.out.println("Specific field: " + RESULT);
    System.out.println("SONG_NAME: " + songName);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SongNameField",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ArtistField ::= ARTIST CompareString 
            {
              String RESULT =null;
		int artistNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int artistNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String artistName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int comparisonStringleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comparisonStringright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String comparisonString = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = genericSearch("ARTIST", comparisonString, "="); 
    System.out.println("Specific field: " + RESULT);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArtistField",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AlbumField ::= ALBUM CompareString 
            {
              String RESULT =null;
		int albumNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int albumNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String albumName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int comparisonStringleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comparisonStringright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String comparisonString = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = genericSearch("ALBUM", comparisonString, "="); 
    System.out.println("Specific field: " + RESULT);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AlbumField",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MillionStreamsField ::= MILLION_STREAMS ComparisonOperator NUM 
            {
              String RESULT =null;
		int millionStreamsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int millionStreamsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String millionStreams = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String number = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
    RESULT = genericSearch("MILLION_STREAMS", String.valueOf(number), comparisonOperator); 
    System.out.println("Specific field: " + RESULT);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MillionStreamsField",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ComparisonOperator ::= MORE_THAN 
            {
              String RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String mt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ">"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ComparisonOperator ::= LESS_THAN 
            {
              String RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "<"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ComparisonOperator ::= MORE_THAN_EQUAL 
            {
              String RESULT =null;
		int mteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String mte = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ">="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ComparisonOperator ::= LESS_THAN_EQUAL 
            {
              String RESULT =null;
		int lteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lte = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "<="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ComparisonOperator ::= EQUALS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ComparisonOperator ::= 
            {
              String RESULT =null;
		RESULT = "="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CompareString ::= STRING 
            {
              String RESULT =null;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
  RESULT = stringValue; 
    System.out.println("Comparison field: " + stringValue);


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CompareString",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CompareNum ::= NUM 
            {
              Object RESULT =null;
		int numberValueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numberValueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String numberValue = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
  RESULT = Integer.parseInt(numberValue); 
  System.out.println("Comparison field: " + numberValue);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CompareNum",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
