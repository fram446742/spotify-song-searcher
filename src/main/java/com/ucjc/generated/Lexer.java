// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.jflex

/*--------------------1. User Code--------------------*/
//------> Packages and imports
package com.ucjc.generated;

import java_cup.runtime.*;
import java.util.LinkedList;
import com.ucjc.utils.*;

/*--------------------2. Options and declarations--------------------*/

@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     5,  6,  7,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  0,  6, 
     8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  6,  6,  9, 10, 11,  6, 
     6, 12, 13, 14, 15, 16,  6, 17, 18, 19,  6,  6, 20, 21, 22, 23, 
    24, 25, 26, 27, 28, 29, 30,  6,  6, 31,  6,  6,  6,  6,  6, 32, 
     6, 12, 13, 14, 15, 16,  6, 17, 18, 19,  6,  6, 20, 21, 22, 23, 
    24, 25, 26, 33, 28, 29, 30,  6,  6, 31,  6,  6,  6,  6,  6,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  0,  6,  6, 
     6,  6,  0,  0,  6,  6,  6,  6,  6,  0,  6,  6,  0,  0,  0,  6, 
     6, 34,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 35,  6,  6, 
     6,  6,  6, 36,  6,  6,  6,  6,  6,  6, 37,  6,  6,  6,  6,  6, 
     6, 34,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 35,  6,  6, 
     6,  6,  6, 36,  6,  6,  6,  6,  6,  6, 37,  6,  6,  6,  6,  6
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\4\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\16\3\1\2\5\0\1\10\1\11\33\3\3\0"+
    "\1\12\1\3\1\13\27\3\2\0\6\3\1\7\6\3"+
    "\1\14\1\3\1\15\5\3\1\14\3\3\2\0\1\16"+
    "\4\3\1\5\2\3\3\0\7\3\1\7\10\3\1\0"+
    "\4\3\2\0\1\17\2\3\1\6\3\0\1\3\1\7"+
    "\1\0\1\3\1\7\3\3\1\5\3\3\1\5\2\3"+
    "\1\5\4\3\3\0\1\3\2\20\3\3\1\0\1\3"+
    "\2\0\1\17\1\3\2\0\1\3\1\0\1\3\1\0"+
    "\2\3\1\5\2\0\2\3\2\0\1\3\1\0\3\3"+
    "\2\0\1\3\1\0\3\3\1\0\1\21\1\0\1\21"+
    "\1\3\2\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\2\3\2\0"+
    "\2\3\2\0\1\3\1\0\1\5\2\11\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\7"+
    "\1\3\1\14\3\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\2\3\2\0\1\11\1\3\2\10\1\3\3\10"+
    "\1\3\4\0\1\3\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\46\0\162\0\230\0\276\0\344"+
    "\0\u010a\0\u0130\0\46\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee"+
    "\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e"+
    "\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e"+
    "\0\46\0\46\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532"+
    "\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662"+
    "\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792"+
    "\0\u07b8\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2"+
    "\0\46\0\u08e8\0\276\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6"+
    "\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6"+
    "\0\u0afc\0\u0b22\0\u0b48\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06"+
    "\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36"+
    "\0\u0d5c\0\u0d82\0\u0da8\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66"+
    "\0\u0e8c\0\276\0\u0eb2\0\276\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a"+
    "\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u1008\0\u102e\0\u1054\0\276"+
    "\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112\0\u1138\0\u115e\0\u1184"+
    "\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242\0\u1268\0\u128e\0\u12b4"+
    "\0\u12da\0\u1300\0\u1326\0\u134c\0\u1372\0\u1398\0\u13be\0\u13e4"+
    "\0\u140a\0\u1430\0\u1456\0\u147c\0\u14a2\0\u14c8\0\u14ee\0\u1514"+
    "\0\u153a\0\u1560\0\u1586\0\u15ac\0\u15d2\0\u15f8\0\u161e\0\u1644"+
    "\0\u166a\0\46\0\u1690\0\u16b6\0\u16dc\0\u1702\0\u1728\0\u174e"+
    "\0\u1774\0\u179a\0\u17c0\0\u17e6\0\u180c\0\u1832\0\u1858\0\u187e"+
    "\0\u18a4\0\u18ca\0\u18f0\0\u1916\0\u193c\0\u1962\0\u1988\0\u19ae"+
    "\0\276\0\u19d4\0\u19fa\0\u1a20\0\u1a46\0\u1a6c\0\u1a92\0\u1ab8"+
    "\0\u1ade\0\276\0\u1b04\0\u1b2a\0\u1b50\0\u1b76\0\u1b9c\0\u1bc2"+
    "\0\u1be8\0\u1c0e\0\u1c34\0\46\0\u1c5a\0\u1c80\0\u1ca6\0\u1ccc"+
    "\0\u1cf2\0\u1d18\0\u1d3e\0\u1d64\0\u1d8a\0\u1db0\0\u1dd6\0\u1dfc"+
    "\0\u1e22\0\u1e48\0\u1e6e\0\u1e94\0\u1eba\0\u1ee0\0\u1f06\0\276"+
    "\0\u1f2c\0\46\0\u1f52\0\u1f78\0\u1f9e\0\u1fc4\0\u1fea\0\u2010"+
    "\0\u2036\0\u205c\0\u2082\0\u20a8\0\u20ce\0\u20f4\0\u211a\0\u2140"+
    "\0\u2166\0\u218c\0\u19d4\0\u21b2\0\u21d8\0\u21fe\0\u2224\0\u224a"+
    "\0\u2270\0\u2296\0\u22bc\0\u22e2\0\u2308\0\u232e\0\u2354\0\u237a"+
    "\0\u23a0\0\u23c6\0\u23ec\0\u2412\0\u2438\0\u245e\0\u2484\0\u24aa"+
    "\0\u24d0\0\46\0\u24f6\0\u251c\0\u2542\0\u2568\0\u258e\0\u25b4"+
    "\0\u25da\0\u2600\0\u2626\0\u264c\0\u2672\0\u2698\0\u26be\0\u26e4"+
    "\0\u270a\0\u2730\0\u2756\0\u277c\0\u27a2\0\u27c8\0\u27ee\0\u2814"+
    "\0\u283a\0\u2860\0\u2886\0\u28ac\0\u28d2\0\u28f8\0\u291e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\7\1\16\1\17"+
    "\1\20\2\7\1\21\1\22\1\23\1\24\1\7\1\25"+
    "\1\7\1\26\1\27\1\30\3\7\1\31\1\27\1\32"+
    "\3\7\47\0\1\3\3\0\1\3\42\0\1\4\44\0"+
    "\1\3\3\0\1\33\11\0\1\34\12\0\1\35\1\36"+
    "\4\0\1\37\1\36\12\0\1\7\5\0\32\7\7\40"+
    "\1\0\36\40\10\0\1\11\47\0\1\41\45\0\1\42"+
    "\41\0\1\7\5\0\10\7\1\43\5\7\1\44\13\7"+
    "\6\0\1\7\5\0\1\45\31\7\6\0\1\7\5\0"+
    "\4\7\1\46\25\7\6\0\1\7\5\0\22\7\1\47"+
    "\7\7\6\0\1\7\5\0\5\7\1\50\24\7\6\0"+
    "\1\7\5\0\4\7\1\51\25\7\6\0\1\7\5\0"+
    "\1\52\3\7\1\53\2\7\1\54\3\7\1\55\12\7"+
    "\1\56\3\7\6\0\1\7\5\0\1\57\12\7\1\60"+
    "\5\7\1\61\7\7\1\62\6\0\1\7\5\0\13\7"+
    "\1\63\5\7\1\64\10\7\6\0\1\7\5\0\4\7"+
    "\1\65\25\7\6\0\1\7\5\0\13\7\1\66\4\7"+
    "\1\67\11\7\6\0\1\7\5\0\7\7\1\70\3\7"+
    "\1\71\13\7\1\72\2\7\5\0\1\37\1\7\5\0"+
    "\3\7\1\17\12\7\1\26\1\73\4\7\1\74\1\73"+
    "\4\7\6\0\1\7\5\0\10\7\1\75\21\7\1\0"+
    "\1\3\3\0\1\3\24\0\1\35\33\0\1\76\45\0"+
    "\1\77\61\0\1\100\43\0\1\35\13\0\7\40\1\101"+
    "\36\40\6\0\1\7\5\0\1\7\1\102\6\7\1\103"+
    "\21\7\6\0\1\7\5\0\20\7\1\104\11\7\6\0"+
    "\1\7\5\0\12\7\1\105\17\7\5\0\1\37\1\7"+
    "\5\0\16\7\1\26\5\7\1\74\5\7\6\0\1\7"+
    "\5\0\4\7\1\106\25\7\6\0\1\7\5\0\21\7"+
    "\1\107\10\7\6\0\1\7\5\0\17\7\1\110\5\7"+
    "\1\110\4\7\6\0\1\7\5\0\17\7\1\111\3\7"+
    "\1\112\1\7\1\111\4\7\6\0\1\7\5\0\12\7"+
    "\1\113\17\7\6\0\1\7\5\0\10\7\1\114\21\7"+
    "\6\0\1\7\5\0\16\7\1\115\13\7\6\0\1\7"+
    "\5\0\17\7\1\111\5\7\1\111\4\7\6\0\1\7"+
    "\5\0\11\7\1\116\20\7\6\0\1\7\5\0\11\7"+
    "\1\117\20\7\6\0\1\7\5\0\10\7\1\120\1\121"+
    "\20\7\6\0\1\7\5\0\11\7\1\122\20\7\6\0"+
    "\1\7\5\0\17\7\1\123\5\7\1\123\4\7\6\0"+
    "\1\7\5\0\4\7\1\124\25\7\6\0\1\7\5\0"+
    "\14\7\1\125\15\7\6\0\1\7\5\0\12\7\1\126"+
    "\17\7\6\0\1\7\5\0\16\7\1\127\13\7\6\0"+
    "\1\7\5\0\20\7\1\130\11\7\6\0\1\7\5\0"+
    "\3\7\1\131\26\7\6\0\1\7\5\0\20\7\1\132"+
    "\11\7\6\0\1\7\5\0\20\7\1\67\11\7\6\0"+
    "\1\7\5\0\16\7\1\26\13\7\6\0\1\7\5\0"+
    "\1\7\1\102\30\7\5\0\1\37\24\0\1\35\5\0"+
    "\1\37\35\0\1\133\47\0\1\134\21\0\1\7\5\0"+
    "\21\7\1\135\10\7\6\0\1\7\5\0\7\7\1\136"+
    "\22\7\6\0\1\7\5\0\2\7\1\137\27\7\6\0"+
    "\1\7\5\0\16\7\1\140\13\7\6\0\1\7\5\0"+
    "\1\141\31\7\6\0\1\7\5\0\17\7\1\142\5\7"+
    "\1\142\4\7\5\0\1\143\1\7\5\0\7\7\1\144"+
    "\14\7\1\145\5\7\6\0\1\7\5\0\13\7\1\146"+
    "\16\7\6\0\1\7\5\0\13\7\1\147\16\7\6\0"+
    "\1\7\5\0\10\7\1\150\21\7\6\0\1\7\5\0"+
    "\4\7\1\151\25\7\6\0\1\7\5\0\4\7\1\152"+
    "\25\7\6\0\1\7\5\0\1\7\1\153\30\7\6\0"+
    "\1\7\5\0\10\7\1\154\2\7\1\154\16\7\6\0"+
    "\1\7\5\0\1\7\1\155\2\7\1\156\25\7\6\0"+
    "\1\7\5\0\4\7\1\156\25\7\6\0\1\7\5\0"+
    "\7\7\1\157\22\7\6\0\1\7\5\0\17\7\1\160"+
    "\5\7\1\160\4\7\6\0\1\7\5\0\16\7\1\161"+
    "\13\7\6\0\1\7\5\0\5\7\1\162\24\7\6\0"+
    "\1\7\5\0\4\7\1\163\25\7\6\0\1\7\5\0"+
    "\10\7\1\116\10\7\1\164\10\7\6\0\1\7\5\0"+
    "\1\165\12\7\1\103\16\7\6\0\1\7\5\0\21\7"+
    "\1\164\10\7\32\0\1\166\33\0\1\167\33\0\1\7"+
    "\5\0\11\7\1\170\20\7\6\0\1\7\5\0\17\7"+
    "\1\171\5\7\1\171\4\7\6\0\1\7\5\0\7\7"+
    "\1\172\22\7\6\0\1\7\5\0\23\7\1\173\6\7"+
    "\6\0\1\7\5\0\10\7\1\174\21\7\5\0\1\175"+
    "\1\7\5\0\20\7\1\176\3\7\1\177\5\7\17\0"+
    "\1\200\3\0\1\201\5\0\1\202\22\0\1\7\5\0"+
    "\5\7\1\203\24\7\6\0\1\7\5\0\7\7\1\144"+
    "\22\7\6\0\1\7\5\0\16\7\1\204\13\7\6\0"+
    "\1\7\5\0\16\7\1\205\1\206\5\7\1\207\4\7"+
    "\6\0\1\7\5\0\7\7\1\210\3\7\1\211\16\7"+
    "\5\0\1\212\1\7\5\0\20\7\1\213\3\7\1\214"+
    "\5\7\6\0\1\7\5\0\16\7\1\116\13\7\6\0"+
    "\1\7\5\0\4\7\1\215\25\7\6\0\1\7\5\0"+
    "\16\7\1\216\13\7\6\0\1\7\5\0\2\7\1\217"+
    "\15\7\1\220\11\7\6\0\1\7\5\0\20\7\1\221"+
    "\11\7\6\0\1\7\5\0\13\7\1\222\16\7\5\0"+
    "\1\223\1\7\5\0\12\7\1\224\11\7\1\225\5\7"+
    "\6\0\1\7\5\0\1\226\31\7\6\0\1\7\5\0"+
    "\10\7\1\227\21\7\6\0\1\7\5\0\17\7\1\103"+
    "\5\7\1\103\4\7\27\0\1\230\32\0\1\231\37\0"+
    "\1\7\5\0\20\7\1\232\11\7\6\0\1\7\5\0"+
    "\13\7\1\233\14\7\1\233\1\7\6\0\1\7\5\0"+
    "\20\7\1\234\11\7\5\0\1\235\1\7\5\0\32\7"+
    "\5\0\1\236\12\0\1\237\13\0\1\240\3\0\1\236"+
    "\13\0\1\7\5\0\6\7\1\241\23\7\5\0\1\236"+
    "\1\7\5\0\20\7\1\176\11\7\20\0\1\242\46\0"+
    "\1\243\61\0\1\200\16\0\1\7\5\0\21\7\1\244"+
    "\10\7\5\0\1\245\1\7\5\0\4\7\1\246\2\7"+
    "\1\247\14\7\1\250\5\7\5\0\1\251\1\7\5\0"+
    "\4\7\1\252\2\7\1\253\14\7\1\254\5\7\5\0"+
    "\1\255\1\7\5\0\7\7\1\256\14\7\1\257\5\7"+
    "\5\0\1\260\1\7\5\0\7\7\1\261\14\7\1\262"+
    "\5\7\6\0\1\7\5\0\13\7\1\263\16\7\6\0"+
    "\1\7\5\0\12\7\1\264\17\7\5\0\1\265\12\0"+
    "\1\266\13\0\1\267\3\0\1\265\13\0\1\7\5\0"+
    "\6\7\1\270\23\7\5\0\1\265\1\7\5\0\20\7"+
    "\1\213\11\7\6\0\1\7\5\0\16\7\1\271\13\7"+
    "\6\0\1\7\5\0\13\7\1\272\16\7\6\0\1\7"+
    "\5\0\7\7\1\273\22\7\6\0\1\7\5\0\7\7"+
    "\1\274\22\7\6\0\1\7\5\0\13\7\1\271\16\7"+
    "\6\0\1\7\5\0\3\7\1\275\26\7\26\0\1\276"+
    "\25\0\1\7\5\0\1\57\31\7\6\0\1\7\5\0"+
    "\12\7\1\224\17\7\6\0\1\7\5\0\11\7\1\277"+
    "\20\7\6\0\1\7\5\0\13\7\1\152\16\7\17\0"+
    "\1\300\53\0\1\301\26\0\1\7\5\0\1\302\31\7"+
    "\6\0\1\7\5\0\12\7\1\152\17\7\6\0\1\7"+
    "\5\0\6\7\1\303\23\7\14\0\1\13\51\0\1\237"+
    "\56\0\1\304\36\0\1\305\31\0\1\7\5\0\1\306"+
    "\31\7\35\0\1\307\16\0\1\7\5\0\1\310\31\7"+
    "\14\0\1\242\6\0\1\311\5\0\1\202\22\0\1\7"+
    "\5\0\17\7\1\312\5\7\1\312\4\7\6\0\1\7"+
    "\5\0\5\7\1\313\24\7\6\0\1\7\5\0\7\7"+
    "\1\247\22\7\14\0\1\314\6\0\1\315\5\0\1\316"+
    "\22\0\1\7\5\0\17\7\1\317\5\7\1\317\4\7"+
    "\6\0\1\7\5\0\5\7\1\320\24\7\6\0\1\7"+
    "\5\0\7\7\1\253\22\7\17\0\1\321\3\0\1\322"+
    "\5\0\1\316\22\0\1\7\5\0\5\7\1\323\24\7"+
    "\6\0\1\7\5\0\7\7\1\256\22\7\17\0\1\321"+
    "\3\0\1\324\5\0\1\316\22\0\1\7\5\0\5\7"+
    "\1\325\24\7\6\0\1\7\5\0\7\7\1\261\22\7"+
    "\6\0\1\7\5\0\12\7\1\326\17\7\6\0\1\7"+
    "\5\0\4\7\1\327\25\7\20\0\1\266\56\0\1\330"+
    "\36\0\1\331\31\0\1\7\5\0\1\332\31\7\5\0"+
    "\1\333\1\7\5\0\3\7\1\17\12\7\1\26\5\7"+
    "\1\334\5\7\6\0\1\7\5\0\13\7\1\335\14\7"+
    "\1\335\1\7\6\0\1\7\5\0\13\7\1\335\16\7"+
    "\6\0\1\7\5\0\21\7\1\336\10\7\14\0\1\337"+
    "\37\0\1\7\5\0\17\7\1\340\5\7\1\340\4\7"+
    "\35\0\1\341\43\0\1\342\5\0\1\342\12\0\1\7"+
    "\5\0\7\7\1\343\22\7\35\0\1\344\24\0\1\345"+
    "\37\0\1\7\5\0\12\7\1\346\17\7\14\0\1\347"+
    "\37\0\1\7\5\0\10\7\1\350\21\7\21\0\1\351"+
    "\31\0\1\245\1\7\5\0\7\7\1\247\14\7\1\250"+
    "\5\7\6\0\1\7\5\0\21\7\1\352\10\7\21\0"+
    "\1\353\61\0\1\321\15\0\1\251\1\7\5\0\7\7"+
    "\1\253\14\7\1\254\5\7\6\0\1\7\5\0\21\7"+
    "\1\354\10\7\20\0\1\314\46\0\1\355\32\0\1\7"+
    "\5\0\21\7\1\356\10\7\21\0\1\357\32\0\1\7"+
    "\5\0\21\7\1\360\10\7\5\0\1\361\1\7\5\0"+
    "\17\7\1\73\4\7\1\362\1\73\4\7\6\0\1\7"+
    "\5\0\17\7\1\363\5\7\1\363\4\7\35\0\1\364"+
    "\24\0\1\365\37\0\1\7\5\0\12\7\1\366\17\7"+
    "\5\0\1\37\11\0\1\34\12\0\1\35\5\0\1\37"+
    "\12\0\1\37\1\7\5\0\3\7\1\17\12\7\1\26"+
    "\5\7\1\74\5\7\6\0\1\7\5\0\12\7\1\271"+
    "\17\7\6\0\1\7\5\0\2\7\1\367\27\7\25\0"+
    "\1\370\36\0\1\371\35\0\1\7\5\0\12\7\1\372"+
    "\17\7\14\0\1\373\57\0\1\374\24\0\1\236\1\7"+
    "\5\0\32\7\24\0\1\375\26\0\1\376\1\7\5\0"+
    "\32\7\35\0\1\377\16\0\1\7\5\0\1\u0100\31\7"+
    "\35\0\1\u0101\16\0\1\7\5\0\1\u0102\31\7\35\0"+
    "\1\u0103\16\0\1\7\5\0\1\u0104\31\7\35\0\1\u0105"+
    "\16\0\1\7\5\0\1\u0106\31\7\33\0\1\36\5\0"+
    "\1\36\12\0\1\7\5\0\17\7\1\73\5\7\1\73"+
    "\4\7\14\0\1\u0107\57\0\1\u0108\24\0\1\265\1\7"+
    "\5\0\32\7\6\0\1\7\5\0\2\7\1\u0109\27\7"+
    "\20\0\1\u010a\43\0\1\u010b\35\0\1\7\5\0\5\7"+
    "\1\103\24\7\24\0\1\41\26\0\1\236\12\0\1\237"+
    "\17\0\1\236\12\0\1\376\6\0\1\42\14\0\1\u010c"+
    "\6\0\1\376\21\0\1\42\14\0\1\u010c\30\0\1\u010d"+
    "\37\0\1\7\5\0\10\7\1\u010e\21\7\14\0\1\u010f"+
    "\37\0\1\7\5\0\10\7\1\u0110\21\7\14\0\1\u0111"+
    "\37\0\1\7\5\0\10\7\1\u0112\21\7\14\0\1\u0113"+
    "\37\0\1\7\5\0\10\7\1\u0114\21\7\24\0\1\42"+
    "\26\0\1\265\12\0\1\266\17\0\1\265\13\0\1\7"+
    "\5\0\7\7\1\u0115\22\7\23\0\1\u0116\57\0\1\u0117"+
    "\34\0\1\u0118\26\0\1\376\1\7\5\0\4\7\1\u0119"+
    "\25\7\24\0\1\u011a\26\0\1\u011b\1\7\5\0\4\7"+
    "\1\u011c\25\7\24\0\1\u011d\26\0\1\u011b\1\7\5\0"+
    "\32\7\24\0\1\u011e\26\0\1\u011f\1\7\5\0\32\7"+
    "\6\0\1\7\5\0\13\7\1\u0120\16\7\27\0\1\u0121"+
    "\36\0\1\42\32\0\1\376\6\0\1\42\3\0\1\u0122"+
    "\10\0\1\u010c\6\0\1\376\13\0\1\7\5\0\17\7"+
    "\1\350\5\7\1\350\4\7\5\0\1\u011b\6\0\1\41"+
    "\3\0\1\u0123\10\0\1\u0124\6\0\1\u011b\21\0\1\41"+
    "\14\0\1\u0124\22\0\1\7\5\0\17\7\1\u0112\5\7"+
    "\1\u0112\4\7\5\0\1\u011b\6\0\1\41\14\0\1\u0124"+
    "\6\0\1\u011b\12\0\1\u011f\6\0\1\41\23\0\1\u011f"+
    "\21\0\1\41\37\0\1\7\5\0\12\7\1\u0125\17\7"+
    "\26\0\1\u0126\52\0\1\375\5\0\1\375\37\0\1\u011d"+
    "\5\0\1\u011d\41\0\1\u0127\16\0\1\7\5\0\4\7"+
    "\1\277\25\7\20\0\1\301\45\0\1\41\25\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10564];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\6\1\1\11\20\1\5\0"+
    "\2\11\33\1\3\0\1\11\31\1\2\0\31\1\2\0"+
    "\10\1\3\0\20\1\1\0\4\1\2\0\4\1\3\0"+
    "\1\1\1\11\1\0\21\1\3\0\6\1\1\0\1\1"+
    "\2\0\2\1\2\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\11\2\0\2\1\2\0\1\1\1\0\3\1\2\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\1\11\1\1"+
    "\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\2\0\2\1"+
    "\2\0\1\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\11\3\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\2\1\2\0"+
    "\11\1\4\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

//------> User code in java syntax

    public static LinkedList<TError> LexicalErrorTable = new LinkedList<TError>();

    // newline function declaracion
    private void newline() {
        yyline++;
        yycolumn = 1;
    }

    public LinkedList getTable(){
      return LexicalErrorTable;
    }

    public LinkedList clearTable(){
      LexicalErrorTable.clear();
      return LexicalErrorTable;
    }

    public String strg;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Lexical Error: " + yytext() + ", line: " + yyline + ", column: " + yycolumn);
    TError data = new TError(yytext(), yyline, yycolumn, "Lexical Error", "Symbol does not exist in the language");
    LexicalErrorTable.add(data);

    // Switch to a different state to ignore characters until the end of the line
    yybegin(YYINITIAL);
            }
          // fall through
          case 18: break;
          case 2:
            { /* Ignore white spaces and line breaks */
            }
          // fall through
          case 19: break;
          case 3:
            { /* Ignore other text*/
            }
          // fall through
          case 20: break;
          case 4:
            { return new Symbol(Sym.NUM, yyline, yycolumn, yytext());
            }
          // fall through
          case 21: break;
          case 5:
            { return new Symbol(Sym.LESS_THAN, yyline, yycolumn, yytext());
            }
          // fall through
          case 22: break;
          case 6:
            { return new Symbol(Sym.EQUALS, yyline, yycolumn, yytext());
            }
          // fall through
          case 23: break;
          case 7:
            { return new Symbol(Sym.MORE_THAN, yyline, yycolumn, yytext());
            }
          // fall through
          case 24: break;
          case 8:
            { return new Symbol(Sym.LESS_THAN_EQUAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 25: break;
          case 9:
            { return new Symbol(Sym.MORE_THAN_EQUAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 26: break;
          case 10:
            { return new Symbol(Sym.STRING, yyline, yycolumn, yytext().substring(1, yytext().length() - 1));
            }
          // fall through
          case 27: break;
          case 11:
            { return new Symbol(Sym.ALL, yyline, yycolumn, yytext());
            }
          // fall through
          case 28: break;
          case 12:
            { return new Symbol(Sym.SONG_NAME, yyline, yycolumn, yytext());
            }
          // fall through
          case 29: break;
          case 13:
            { return new Symbol(Sym.NULL, yyline, yycolumn, yytext());
            }
          // fall through
          case 30: break;
          case 14:
            { return new Symbol(Sym.ALBUM, yyline, yycolumn, yytext());
            }
          // fall through
          case 31: break;
          case 15:
            { return new Symbol(Sym.ARTIST, yyline, yycolumn, yytext());
            }
          // fall through
          case 32: break;
          case 16:
            { return new Symbol(Sym.NUMBER, yyline, yycolumn, yytext());
            }
          // fall through
          case 33: break;
          case 17:
            { return new Symbol(Sym.MILLION_STREAMS, yyline, yycolumn, yytext());
            }
          // fall through
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
