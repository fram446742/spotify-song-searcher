// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.jflex

/*--------------------1. User Code--------------------*/
//------> Packages and imports
package com.ucjc.generated;

import java_cup.runtime.*;
import java.util.LinkedList;
import com.ucjc.utils.*;

/*--------------------2. Options and declarations--------------------*/

@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     5,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  0,  8,  0, 
     9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  0,  0, 10, 11, 12,  0, 
     0, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 23, 24, 25, 26, 
    27, 22, 28, 29, 30, 31, 32, 22, 22, 33, 22,  0,  0,  0,  0, 34, 
     0, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 22, 23, 24, 25, 26, 
    27, 22, 28, 29, 30, 31, 32, 22, 22, 33, 22,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 35,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 36,  0,  0, 
     0,  0,  0, 37,  0,  0,  0,  0,  0,  0, 38,  0,  0,  0,  0,  0, 
     0, 35,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 36,  0,  0, 
     0,  0,  0, 37,  0,  0,  0,  0,  0,  0, 38,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\15\10\1\1\2\0\1\11\1\12\13\10\1\0"+
    "\11\10\2\0\1\13\1\14\1\10\1\15\12\10\1\0"+
    "\12\10\2\0\1\14\5\10\1\16\3\10\1\17\3\10"+
    "\1\0\6\10\1\17\3\10\2\0\1\14\1\20\5\10"+
    "\1\16\4\10\1\0\7\10\1\0\3\10\1\0\1\20"+
    "\1\21\1\22\1\10\1\0\2\10\1\0\3\10\3\23"+
    "\4\10\1\0\1\10\1\17\1\21\2\10\1\0\3\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\16\1\10\1\0"+
    "\1\24\2\10\2\0\1\10\1\0\2\10\1\0\1\23"+
    "\1\0\1\10\1\0\1\10\3\0\1\10\2\0\1\10"+
    "\2\0\1\10\2\0\1\10\4\0\1\10\3\0\1\16"+
    "\1\10\5\0\1\24\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\47\0\165\0\234\0\47\0\303"+
    "\0\352\0\47\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4"+
    "\0\u01fb\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c"+
    "\0\u0333\0\u035a\0\u0381\0\47\0\47\0\u03a8\0\u03cf\0\u03f6"+
    "\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e"+
    "\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666"+
    "\0\u068d\0\u06b4\0\u06db\0\u0702\0\47\0\u0729\0\u0750\0\u0222"+
    "\0\u0777\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888"+
    "\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0"+
    "\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8"+
    "\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0222\0\u0be2\0\u0c09"+
    "\0\u0c30\0\u0222\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a"+
    "\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52"+
    "\0\u0e79\0\u0ea0\0\47\0\u0222\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c"+
    "\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff\0\u1026\0\u104d\0\u1074"+
    "\0\u109b\0\u10c2\0\u10e9\0\u1110\0\u1137\0\u115e\0\u1185\0\u11ac"+
    "\0\u11d3\0\u11fa\0\u1221\0\47\0\u1248\0\u0222\0\u126f\0\u1296"+
    "\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380\0\u0222\0\u13a7"+
    "\0\u13ce\0\u13f5\0\u141c\0\u1443\0\u146a\0\u1491\0\u14b8\0\47"+
    "\0\u0222\0\u14df\0\u1506\0\u152d\0\u1554\0\u157b\0\u15a2\0\u15c9"+
    "\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c\0\u16b3\0\u16da\0\u0222"+
    "\0\u13a7\0\u1701\0\u1728\0\u174f\0\u1776\0\u179d\0\u17c4\0\u17eb"+
    "\0\u1812\0\47\0\u1839\0\u1860\0\u1887\0\u18ae\0\u18d5\0\u18fc"+
    "\0\u1923\0\u194a\0\u1971\0\u1998\0\u19bf\0\u19e6\0\u1a0d\0\u1a34"+
    "\0\u1a5b\0\u1a82\0\u1aa9\0\u1ad0\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c"+
    "\0\u1b93\0\u1bba\0\u1be1\0\47\0\u1c08\0\u1c2f\0\u1c56\0\u1c7d"+
    "\0\u1ca4\0\u1ccb\0\47\0\u1cf2\0\u1d19\0\u1d40\0\u1d67\0\u1d8e"+
    "\0\u1db5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\3\1\6\1\7"+
    "\1\2\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\5\22\1\23\1\24\1\22\1\25"+
    "\1\26\1\27\1\30\3\22\1\2\1\31\3\2\50\0"+
    "\1\3\3\0\1\3\43\0\1\4\44\0\6\32\1\0"+
    "\40\32\10\0\1\33\1\10\50\0\1\34\46\0\1\35"+
    "\50\0\12\22\1\36\4\22\1\37\5\22\22\0\22\22"+
    "\1\40\2\22\22\0\1\41\24\22\22\0\1\42\24\22"+
    "\22\0\23\22\1\43\1\22\22\0\4\22\1\44\20\22"+
    "\22\0\25\22\22\0\10\22\1\45\14\22\22\0\1\46"+
    "\14\22\1\47\4\22\1\50\2\22\4\0\1\51\15\0"+
    "\15\22\1\52\4\22\1\53\2\22\22\0\4\22\1\54"+
    "\20\22\22\0\1\55\3\22\1\56\10\22\1\57\3\22"+
    "\1\60\3\22\22\0\10\22\1\61\4\22\1\62\7\22"+
    "\2\0\1\63\31\0\1\64\17\0\6\32\1\65\40\32"+
    "\11\0\1\66\52\0\1\22\1\67\10\22\1\70\12\22"+
    "\22\0\21\22\1\71\3\22\22\0\20\22\1\72\4\22"+
    "\22\0\14\22\1\73\10\22\22\0\21\22\1\74\3\22"+
    "\22\0\4\22\1\75\20\22\22\0\2\22\1\76\22\22"+
    "\22\0\12\22\1\77\12\22\22\0\13\22\1\100\11\22"+
    "\22\0\13\22\1\101\11\22\22\0\13\22\1\102\11\22"+
    "\35\0\1\103\33\0\20\22\1\104\4\22\22\0\4\22"+
    "\1\105\20\22\22\0\12\22\1\106\3\22\1\107\6\22"+
    "\22\0\12\22\1\110\12\22\22\0\1\111\24\22\22\0"+
    "\14\22\1\112\10\22\22\0\17\22\1\113\5\22\22\0"+
    "\21\22\1\114\3\22\22\0\3\22\1\115\21\22\43\0"+
    "\1\116\26\0\1\117\41\0\1\120\52\0\22\22\1\121"+
    "\2\22\22\0\10\22\1\122\14\22\22\0\2\22\1\123"+
    "\22\22\22\0\2\22\1\124\16\22\1\125\3\22\22\0"+
    "\4\22\1\126\20\22\22\0\17\22\1\127\5\22\22\0"+
    "\7\22\1\130\15\22\22\0\12\22\1\131\12\22\22\0"+
    "\4\22\1\132\20\22\22\0\1\22\1\133\23\22\22\0"+
    "\1\22\1\134\2\22\1\135\20\22\26\0\1\136\42\0"+
    "\10\22\1\137\14\22\22\0\20\22\1\140\4\22\22\0"+
    "\4\22\1\141\20\22\22\0\17\22\1\142\5\22\22\0"+
    "\10\22\1\143\14\22\22\0\17\22\1\144\5\22\22\0"+
    "\6\22\1\145\16\22\22\0\4\22\1\146\20\22\22\0"+
    "\12\22\1\100\7\22\1\147\2\22\22\0\1\150\14\22"+
    "\1\70\7\22\44\0\1\151\46\0\1\152\20\0\1\153"+
    "\52\0\13\22\1\154\11\22\22\0\20\22\1\155\4\22"+
    "\22\0\1\156\24\22\22\0\10\22\1\157\14\22\22\0"+
    "\10\22\1\160\14\22\22\0\24\22\1\161\22\0\1\162"+
    "\24\22\22\0\10\22\1\163\4\22\1\164\7\22\22\0"+
    "\17\22\1\100\5\22\22\0\4\22\1\165\20\22\22\0"+
    "\17\22\1\166\5\22\41\0\1\167\27\0\2\22\1\170"+
    "\16\22\1\171\3\22\22\0\21\22\1\172\3\22\22\0"+
    "\1\173\24\22\22\0\15\22\1\174\7\22\22\0\3\22"+
    "\1\175\21\22\22\0\2\22\1\176\22\22\12\0\1\177"+
    "\7\0\14\22\1\200\10\22\1\177\21\0\1\201\24\22"+
    "\22\0\12\22\1\202\12\22\22\0\20\22\1\70\4\22"+
    "\34\0\1\203\47\0\1\204\33\0\21\22\1\205\3\22"+
    "\22\0\17\22\1\206\5\22\22\0\15\22\1\207\7\22"+
    "\3\0\1\210\16\0\3\22\1\211\21\22\22\0\21\22"+
    "\1\212\3\22\12\0\1\213\7\0\3\22\1\214\21\22"+
    "\1\213\21\0\15\22\1\215\7\22\22\0\14\22\1\216"+
    "\10\22\22\0\17\22\1\217\5\22\22\0\15\22\1\220"+
    "\7\22\37\0\1\221\31\0\10\22\1\222\14\22\22\0"+
    "\10\22\1\223\14\22\22\0\15\22\1\217\7\22\22\0"+
    "\20\22\1\224\4\22\22\0\3\22\1\225\21\22\22\0"+
    "\1\126\24\22\22\0\7\22\1\206\15\22\36\0\1\226"+
    "\32\0\1\46\24\22\22\0\13\22\1\227\11\22\22\0"+
    "\15\22\1\132\7\22\37\0\1\230\31\0\1\231\24\22"+
    "\22\0\14\22\1\132\10\22\36\0\1\230\32\0\1\232"+
    "\24\22\22\0\7\22\1\233\15\22\25\0\1\234\43\0"+
    "\4\22\1\235\20\22\22\0\14\22\1\236\10\22\22\0"+
    "\4\22\1\237\20\22\12\0\1\240\7\0\3\22\1\241"+
    "\21\22\1\240\11\0\1\240\12\0\1\242\21\0\1\240"+
    "\21\0\15\22\1\243\7\22\3\0\1\244\16\0\15\22"+
    "\1\243\7\22\22\0\4\22\1\245\20\22\22\0\22\22"+
    "\1\246\2\22\22\0\1\247\46\0\20\22\1\250\4\22"+
    "\22\0\3\22\1\251\21\22\22\0\10\22\1\252\14\22"+
    "\26\0\1\253\32\0\1\254\7\0\20\22\1\255\4\22"+
    "\1\254\11\0\1\256\7\0\20\22\1\257\4\22\1\256"+
    "\21\0\20\22\1\251\4\22\25\0\1\242\43\0\4\22"+
    "\1\260\20\22\26\0\1\261\42\0\14\22\1\217\10\22"+
    "\36\0\1\262\22\0\1\263\7\0\3\22\1\17\21\22"+
    "\1\263\21\0\2\22\1\264\22\22\35\0\1\265\33\0"+
    "\14\22\1\266\10\22\12\0\1\254\27\0\1\267\4\0"+
    "\1\254\41\0\1\267\26\0\1\55\24\22\42\0\1\270"+
    "\26\0\21\22\1\60\3\22\12\0\1\271\7\0\17\22"+
    "\1\272\5\22\1\271\11\0\1\271\26\0\1\273\5\0"+
    "\1\271\24\0\1\274\43\0\2\22\1\275\22\22\26\0"+
    "\1\230\42\0\6\22\1\70\16\22\22\0\1\276\67\0"+
    "\1\277\44\0\1\273\27\0\4\22\1\300\20\22\26\0"+
    "\1\301\42\0\1\302\46\0\10\22\1\303\14\22\34\0"+
    "\1\304\53\0\1\305\27\0\16\22\1\107\6\22\40\0"+
    "\1\306\51\0\1\307\25\0\15\22\1\310\7\22\32\0"+
    "\1\311\42\0\1\312\61\0\1\313\33\0\1\314\42\0"+
    "\14\22\1\315\10\22\25\0\1\316\43\0\1\317\63\0"+
    "\1\320\31\0\4\22\1\227\20\22\22\0\1\314\61\0"+
    "\1\321\36\0\1\322\63\0\1\323\50\0\1\324\26\0"+
    "\1\325\46\0\1\326\54\0\1\327\53\0\1\330\45\0"+
    "\1\331\36\0\1\321\25\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7644];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\17\1\2\0\2\11\13\1\1\0\11\1\2\0\1\11"+
    "\15\1\1\0\12\1\2\0\16\1\1\0\12\1\2\0"+
    "\1\11\13\1\1\0\7\1\1\0\3\1\1\0\1\11"+
    "\3\1\1\0\2\1\1\0\12\1\1\0\1\1\1\11"+
    "\3\1\1\0\3\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\3\1\2\0\1\1\1\0\2\1\1\0"+
    "\1\11\1\0\1\1\1\0\1\1\3\0\1\1\2\0"+
    "\1\1\2\0\1\1\2\0\1\1\4\0\1\1\3\0"+
    "\1\11\1\1\5\0\1\11\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

//------> User code in java syntax

    public static LinkedList<TError> LexicalErrorTable = new LinkedList<TError>();

    // newline function declaracion
    private void newline() {
        yyline++;
        yycolumn = 1;
    }

    public LinkedList getTable(){
      return LexicalErrorTable;
    }

    public String strg;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Lexical Error: " + yytext() + ", line: " + yyline + ", column: " + yycolumn);
    TError data = new TError(yytext(), yyline, yycolumn, "Lexical Error", "Symbol does not exist in the language");
    LexicalErrorTable.add(data);

    // Switch to a different state to ignore characters until the end of the line
    yybegin(YYINITIAL);
            }
          // fall through
          case 21: break;
          case 2:
            { /* Ignore white spaces and line breaks */
            }
          // fall through
          case 22: break;
          case 3:
            { return new Symbol(Sym.COMMA, yyline, yycolumn, yytext());
            }
          // fall through
          case 23: break;
          case 4:
            { return new Symbol(Sym.NUM, yyline, yycolumn, yytext());
            }
          // fall through
          case 24: break;
          case 5:
            { return new Symbol(Sym.LESS_THAN, yyline, yycolumn, yytext());
            }
          // fall through
          case 25: break;
          case 6:
            { return new Symbol(Sym.EQUALS, yyline, yycolumn, yytext());
            }
          // fall through
          case 26: break;
          case 7:
            { return new Symbol(Sym.MORE_THAN, yyline, yycolumn, yytext());
            }
          // fall through
          case 27: break;
          case 8:
            { /* Ignore other text*/
            }
          // fall through
          case 28: break;
          case 9:
            { return new Symbol(Sym.LESS_THAN_EQUAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 29: break;
          case 10:
            { return new Symbol(Sym.MORE_THAN_EQUAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 30: break;
          case 11:
            { return new Symbol(Sym.STRING, yyline, yycolumn, yytext().substring(1, yytext().length() - 1));
            }
          // fall through
          case 31: break;
          case 12:
            { return new Symbol(Sym.DECIMAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 32: break;
          case 13:
            { return new Symbol(Sym.ALL, yyline, yycolumn, yytext());
            }
          // fall through
          case 33: break;
          case 14:
            { return new Symbol(Sym.RELEASE_DATE, yyline, yycolumn, yytext());
            }
          // fall through
          case 34: break;
          case 15:
            { return new Symbol(Sym.SONG_NAME, yyline, yycolumn, yytext());
            }
          // fall through
          case 35: break;
          case 16:
            { return new Symbol(Sym.ALBUM, yyline, yycolumn, yytext());
            }
          // fall through
          case 36: break;
          case 17:
            { return new Symbol(Sym.ARTIST, yyline, yycolumn, yytext());
            }
          // fall through
          case 37: break;
          case 18:
            { return new Symbol(Sym.SEARCH, yyline, yycolumn, yytext());
            }
          // fall through
          case 38: break;
          case 19:
            { return new Symbol(Sym.NUMBER, yyline, yycolumn, yytext());
            }
          // fall through
          case 39: break;
          case 20:
            { return new Symbol(Sym.MILLION_STREAMS, yyline, yycolumn, yytext());
            }
          // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
