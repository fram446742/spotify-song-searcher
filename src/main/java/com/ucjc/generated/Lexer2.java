// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer2.jflex

/*--------------------1. User Code--------------------*/
//------> Packages and imports
package com.ucjc.generated;

import java_cup.runtime.*;
import java.util.LinkedList;
import com.ucjc.utils.*;

/*--------------------2. Options and declarations--------------------*/

@SuppressWarnings("fallthrough")
public class Lexer2 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     5,  6,  7,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  0,  6, 
     8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  6,  6,  9, 10, 11,  6, 
     6, 12, 13, 14, 15, 16,  6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
    26, 27, 28, 29, 30, 31, 32, 33,  6, 34, 35,  6,  6,  6,  6, 36, 
     6, 12, 13, 14, 15, 16,  6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
    26, 27, 28, 37, 30, 31, 32, 33,  6, 34, 35,  6,  6,  6,  6,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  0,  6,  6, 
     6,  6,  0,  0,  6,  6,  6,  6,  6,  0,  6,  6,  0,  0,  0,  6, 
     6, 38,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 39,  6,  6, 
     6, 40,  6, 41,  6,  6,  6,  6,  6,  6, 42,  6,  6,  6,  6,  6, 
     6, 38,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 39,  6,  6, 
     6, 40,  6, 41,  6,  6,  6,  6,  6,  6, 42,  6,  6,  6,  6,  6
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\4\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\23\3\1\2\11\0\1\10\1\11\60\3\10\0"+
    "\1\12\2\3\1\13\1\14\3\3\1\15\2\3\2\16"+
    "\7\3\1\17\5\3\1\20\37\3\1\0\1\16\5\0"+
    "\2\3\1\14\2\3\1\14\6\3\1\16\2\3\1\16"+
    "\11\3\1\7\4\3\1\20\2\3\1\20\1\21\2\3"+
    "\1\22\1\3\1\23\10\3\1\22\10\3\1\24\1\14"+
    "\1\3\4\0\1\24\1\14\2\3\1\14\2\0\1\14"+
    "\1\3\1\14\2\3\1\15\3\3\1\16\2\0\1\16"+
    "\1\3\1\16\4\3\1\24\2\3\1\5\3\3\3\0"+
    "\5\3\1\20\2\0\1\20\1\3\2\20\1\7\13\3"+
    "\1\0\11\3\1\24\1\3\2\24\1\3\1\0\1\20"+
    "\3\0\1\24\2\3\1\14\1\0\1\3\1\25\1\3"+
    "\1\15\2\3\1\15\3\3\1\16\1\0\2\3\1\26"+
    "\3\3\1\6\1\3\3\0\2\3\1\7\1\0\1\3"+
    "\1\7\3\3\1\5\3\3\1\5\2\3\1\5\2\3"+
    "\1\20\1\0\1\3\3\0\1\3\2\27\6\3\1\0"+
    "\10\3\4\0\2\3\1\0\1\3\1\0\1\25\3\3"+
    "\1\15\2\0\3\3\1\15\2\3\1\0\5\3\2\0"+
    "\2\3\1\0\1\3\1\0\2\3\1\5\2\0\2\3"+
    "\2\0\1\3\1\0\1\3\1\0\1\3\2\0\1\3"+
    "\1\0\10\3\1\0\1\3\1\0\1\3\1\30\1\3"+
    "\1\31\4\3\4\0\2\3\1\0\1\3\1\0\1\32"+
    "\2\3\3\0\1\3\2\15\2\3\1\0\5\3\2\0"+
    "\1\3\1\33\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\2\0\1\3"+
    "\2\0\2\3\1\24\5\3\1\0\5\3\1\32\1\24"+
    "\2\0\2\3\1\0\1\3\1\0\2\3\1\0\2\15"+
    "\1\3\1\15\1\3\2\15\1\3\1\15\1\3\1\0"+
    "\5\3\1\0\1\5\2\11\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\7"+
    "\1\0\1\24\1\3\1\24\4\3\1\0\3\3\1\22"+
    "\2\3\3\0\2\3\1\0\1\3\1\0\2\3\3\0"+
    "\4\3\1\0\2\3\1\24\1\3\2\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\5\3\1\0"+
    "\3\3\3\0\1\3\1\34\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\1\0\3\3\1\0\1\11\1\3\2\10"+
    "\1\3\3\10\1\0\2\3\1\0\5\3\4\0\1\3"+
    "\1\35\1\15\2\0\2\3\1\0\3\3\4\0\2\3"+
    "\2\0\4\3\4\0\1\3\2\0\2\3\1\0\4\3"+
    "\2\0\2\3\1\0\1\3\7\0\2\3\1\0\1\3"+
    "\1\0\1\30\1\24\2\3\1\0\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[714];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\53\0\201\0\254\0\327\0\u0102"+
    "\0\u012d\0\u0158\0\53\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387"+
    "\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df"+
    "\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637"+
    "\0\u0662\0\53\0\53\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739"+
    "\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891"+
    "\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9"+
    "\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41"+
    "\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99"+
    "\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1"+
    "\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49"+
    "\0\u0f74\0\u0f9f\0\u0fca\0\53\0\u0ff5\0\u1020\0\327\0\u104b"+
    "\0\u1076\0\u10a1\0\u10cc\0\327\0\u10f7\0\u1122\0\327\0\u114d"+
    "\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a\0\327"+
    "\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2"+
    "\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a"+
    "\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682"+
    "\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da"+
    "\0\u1805\0\u1830\0\u185b\0\u1886\0\u18b1\0\u18dc\0\53\0\u1907"+
    "\0\u1932\0\u195d\0\u1988\0\u19b3\0\u19de\0\u1a09\0\u1a34\0\u1a5f"+
    "\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7"+
    "\0\u1be2\0\u1c0d\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f"+
    "\0\u1d3a\0\u1d65\0\u1d90\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1e67"+
    "\0\u1e92\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\327\0\u1f94"+
    "\0\u1fbf\0\327\0\u1fea\0\327\0\u2015\0\u2040\0\u206b\0\u2096"+
    "\0\u20c1\0\u20ec\0\u2117\0\u2142\0\u216d\0\u2198\0\u21c3\0\u21ee"+
    "\0\u2219\0\u2244\0\u226f\0\u229a\0\u22c5\0\u22f0\0\327\0\u231b"+
    "\0\u2346\0\u2371\0\u239c\0\u23c7\0\u23f2\0\53\0\u241d\0\u2448"+
    "\0\u2473\0\u249e\0\u24c9\0\u24f4\0\u251f\0\u254a\0\u2575\0\u25a0"+
    "\0\u25cb\0\u25f6\0\u2621\0\u264c\0\u2677\0\u26a2\0\u26cd\0\u26f8"+
    "\0\u2723\0\u274e\0\u2779\0\u27a4\0\u27cf\0\u27fa\0\u2825\0\u2850"+
    "\0\u287b\0\u28a6\0\u28d1\0\u28fc\0\u2927\0\u2952\0\u297d\0\u29a8"+
    "\0\u29d3\0\u29fe\0\u2a29\0\u2a54\0\u2a7f\0\u2aaa\0\u2ad5\0\u2b00"+
    "\0\u2b2b\0\u2b56\0\u2b81\0\327\0\u2bac\0\u2bd7\0\u2c02\0\u2c2d"+
    "\0\u2c58\0\u2c83\0\u2cae\0\u2cd9\0\u2d04\0\u2d2f\0\u2d5a\0\u2d85"+
    "\0\u2db0\0\u2ddb\0\u2e06\0\u2e31\0\u2e5c\0\u2e87\0\u2eb2\0\u2edd"+
    "\0\u2f08\0\u2f33\0\u2f5e\0\u2f89\0\u2fb4\0\u2fdf\0\u300a\0\u3035"+
    "\0\53\0\u3060\0\u308b\0\u30b6\0\u30e1\0\u310c\0\u3137\0\u3162"+
    "\0\u318d\0\u31b8\0\u31e3\0\u320e\0\u3239\0\u3264\0\u328f\0\u32ba"+
    "\0\u32e5\0\u3310\0\u333b\0\u3366\0\u3391\0\u33bc\0\u33e7\0\327"+
    "\0\u3412\0\u343d\0\u3468\0\u3493\0\u34be\0\u34e9\0\u3514\0\u353f"+
    "\0\u356a\0\u3595\0\53\0\u35c0\0\u35eb\0\u3616\0\u3641\0\u366c"+
    "\0\u3697\0\u36c2\0\u36ed\0\u3718\0\u3743\0\u376e\0\u3799\0\u37c4"+
    "\0\u37ef\0\u381a\0\u3845\0\u3870\0\u389b\0\u38c6\0\u38f1\0\u391c"+
    "\0\u3947\0\u3972\0\327\0\u399d\0\u39c8\0\u39f3\0\u3a1e\0\u3a49"+
    "\0\u3a74\0\u3a9f\0\u3aca\0\u3af5\0\u3b20\0\u3b4b\0\u3b76\0\u3ba1"+
    "\0\u3bcc\0\u3bf7\0\u3c22\0\u3c4d\0\u3c78\0\u3ca3\0\u3cce\0\u3cf9"+
    "\0\u3d24\0\u3d4f\0\u3d7a\0\u3da5\0\u3dd0\0\u3dfb\0\u3e26\0\u3e51"+
    "\0\u3e7c\0\u3ea7\0\u3ed2\0\u3efd\0\u3f28\0\u3f53\0\u3f7e\0\u3fa9"+
    "\0\u3fd4\0\u3fff\0\u402a\0\u4055\0\u4080\0\u40ab\0\u40d6\0\u4101"+
    "\0\u412c\0\u4157\0\u4182\0\u41ad\0\u41d8\0\u4203\0\u422e\0\u4259"+
    "\0\53\0\u4284\0\u42af\0\u42da\0\u4305\0\u4330\0\u435b\0\u4386"+
    "\0\u43b1\0\u43dc\0\u4407\0\u4432\0\u445d\0\u4488\0\u44b3\0\u44de"+
    "\0\u4509\0\u4534\0\u455f\0\u458a\0\u45b5\0\u45e0\0\u460b\0\u4636"+
    "\0\u4661\0\u468c\0\u46b7\0\u46e2\0\327\0\u470d\0\327\0\u4738"+
    "\0\u4763\0\u478e\0\u47b9\0\u47e4\0\u480f\0\u483a\0\u4865\0\u4890"+
    "\0\u48bb\0\u48e6\0\u4911\0\u493c\0\327\0\u4967\0\u4992\0\u49bd"+
    "\0\u49e8\0\u4a13\0\u4a3e\0\u4a69\0\u4a94\0\u399d\0\u4abf\0\u4aea"+
    "\0\u4b15\0\u4b40\0\u4b6b\0\u4b96\0\u4bc1\0\u4bec\0\u4c17\0\u4c42"+
    "\0\327\0\u4c6d\0\u4c98\0\u4cc3\0\u4cee\0\u4d19\0\u4d44\0\u4d6f"+
    "\0\u4d9a\0\u4dc5\0\u4df0\0\u4e1b\0\u4e46\0\u4e71\0\u4e9c\0\u4ec7"+
    "\0\u4ef2\0\u4f1d\0\u4f48\0\u4f73\0\u4f9e\0\u4fc9\0\u4ff4\0\u501f"+
    "\0\u504a\0\u5075\0\u50a0\0\u50cb\0\u50f6\0\u5121\0\u514c\0\u3dd0"+
    "\0\53\0\u5177\0\u51a2\0\u51cd\0\u51f8\0\u5223\0\u524e\0\u5279"+
    "\0\u52a4\0\u52cf\0\u52fa\0\u5325\0\u5350\0\u537b\0\u53a6\0\u53d1"+
    "\0\u53fc\0\u5427\0\u5452\0\u547d\0\u54a8\0\u54d3\0\u54fe\0\u5529"+
    "\0\u5554\0\u557f\0\u55aa\0\u55d5\0\u5600\0\u562b\0\u5656\0\u5681"+
    "\0\u56ac\0\u56d7\0\u5702\0\u572d\0\u5758\0\u5783\0\u57ae\0\u57d9"+
    "\0\u5804\0\u582f\0\u585a\0\u5885\0\u58b0\0\u58db\0\u5906\0\u5931"+
    "\0\u595c\0\u5987\0\u59b2\0\u59dd\0\u5a08\0\u5a33\0\u5a5e\0\u5a89"+
    "\0\53\0\u5ab4\0\u5adf\0\u5b0a\0\u5b35\0\u5b60\0\u5b8b\0\u5bb6"+
    "\0\u5be1\0\u5c0c\0\u5c37\0\u5c62\0\u5c8d\0\u5cb8\0\u5ce3\0\u5d0e"+
    "\0\u5d39\0\u5d64\0\u5d8f\0\u5dba\0\u5de5\0\u5e10\0\u5e3b\0\327"+
    "\0\u5e66\0\u5e91\0\u5ebc\0\u5ee7\0\u5f12\0\u5f3d\0\u5f68\0\u5f93"+
    "\0\u5fbe\0\u5fe9\0\u6014\0\u603f\0\u606a\0\u6095\0\u60c0\0\u60eb"+
    "\0\u6116\0\u6141\0\u616c\0\u6197\0\u61c2\0\u61ed\0\u6218\0\u6243"+
    "\0\327\0\u626e\0\u6299\0\u62c4\0\u62ef\0\u631a\0\u6345\0\u6370"+
    "\0\u639b\0\u63c6\0\u63f1\0\u641c\0\u6447\0\u6472\0\u649d\0\u64c8"+
    "\0\u64f3\0\u651e\0\u6549\0\u6574\0\u659f\0\u65ca\0\u65f5\0\u6620"+
    "\0\u664b\0\u6676\0\u66a1\0\u66cc\0\u66f7\0\u6722\0\u674d\0\u6778"+
    "\0\u67a3\0\u67ce\0\u67f9\0\u6824\0\u684f\0\u687a\0\327\0\53"+
    "\0\u68a5\0\u68d0\0\u68fb\0\u6926\0\u6951\0\u697c\0\u69a7\0\u69d2"+
    "\0\u69fd\0\u6a28\0\u6a53\0\u6a7e\0\u6aa9\0\u6ad4\0\u6aff\0\u6b2a"+
    "\0\u6b55\0\u6b80\0\u6bab\0\u6bd6\0\u6c01\0\u6c2c\0\u6c57\0\u6c82"+
    "\0\u6cad\0\u6cd8\0\u6d03\0\u6d2e\0\u6d59\0\u6d84\0\u6daf\0\u6dda"+
    "\0\u6e05\0\u6e30\0\u6e5b\0\u6e86\0\u6eb1\0\u6edc\0\u6f07\0\u6f32"+
    "\0\u6f5d\0\u6f88\0\u6fb3\0\u6fde\0\u7009\0\u7034\0\u705f\0\u708a"+
    "\0\u70b5\0\u70e0\0\u710b\0\u7136\0\53\0\53\0\u7161\0\u718c"+
    "\0\u71b7\0\327";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[714];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\7\1\22\1\23\1\7\1\24\1\25\1\26"+
    "\1\27\1\7\1\30\1\7\1\31\1\32\1\33\1\7"+
    "\1\34\1\35\1\36\1\7\1\37\1\32\5\7\54\0"+
    "\1\3\3\0\1\3\47\0\1\4\51\0\1\3\3\0"+
    "\1\40\6\0\1\41\2\0\1\42\7\0\1\43\2\0"+
    "\1\44\1\0\1\45\4\0\1\46\1\47\1\0\1\50"+
    "\14\0\1\7\5\0\37\7\7\51\1\0\43\51\10\0"+
    "\1\11\54\0\1\52\52\0\1\53\46\0\1\7\5\0"+
    "\2\7\1\54\7\7\1\55\1\7\1\56\3\7\1\57"+
    "\13\7\1\56\2\7\6\0\1\7\5\0\1\60\3\7"+
    "\1\61\11\7\1\62\20\7\6\0\1\7\5\0\1\63"+
    "\36\7\6\0\1\7\5\0\1\64\3\7\1\65\2\7"+
    "\1\66\23\7\1\66\3\7\6\0\1\7\5\0\14\7"+
    "\1\67\4\7\1\70\2\7\1\71\4\7\1\70\5\7"+
    "\6\0\1\7\5\0\1\72\36\7\6\0\1\7\5\0"+
    "\5\7\1\73\6\7\1\74\22\7\6\0\1\7\5\0"+
    "\4\7\1\75\32\7\6\0\1\7\5\0\4\7\1\76"+
    "\2\7\1\77\27\7\6\0\1\7\5\0\1\100\3\7"+
    "\1\101\10\7\1\102\14\7\1\103\4\7\6\0\1\7"+
    "\5\0\1\104\14\7\1\105\5\7\1\106\12\7\1\107"+
    "\6\0\1\7\5\0\1\110\14\7\1\111\5\7\1\112"+
    "\13\7\6\0\1\7\5\0\4\7\1\113\32\7\6\0"+
    "\1\7\5\0\15\7\1\114\1\115\3\7\1\116\14\7"+
    "\6\0\1\7\5\0\7\7\1\117\5\7\1\120\15\7"+
    "\1\121\3\7\6\0\1\7\5\0\1\122\6\7\1\123"+
    "\27\7\6\0\1\7\5\0\15\7\1\124\21\7\6\0"+
    "\1\7\5\0\4\7\1\125\32\7\5\0\1\50\1\7"+
    "\5\0\1\126\2\7\1\127\7\7\1\130\2\7\1\131"+
    "\1\7\1\132\4\7\1\35\1\36\1\7\1\133\6\7"+
    "\1\0\1\3\3\0\1\3\6\0\1\41\15\0\1\44"+
    "\1\0\1\45\52\0\1\134\32\0\1\135\3\0\1\136"+
    "\63\0\1\137\35\0\1\140\56\0\1\141\63\0\1\142"+
    "\41\0\1\143\46\0\1\41\15\0\1\44\1\0\1\45"+
    "\16\0\7\51\1\144\43\51\6\0\1\7\5\0\15\7"+
    "\1\145\5\7\1\146\13\7\6\0\1\7\5\0\12\7"+
    "\1\147\24\7\6\0\1\7\5\0\15\7\1\150\21\7"+
    "\6\0\1\7\5\0\22\7\1\151\14\7\6\0\1\7"+
    "\5\0\7\7\1\152\27\7\6\0\1\7\5\0\1\153"+
    "\36\7\6\0\1\7\5\0\13\7\1\154\23\7\6\0"+
    "\1\7\5\0\14\7\1\155\22\7\6\0\1\7\5\0"+
    "\14\7\1\156\11\7\1\157\10\7\5\0\1\50\1\7"+
    "\5\0\1\126\15\7\1\131\1\7\1\132\7\7\1\133"+
    "\6\7\6\0\1\7\5\0\1\160\36\7\6\0\1\7"+
    "\5\0\4\7\1\161\17\7\1\162\12\7\6\0\1\7"+
    "\5\0\2\7\1\163\34\7\6\0\1\7\5\0\4\7"+
    "\1\164\32\7\6\0\1\7\5\0\1\7\1\165\35\7"+
    "\6\0\1\7\5\0\23\7\1\166\13\7\6\0\1\7"+
    "\5\0\21\7\1\167\7\7\1\167\5\7\6\0\1\7"+
    "\5\0\26\7\1\170\10\7\6\0\1\7\5\0\21\7"+
    "\1\171\7\7\1\171\5\7\6\0\1\7\5\0\24\7"+
    "\1\172\12\7\6\0\1\7\5\0\21\7\1\173\4\7"+
    "\1\174\2\7\1\173\5\7\6\0\1\7\5\0\14\7"+
    "\1\175\4\7\1\176\7\7\1\176\5\7\6\0\1\7"+
    "\5\0\3\7\1\177\10\7\1\200\3\7\1\201\16\7"+
    "\6\0\1\7\5\0\21\7\1\173\7\7\1\173\5\7"+
    "\6\0\1\7\5\0\13\7\1\202\23\7\6\0\1\7"+
    "\5\0\13\7\1\203\6\7\1\204\14\7\6\0\1\7"+
    "\5\0\12\7\1\205\1\206\23\7\6\0\1\7\5\0"+
    "\13\7\1\207\23\7\6\0\1\7\5\0\12\7\1\210"+
    "\24\7\6\0\1\7\5\0\20\7\1\211\1\212\7\7"+
    "\1\212\5\7\6\0\1\7\5\0\4\7\1\213\32\7"+
    "\6\0\1\7\5\0\12\7\1\214\3\7\1\215\20\7"+
    "\6\0\1\7\5\0\14\7\1\216\22\7\6\0\1\7"+
    "\5\0\4\7\1\217\10\7\1\220\21\7\6\0\1\7"+
    "\5\0\20\7\1\221\16\7\6\0\1\7\5\0\22\7"+
    "\1\222\14\7\6\0\1\7\5\0\3\7\1\223\10\7"+
    "\1\224\22\7\6\0\1\7\5\0\22\7\1\225\14\7"+
    "\6\0\1\7\5\0\12\7\1\226\24\7\6\0\1\7"+
    "\5\0\24\7\1\227\12\7\6\0\1\7\5\0\20\7"+
    "\1\230\16\7\6\0\1\7\5\0\1\231\36\7\6\0"+
    "\1\7\5\0\20\7\1\232\16\7\6\0\1\7\5\0"+
    "\1\233\3\7\1\65\32\7\6\0\1\7\5\0\15\7"+
    "\1\234\21\7\6\0\1\7\5\0\1\110\36\7\6\0"+
    "\1\7\5\0\4\7\1\235\32\7\6\0\1\7\5\0"+
    "\1\126\15\7\1\131\1\7\1\132\16\7\36\0\1\236"+
    "\56\0\1\237\15\0\1\50\6\0\1\41\15\0\1\44"+
    "\1\0\1\45\7\0\1\50\36\0\1\240\50\0\1\241"+
    "\56\0\1\242\54\0\1\243\32\0\1\244\44\0\1\7"+
    "\5\0\23\7\1\245\13\7\6\0\1\7\5\0\21\7"+
    "\1\246\7\7\1\246\5\7\5\0\1\247\1\7\5\0"+
    "\3\7\1\250\6\7\1\251\15\7\1\252\6\7\6\0"+
    "\1\7\5\0\7\7\1\253\27\7\6\0\1\7\5\0"+
    "\12\7\1\254\24\7\6\0\1\7\5\0\22\7\1\255"+
    "\14\7\6\0\1\7\5\0\2\7\1\256\17\7\1\257"+
    "\14\7\6\0\1\7\5\0\2\7\1\260\34\7\5\0"+
    "\1\261\1\7\5\0\3\7\1\262\6\7\1\263\15\7"+
    "\1\264\6\7\6\0\1\7\5\0\20\7\1\265\16\7"+
    "\6\0\1\7\5\0\7\7\1\266\27\7\6\0\1\7"+
    "\5\0\1\267\36\7\6\0\1\7\5\0\20\7\1\270"+
    "\16\7\6\0\1\7\5\0\12\7\1\271\24\7\6\0"+
    "\1\7\5\0\1\272\36\7\6\0\1\7\5\0\22\7"+
    "\1\273\14\7\6\0\1\7\5\0\21\7\1\274\7\7"+
    "\1\274\5\7\6\0\1\7\5\0\4\7\1\275\32\7"+
    "\5\0\1\276\1\7\5\0\7\7\1\277\20\7\1\300"+
    "\6\7\6\0\1\7\5\0\15\7\1\301\21\7\6\0"+
    "\1\7\5\0\15\7\1\302\21\7\5\0\1\303\1\7"+
    "\5\0\3\7\1\304\6\7\1\305\15\7\1\306\6\7"+
    "\6\0\1\7\5\0\4\7\1\307\10\7\1\307\21\7"+
    "\6\0\1\7\5\0\22\7\1\310\14\7\6\0\1\7"+
    "\5\0\4\7\1\311\32\7\6\0\1\7\5\0\4\7"+
    "\1\312\32\7\6\0\1\7\5\0\1\7\1\313\35\7"+
    "\6\0\1\7\5\0\1\170\36\7\6\0\1\7\5\0"+
    "\12\7\1\314\2\7\1\314\21\7\6\0\1\7\5\0"+
    "\1\7\1\315\2\7\1\316\32\7\6\0\1\7\5\0"+
    "\4\7\1\316\32\7\6\0\1\7\5\0\1\317\36\7"+
    "\6\0\1\7\5\0\2\7\1\320\34\7\6\0\1\7"+
    "\5\0\7\7\1\321\27\7\6\0\1\7\5\0\21\7"+
    "\1\322\7\7\1\322\5\7\6\0\1\7\5\0\4\7"+
    "\1\323\32\7\6\0\1\7\5\0\20\7\1\324\16\7"+
    "\6\0\1\7\5\0\5\7\1\325\31\7\6\0\1\7"+
    "\5\0\4\7\1\326\32\7\6\0\1\7\5\0\11\7"+
    "\1\327\25\7\6\0\1\7\5\0\4\7\1\330\32\7"+
    "\6\0\1\7\5\0\12\7\1\202\10\7\1\331\13\7"+
    "\6\0\1\7\5\0\1\332\14\7\1\147\21\7\6\0"+
    "\1\7\5\0\1\333\14\7\1\170\21\7\6\0\1\7"+
    "\5\0\23\7\1\331\13\7\6\0\1\7\5\0\4\7"+
    "\1\334\32\7\6\0\1\7\5\0\1\335\36\7\6\0"+
    "\1\7\5\0\3\7\1\336\33\7\6\0\1\7\5\0"+
    "\20\7\1\337\16\7\6\0\1\7\5\0\22\7\1\340"+
    "\14\7\6\0\1\7\5\0\26\7\1\157\10\7\6\0"+
    "\1\7\5\0\14\7\1\200\22\7\6\0\1\7\5\0"+
    "\16\7\1\215\20\7\23\0\1\341\65\0\1\342\30\0"+
    "\1\343\72\0\1\344\35\0\1\345\67\0\1\346\24\0"+
    "\1\7\5\0\21\7\1\347\7\7\1\347\5\7\6\0"+
    "\1\7\5\0\22\7\1\350\14\7\5\0\1\351\11\0"+
    "\1\352\6\0\1\353\15\0\1\351\14\0\1\7\5\0"+
    "\4\7\1\354\32\7\6\0\1\7\5\0\1\355\36\7"+
    "\5\0\1\351\1\7\5\0\3\7\1\250\6\7\1\251"+
    "\15\7\1\356\6\7\6\0\1\7\5\0\21\7\1\357"+
    "\7\7\1\357\5\7\6\0\1\7\5\0\1\360\36\7"+
    "\6\0\1\7\5\0\21\7\1\361\7\7\1\361\5\7"+
    "\6\0\1\7\5\0\7\7\1\362\27\7\6\0\1\7"+
    "\5\0\7\7\1\363\27\7\6\0\1\7\5\0\4\7"+
    "\1\364\32\7\5\0\1\365\11\0\1\366\6\0\1\367"+
    "\15\0\1\365\14\0\1\7\5\0\4\7\1\370\32\7"+
    "\6\0\1\7\5\0\1\371\36\7\5\0\1\365\1\7"+
    "\5\0\3\7\1\262\6\7\1\263\15\7\1\372\6\7"+
    "\6\0\1\7\5\0\5\7\1\373\31\7\6\0\1\7"+
    "\5\0\24\7\1\374\12\7\6\0\1\7\5\0\12\7"+
    "\1\375\24\7\6\0\1\7\5\0\26\7\1\376\10\7"+
    "\6\0\1\7\5\0\1\377\36\7\6\0\1\7\5\0"+
    "\12\7\1\u0100\24\7\6\0\1\7\5\0\20\7\1\u0101"+
    "\16\7\5\0\1\u0102\1\7\5\0\22\7\1\u0103\5\7"+
    "\1\u0104\6\7\6\0\1\7\5\0\14\7\1\u0105\22\7"+
    "\17\0\1\u0106\3\0\1\u0107\7\0\1\u0108\25\0\1\7"+
    "\5\0\5\7\1\u0109\31\7\6\0\1\7\5\0\7\7"+
    "\1\277\27\7\6\0\1\7\5\0\20\7\1\u010a\16\7"+
    "\6\0\1\7\5\0\20\7\1\u010b\1\u010c\7\7\1\u010d"+
    "\5\7\5\0\1\u010e\11\0\1\u010f\6\0\1\u0110\15\0"+
    "\1\u010e\14\0\1\7\5\0\4\7\1\u0111\32\7\6\0"+
    "\1\7\5\0\1\u0112\36\7\5\0\1\u010e\1\7\5\0"+
    "\3\7\1\304\6\7\1\305\15\7\1\u0113\6\7\6\0"+
    "\1\7\5\0\6\7\1\u0114\30\7\5\0\1\u0115\1\7"+
    "\5\0\22\7\1\u0116\5\7\1\u0117\6\7\6\0\1\7"+
    "\5\0\20\7\1\202\16\7\6\0\1\7\5\0\4\7"+
    "\1\u0118\32\7\6\0\1\7\5\0\20\7\1\u0119\16\7"+
    "\6\0\1\7\5\0\1\7\1\u011a\35\7\6\0\1\7"+
    "\5\0\4\7\1\u011b\32\7\6\0\1\7\5\0\2\7"+
    "\1\u011c\17\7\1\u011d\14\7\6\0\1\7\5\0\22\7"+
    "\1\u011e\14\7\6\0\1\7\5\0\1\u011f\36\7\6\0"+
    "\1\7\5\0\15\7\1\u0120\21\7\5\0\1\u0121\1\7"+
    "\5\0\14\7\1\u0122\13\7\1\u0123\6\7\6\0\1\7"+
    "\5\0\2\7\1\u0124\34\7\6\0\1\7\5\0\4\7"+
    "\1\u0125\32\7\6\0\1\7\5\0\1\u0126\36\7\6\0"+
    "\1\7\5\0\12\7\1\u0127\24\7\6\0\1\7\5\0"+
    "\21\7\1\147\7\7\1\147\5\7\6\0\1\7\5\0"+
    "\12\7\1\u0128\24\7\6\0\1\7\5\0\14\7\1\u0129"+
    "\22\7\6\0\1\7\5\0\2\7\1\u012a\34\7\5\0"+
    "\1\u012b\1\7\5\0\16\7\1\u012c\2\7\1\u012d\6\7"+
    "\1\u012e\1\u012d\5\7\6\0\1\7\5\0\7\7\1\u012f"+
    "\27\7\35\0\1\u0130\7\0\1\u0130\27\0\1\u0131\45\0"+
    "\1\u0132\66\0\1\u0133\26\0\1\u012b\24\0\1\u0134\2\0"+
    "\1\u0135\6\0\1\u012b\1\u0135\13\0\1\7\5\0\22\7"+
    "\1\u0136\14\7\6\0\1\7\5\0\7\7\1\u0137\27\7"+
    "\26\0\1\353\44\0\1\u0138\46\0\1\u0139\43\0\1\351"+
    "\1\7\5\0\12\7\1\251\15\7\1\356\6\7\6\0"+
    "\1\7\5\0\14\7\1\u013a\22\7\6\0\1\7\5\0"+
    "\12\7\1\251\24\7\6\0\1\7\5\0\22\7\1\u013b"+
    "\14\7\6\0\1\7\5\0\1\7\1\u013c\35\7\5\0"+
    "\1\u013d\1\7\5\0\13\7\1\u013e\2\7\1\u013f\11\7"+
    "\1\u0140\6\7\6\0\1\7\5\0\15\7\1\u0141\17\7"+
    "\1\u0141\1\7\6\0\1\7\5\0\3\7\1\u0142\33\7"+
    "\6\0\1\7\5\0\1\u0143\36\7\26\0\1\367\44\0"+
    "\1\u0144\46\0\1\u0145\43\0\1\365\1\7\5\0\12\7"+
    "\1\263\15\7\1\372\6\7\6\0\1\7\5\0\14\7"+
    "\1\u0146\22\7\6\0\1\7\5\0\12\7\1\263\24\7"+
    "\6\0\1\7\5\0\7\7\1\u0147\16\7\1\u0148\10\7"+
    "\6\0\1\7\5\0\4\7\1\u0149\32\7\6\0\1\7"+
    "\5\0\1\307\36\7\6\0\1\7\5\0\22\7\1\u014a"+
    "\14\7\6\0\1\7\5\0\3\7\1\u014b\33\7\5\0"+
    "\1\u014c\1\7\5\0\37\7\6\0\1\7\5\0\23\7"+
    "\1\u014d\13\7\5\0\1\u014e\12\0\1\u014f\15\0\1\u0150"+
    "\5\0\1\u014e\14\0\1\7\5\0\6\7\1\u0151\30\7"+
    "\5\0\1\u014e\1\7\5\0\22\7\1\u0103\14\7\6\0"+
    "\1\7\5\0\4\7\1\u0152\32\7\20\0\1\u0153\53\0"+
    "\1\u0154\70\0\1\u0106\21\0\1\7\5\0\23\7\1\u0155"+
    "\13\7\5\0\1\u0156\1\7\5\0\4\7\1\u0157\2\7"+
    "\1\u0158\20\7\1\u0159\6\7\5\0\1\u015a\1\7\5\0"+
    "\4\7\1\u015b\2\7\1\u015c\20\7\1\u015d\6\7\5\0"+
    "\1\u015e\1\7\5\0\7\7\1\u015f\20\7\1\u0160\6\7"+
    "\5\0\1\u0161\1\7\5\0\7\7\1\u0162\20\7\1\u0163"+
    "\6\7\26\0\1\u0110\44\0\1\u0164\46\0\1\u0165\43\0"+
    "\1\u010e\1\7\5\0\12\7\1\305\15\7\1\u0113\6\7"+
    "\6\0\1\7\5\0\14\7\1\u0166\22\7\6\0\1\7"+
    "\5\0\12\7\1\305\24\7\5\0\1\u0167\12\0\1\u0168"+
    "\15\0\1\u0169\5\0\1\u0167\14\0\1\7\5\0\6\7"+
    "\1\u016a\30\7\5\0\1\u0167\1\7\5\0\22\7\1\u0116"+
    "\14\7\6\0\1\7\5\0\20\7\1\u016b\16\7\6\0"+
    "\1\7\5\0\15\7\1\u016c\21\7\6\0\1\7\5\0"+
    "\20\7\1\u016d\16\7\6\0\1\7\5\0\14\7\1\u016e"+
    "\22\7\6\0\1\7\5\0\7\7\1\u016f\27\7\6\0"+
    "\1\7\5\0\7\7\1\u0170\27\7\6\0\1\7\5\0"+
    "\15\7\1\u016b\21\7\6\0\1\7\5\0\21\7\1\u0171"+
    "\7\7\1\u0171\5\7\6\0\1\7\5\0\3\7\1\u0172"+
    "\33\7\30\0\1\u0173\30\0\1\7\5\0\1\104\36\7"+
    "\6\0\1\7\5\0\14\7\1\u0122\22\7\6\0\1\7"+
    "\5\0\6\7\1\u0174\30\7\6\0\1\7\5\0\14\7"+
    "\1\u0175\22\7\6\0\1\7\5\0\13\7\1\u0176\23\7"+
    "\6\0\1\7\5\0\15\7\1\312\21\7\6\0\1\7"+
    "\5\0\7\7\1\u0177\27\7\6\0\1\7\5\0\2\7"+
    "\1\u0178\34\7\6\0\1\7\5\0\7\7\1\u0179\27\7"+
    "\32\0\1\u0134\26\0\1\7\5\0\4\7\1\u017a\32\7"+
    "\5\0\1\u012b\1\7\5\0\16\7\1\u012c\11\7\1\u012e"+
    "\6\7\6\0\1\7\5\0\16\7\1\u012c\20\7\6\0"+
    "\1\7\5\0\21\7\1\u017b\7\7\1\u017b\5\7\36\0"+
    "\1\u017c\50\0\1\u017d\35\0\1\u017e\53\0\1\u017f\37\0"+
    "\1\u012b\24\0\1\u0134\11\0\1\u012b\14\0\1\7\5\0"+
    "\7\7\1\u0180\27\7\6\0\1\7\5\0\2\7\1\u0181"+
    "\34\7\5\0\1\351\20\0\1\353\15\0\1\351\36\0"+
    "\1\u0182\30\0\1\7\5\0\27\7\1\u0183\7\7\5\0"+
    "\1\u0184\1\7\5\0\1\u0185\1\7\1\u0186\25\7\1\u0187"+
    "\6\7\6\0\1\7\5\0\7\7\1\u0188\27\7\5\0"+
    "\1\u0189\21\0\1\u018a\2\0\1\u018b\11\0\1\u0189\14\0"+
    "\1\7\5\0\7\7\1\u018c\27\7\6\0\1\7\5\0"+
    "\4\7\1\u018d\10\7\1\u018e\21\7\5\0\1\u0189\1\7"+
    "\5\0\13\7\1\u013e\2\7\1\u013f\11\7\1\u018f\6\7"+
    "\6\0\1\7\5\0\14\7\1\312\22\7\6\0\1\7"+
    "\5\0\1\u0190\36\7\6\0\1\7\5\0\1\7\1\u0191"+
    "\35\7\5\0\1\365\20\0\1\367\15\0\1\365\36\0"+
    "\1\u0192\30\0\1\7\5\0\27\7\1\u0193\7\7\6\0"+
    "\1\7\5\0\1\u0148\36\7\6\0\1\7\5\0\2\7"+
    "\1\u0194\34\7\6\0\1\7\5\0\6\7\1\u0195\30\7"+
    "\6\0\1\7\5\0\23\7\1\u0196\13\7\14\0\1\13"+
    "\44\0\1\7\5\0\13\7\1\u0197\23\7\20\0\1\u014f"+
    "\65\0\1\u0198\41\0\1\u0199\36\0\1\7\5\0\1\u019a"+
    "\36\7\6\0\1\7\5\0\21\7\1\u019b\7\7\1\u019b"+
    "\5\7\37\0\1\u019c\21\0\1\7\5\0\1\u019d\36\7"+
    "\14\0\1\u0153\6\0\1\u019e\7\0\1\u0108\25\0\1\7"+
    "\5\0\21\7\1\u019f\7\7\1\u019f\5\7\6\0\1\7"+
    "\5\0\5\7\1\u01a0\31\7\6\0\1\7\5\0\7\7"+
    "\1\u0158\27\7\14\0\1\u01a1\6\0\1\u01a2\7\0\1\u01a3"+
    "\25\0\1\7\5\0\21\7\1\u01a4\7\7\1\u01a4\5\7"+
    "\6\0\1\7\5\0\5\7\1\u01a5\31\7\6\0\1\7"+
    "\5\0\7\7\1\u015c\27\7\17\0\1\u01a6\3\0\1\u01a7"+
    "\7\0\1\u01a3\25\0\1\7\5\0\5\7\1\u01a8\31\7"+
    "\6\0\1\7\5\0\7\7\1\u015f\27\7\17\0\1\u01a6"+
    "\3\0\1\u01a9\7\0\1\u01a3\25\0\1\7\5\0\5\7"+
    "\1\u01aa\31\7\6\0\1\7\5\0\7\7\1\u0162\27\7"+
    "\5\0\1\u010e\20\0\1\u0110\15\0\1\u010e\36\0\1\u01ab"+
    "\30\0\1\7\5\0\27\7\1\u01ac\7\7\20\0\1\u0168"+
    "\65\0\1\u01ad\41\0\1\u01ae\36\0\1\7\5\0\1\u01af"+
    "\36\7\5\0\1\u01b0\1\7\5\0\1\126\2\7\1\u01b1"+
    "\14\7\1\132\7\7\1\u01b2\6\7\6\0\1\7\5\0"+
    "\1\u01b3\36\7\6\0\1\7\5\0\22\7\1\u01b4\14\7"+
    "\6\0\1\7\5\0\15\7\1\u01b5\17\7\1\u01b5\1\7"+
    "\6\0\1\7\5\0\15\7\1\u01b5\6\7\1\u01b6\12\7"+
    "\6\0\1\7\5\0\4\7\1\u01b7\32\7\6\0\1\7"+
    "\5\0\23\7\1\u01b8\13\7\14\0\1\u01b9\44\0\1\7"+
    "\5\0\7\7\1\u01ba\27\7\5\0\1\u01bb\1\7\5\0"+
    "\25\7\1\35\2\7\1\u01bc\6\7\6\0\1\7\5\0"+
    "\21\7\1\u01bd\7\7\1\u01bd\5\7\6\0\1\7\5\0"+
    "\3\7\1\u01be\33\7\6\0\1\7\5\0\4\7\1\u01bf"+
    "\2\7\1\u01c0\27\7\6\0\1\7\5\0\3\7\1\u01c1"+
    "\33\7\6\0\1\7\5\0\20\7\1\u01c2\16\7\6\0"+
    "\1\7\5\0\22\7\1\u01c3\14\7\14\0\1\u01c4\52\0"+
    "\1\u01c5\75\0\1\u01c6\47\0\1\u01c7\24\0\1\7\5\0"+
    "\2\7\1\u01c8\34\7\6\0\1\7\5\0\7\7\1\u01c9"+
    "\27\7\43\0\1\u01ca\15\0\1\7\5\0\1\u01cb\36\7"+
    "\16\0\1\u01cc\42\0\1\7\5\0\21\7\1\u01cd\7\7"+
    "\1\u01cd\5\7\6\0\1\7\5\0\15\7\1\u01ce\21\7"+
    "\6\0\1\7\5\0\2\7\1\u0186\34\7\6\0\1\7"+
    "\5\0\12\7\1\u01cf\24\7\27\0\1\u018a\46\0\1\u01d0"+
    "\47\0\1\u01d1\10\0\1\u01d2\27\0\1\7\5\0\14\7"+
    "\1\u01d3\22\7\6\0\1\7\5\0\20\7\1\u01d4\16\7"+
    "\6\0\1\7\5\0\20\7\1\u01d5\16\7\6\0\1\7"+
    "\5\0\13\7\1\u013e\23\7\6\0\1\7\5\0\3\7"+
    "\1\u01d6\33\7\6\0\1\7\5\0\7\7\1\u01d7\27\7"+
    "\43\0\1\u01d8\15\0\1\7\5\0\1\u01d9\36\7\6\0"+
    "\1\7\5\0\7\7\1\u01da\27\7\6\0\1\7\5\0"+
    "\7\7\1\u01db\27\7\6\0\1\7\5\0\20\7\1\u01dc"+
    "\16\7\6\0\1\7\5\0\4\7\1\u01dd\32\7\37\0"+
    "\1\u01de\27\0\1\u01df\44\0\1\7\5\0\14\7\1\u01e0"+
    "\22\7\6\0\1\7\5\0\21\7\1\u01e1\7\7\1\u01e1"+
    "\5\7\14\0\1\u01e2\44\0\1\7\5\0\12\7\1\u01e3"+
    "\24\7\21\0\1\u01e4\36\0\1\u0156\1\7\5\0\7\7"+
    "\1\u0158\20\7\1\u0159\6\7\6\0\1\7\5\0\23\7"+
    "\1\u01e5\13\7\21\0\1\u01e6\70\0\1\u01a6\20\0\1\u015a"+
    "\1\7\5\0\7\7\1\u015c\20\7\1\u015d\6\7\6\0"+
    "\1\7\5\0\23\7\1\u01e7\13\7\20\0\1\u01a1\53\0"+
    "\1\u01e8\37\0\1\7\5\0\23\7\1\u01e9\13\7\21\0"+
    "\1\u01ea\37\0\1\7\5\0\23\7\1\u01eb\13\7\43\0"+
    "\1\u01ec\15\0\1\7\5\0\1\u01ed\36\7\37\0\1\u01ee"+
    "\27\0\1\u01ef\44\0\1\7\5\0\14\7\1\u01f0\22\7"+
    "\5\0\1\u01f1\6\0\1\41\2\0\1\u01f2\14\0\1\45"+
    "\7\0\1\u01f1\14\0\1\7\5\0\4\7\1\u01f3\32\7"+
    "\5\0\1\u01f1\1\7\5\0\1\126\2\7\1\u01b1\14\7"+
    "\1\132\7\7\1\u01f4\6\7\6\0\1\7\5\0\21\7"+
    "\1\u01f5\7\7\1\u01f5\5\7\6\0\1\7\5\0\1\u01f6"+
    "\36\7\6\0\1\7\5\0\14\7\1\u016b\22\7\6\0"+
    "\1\7\5\0\4\7\1\u01f7\2\7\1\u01f8\27\7\6\0"+
    "\1\7\5\0\3\7\1\u01f9\33\7\6\0\1\7\5\0"+
    "\2\7\1\u01fa\34\7\27\0\1\u01fb\31\0\1\7\5\0"+
    "\14\7\1\u01fc\22\7\41\0\1\46\17\0\1\7\5\0"+
    "\25\7\1\35\11\7\6\0\1\7\5\0\1\u01fd\36\7"+
    "\6\0\1\7\5\0\1\u01bf\36\7\6\0\1\7\5\0"+
    "\1\u01fe\36\7\6\0\1\7\5\0\2\7\1\u01ff\34\7"+
    "\6\0\1\7\5\0\1\u0200\36\7\35\0\1\u0201\7\0"+
    "\1\u0201\42\0\1\u0202\7\0\1\u0202\23\0\1\u0203\52\0"+
    "\1\u0204\42\0\1\7\5\0\14\7\1\u0205\22\7\6\0"+
    "\1\7\5\0\3\7\1\u0206\33\7\14\0\1\u0207\44\0"+
    "\1\7\5\0\13\7\1\u0208\23\7\31\0\1\u0209\27\0"+
    "\1\7\5\0\23\7\1\u020a\13\7\6\0\1\7\5\0"+
    "\7\7\1\u020b\27\7\30\0\1\u020c\56\0\1\u020d\52\0"+
    "\1\u020e\24\0\1\7\5\0\23\7\1\u020f\13\7\5\0"+
    "\1\u0210\1\7\5\0\13\7\1\u0211\14\7\1\u0212\6\7"+
    "\5\0\1\u0213\1\7\5\0\13\7\1\u0214\14\7\1\u0215"+
    "\6\7\6\0\1\7\5\0\12\7\1\u0216\24\7\14\0"+
    "\1\u0217\44\0\1\7\5\0\13\7\1\u0218\23\7\6\0"+
    "\1\7\5\0\13\7\1\u0219\23\7\6\0\1\7\5\0"+
    "\14\7\1\u021a\22\7\6\0\1\7\5\0\7\7\1\u021b"+
    "\27\7\6\0\1\7\5\0\14\7\1\u021c\22\7\14\0"+
    "\1\u021d\66\0\1\u021e\27\0\1\u014e\1\7\5\0\37\7"+
    "\26\0\1\u021f\31\0\1\u0220\1\7\5\0\37\7\37\0"+
    "\1\u0221\21\0\1\7\5\0\1\u0222\36\7\37\0\1\u0223"+
    "\21\0\1\7\5\0\1\u0224\36\7\37\0\1\u0225\21\0"+
    "\1\7\5\0\1\u0226\36\7\37\0\1\u0227\21\0\1\7"+
    "\5\0\1\u0228\36\7\14\0\1\u0229\44\0\1\7\5\0"+
    "\13\7\1\u022a\23\7\14\0\1\u022b\66\0\1\u022c\27\0"+
    "\1\u0167\1\7\5\0\37\7\14\0\1\41\17\0\1\45"+
    "\36\0\1\u022d\37\0\1\u01f1\1\7\5\0\1\126\17\7"+
    "\1\132\7\7\1\u01f4\6\7\6\0\1\7\5\0\1\126"+
    "\17\7\1\132\16\7\5\0\1\u022e\1\7\5\0\6\7"+
    "\1\u022f\21\7\1\u0230\6\7\6\0\1\7\5\0\10\7"+
    "\1\u0231\26\7\6\0\1\7\5\0\14\7\1\u0232\22\7"+
    "\6\0\1\7\5\0\3\7\1\u0233\16\7\1\u0234\14\7"+
    "\5\0\1\u0235\1\7\5\0\3\7\1\u0236\7\7\1\130"+
    "\12\7\1\36\1\7\1\u0237\6\7\6\0\1\7\5\0"+
    "\2\7\1\u0238\34\7\20\0\1\u0239\40\0\1\7\5\0"+
    "\4\7\1\u023a\32\7\6\0\1\7\5\0\3\7\1\170"+
    "\33\7\6\0\1\7\5\0\3\7\1\u01e1\33\7\6\0"+
    "\1\7\5\0\4\7\1\u023b\32\7\5\0\1\u022e\14\0"+
    "\1\u023c\21\0\1\u022e\24\0\1\u023d\54\0\1\u023e\40\0"+
    "\1\7\5\0\4\7\1\u023f\32\7\6\0\1\7\5\0"+
    "\1\u0240\36\7\27\0\1\u0241\31\0\1\7\5\0\7\7"+
    "\1\u0242\27\7\37\0\1\u0243\21\0\1\7\5\0\14\7"+
    "\1\u0244\22\7\6\0\1\7\5\0\3\7\1\u0245\33\7"+
    "\37\0\1\u0246\20\0\1\u0210\21\0\1\u0247\14\0\1\u0210"+
    "\13\0\1\u0213\21\0\1\u0248\14\0\1\u0213\14\0\1\7"+
    "\5\0\22\7\1\u0249\14\7\27\0\1\u0247\31\0\1\7"+
    "\5\0\7\7\1\u024a\27\7\6\0\1\7\5\0\13\7"+
    "\1\u0211\23\7\27\0\1\u0248\31\0\1\7\5\0\7\7"+
    "\1\u024b\27\7\6\0\1\7\5\0\13\7\1\u0214\23\7"+
    "\6\0\1\7\5\0\7\7\1\u024c\27\7\27\0\1\u024d"+
    "\31\0\1\7\5\0\7\7\1\u024e\27\7\6\0\1\7"+
    "\5\0\7\7\1\u024f\27\7\6\0\1\7\5\0\5\7"+
    "\1\147\31\7\6\0\1\7\5\0\1\u0250\36\7\6\0"+
    "\1\7\5\0\22\7\1\u0251\14\7\26\0\1\52\31\0"+
    "\1\u014e\12\0\1\u014f\23\0\1\u014e\13\0\1\u0220\6\0"+
    "\1\53\16\0\1\u0252\10\0\1\u0220\22\0\1\53\16\0"+
    "\1\u0252\33\0\1\u0253\44\0\1\7\5\0\12\7\1\u0254"+
    "\24\7\14\0\1\u0255\44\0\1\7\5\0\12\7\1\u0256"+
    "\24\7\14\0\1\u0257\44\0\1\7\5\0\12\7\1\u0258"+
    "\24\7\14\0\1\u0259\44\0\1\7\5\0\12\7\1\u025a"+
    "\24\7\27\0\1\u025b\31\0\1\7\5\0\7\7\1\u025c"+
    "\27\7\26\0\1\53\31\0\1\u0167\12\0\1\u0168\23\0"+
    "\1\u0167\13\0\1\u01f1\6\0\1\41\17\0\1\45\7\0"+
    "\1\u01f1\30\0\1\u023c\36\0\1\7\5\0\1\u025d\36\7"+
    "\6\0\1\7\5\0\6\7\1\u022f\30\7\6\0\1\7"+
    "\5\0\4\7\1\u025e\32\7\6\0\1\7\5\0\4\7"+
    "\1\u025f\32\7\6\0\1\7\5\0\1\u0260\36\7\6\0"+
    "\1\7\5\0\26\7\1\u01bf\10\7\17\0\1\u0261\7\0"+
    "\1\43\12\0\1\47\16\0\1\7\5\0\1\233\36\7"+
    "\6\0\1\7\5\0\3\7\1\u0236\7\7\1\130\12\7"+
    "\1\36\10\7\6\0\1\7\5\0\7\7\1\u0262\27\7"+
    "\6\0\1\7\5\0\21\7\1\u0263\7\7\1\u0263\5\7"+
    "\6\0\1\7\5\0\14\7\1\u0264\22\7\14\0\1\u0265"+
    "\61\0\1\u0266\57\0\1\u0267\30\0\1\7\5\0\21\7"+
    "\1\u0268\7\7\1\u0268\5\7\6\0\1\7\5\0\3\7"+
    "\1\u0269\33\7\23\0\1\u026a\35\0\1\7\5\0\4\7"+
    "\1\u026b\32\7\30\0\1\u026c\30\0\1\7\5\0\22\7"+
    "\1\u01cd\14\7\6\0\1\7\5\0\1\u026d\36\7\36\0"+
    "\1\u026e\37\0\1\u026f\52\0\1\u0270\35\0\1\7\5\0"+
    "\4\7\1\154\10\7\1\154\21\7\6\0\1\7\5\0"+
    "\14\7\1\u0271\22\7\6\0\1\7\5\0\14\7\1\u0272"+
    "\22\7\6\0\1\7\5\0\22\7\1\u0273\14\7\23\0"+
    "\1\u0274\35\0\1\7\5\0\4\7\1\u0275\32\7\6\0"+
    "\1\7\5\0\4\7\1\u0276\32\7\6\0\1\7\5\0"+
    "\1\u0277\36\7\37\0\1\u0278\41\0\1\u0279\31\0\1\u0220"+
    "\1\7\5\0\4\7\1\u027a\32\7\26\0\1\u027b\31\0"+
    "\1\u027c\1\7\5\0\4\7\1\u027d\32\7\26\0\1\u027e"+
    "\31\0\1\u027c\1\7\5\0\37\7\26\0\1\u027f\31\0"+
    "\1\u0280\1\7\5\0\37\7\23\0\1\u0281\35\0\1\7"+
    "\5\0\4\7\1\u0282\32\7\6\0\1\7\5\0\1\7"+
    "\1\u0283\35\7\5\0\1\u0284\1\7\5\0\3\7\1\u0285"+
    "\12\7\1\131\11\7\1\u0286\6\7\6\0\1\7\5\0"+
    "\21\7\1\u0287\7\7\1\u0287\5\7\6\0\1\7\5\0"+
    "\3\7\1\u01bf\33\7\14\0\1\135\44\0\1\7\5\0"+
    "\15\7\1\u0288\21\7\6\0\1\7\5\0\21\7\1\u0250"+
    "\7\7\1\u0250\5\7\6\0\1\7\5\0\22\7\1\u0289"+
    "\14\7\15\0\1\u028a\66\0\1\u028b\57\0\1\u028c\22\0"+
    "\1\7\5\0\21\7\1\u0269\7\7\1\u0269\5\7\20\0"+
    "\1\u028d\40\0\1\7\5\0\14\7\1\u028e\22\7\36\0"+
    "\1\u0201\22\0\1\7\5\0\3\7\1\u028f\33\7\20\0"+
    "\1\u0290\10\0\1\u0290\51\0\1\u0291\52\0\1\u0292\30\0"+
    "\1\7\5\0\23\7\1\u0293\13\7\6\0\1\7\5\0"+
    "\23\7\1\u0294\13\7\6\0\1\7\5\0\26\7\1\u028f"+
    "\10\7\20\0\1\u0295\40\0\1\7\5\0\14\7\1\u0296"+
    "\22\7\6\0\1\7\5\0\14\7\1\u0297\22\7\6\0"+
    "\1\7\5\0\12\7\1\u0298\24\7\20\0\1\53\37\0"+
    "\1\u0220\6\0\1\53\3\0\1\u0299\12\0\1\u0252\10\0"+
    "\1\u0220\14\0\1\7\5\0\21\7\1\u01e3\7\7\1\u01e3"+
    "\5\7\5\0\1\u027c\6\0\1\52\3\0\1\u029a\12\0"+
    "\1\u029b\10\0\1\u027c\22\0\1\52\16\0\1\u029b\25\0"+
    "\1\7\5\0\21\7\1\u0258\7\7\1\u0258\5\7\5\0"+
    "\1\u027c\6\0\1\52\16\0\1\u029b\10\0\1\u027c\13\0"+
    "\1\u0280\6\0\1\52\27\0\1\u0280\22\0\1\52\56\0"+
    "\1\u029c\40\0\1\7\5\0\14\7\1\u029d\22\7\6\0"+
    "\1\7\5\0\12\7\1\u029e\24\7\5\0\1\u029f\11\0"+
    "\1\u02a0\12\0\1\44\11\0\1\u029f\14\0\1\7\5\0"+
    "\4\7\1\u02a1\32\7\5\0\1\u029f\1\7\5\0\3\7"+
    "\1\u0285\12\7\1\131\11\7\1\u02a2\6\7\6\0\1\7"+
    "\5\0\21\7\1\u01bf\7\7\1\u01bf\5\7\6\0\1\7"+
    "\5\0\14\7\1\u02a3\22\7\6\0\1\7\5\0\1\u02a4"+
    "\36\7\26\0\1\u02a5\54\0\1\u02a6\36\0\1\u02a7\66\0"+
    "\1\u02a8\30\0\1\7\5\0\22\7\1\u02a9\14\7\37\0"+
    "\1\u02aa\52\0\1\u02ab\21\0\1\7\5\0\22\7\1\u02ac"+
    "\14\7\6\0\1\7\5\0\22\7\1\u02ad\14\7\30\0"+
    "\1\u02ae\30\0\1\7\5\0\22\7\1\u02af\14\7\6\0"+
    "\1\7\5\0\22\7\1\u02b0\14\7\6\0\1\7\5\0"+
    "\7\7\1\u02b1\4\7\1\u02b2\22\7\35\0\1\u021f\7\0"+
    "\1\u021f\42\0\1\u027e\7\0\1\u027e\44\0\1\u02b3\43\0"+
    "\1\u02b4\30\0\1\7\5\0\22\7\1\u02b5\14\7\6\0"+
    "\1\7\5\0\1\u02b6\36\7\32\0\1\44\40\0\1\u02b7"+
    "\37\0\1\u029f\1\7\5\0\16\7\1\131\11\7\1\u02a2"+
    "\6\7\6\0\1\7\5\0\16\7\1\131\20\7\6\0"+
    "\1\7\5\0\4\7\1\u0176\32\7\6\0\1\7\5\0"+
    "\5\7\1\u02b8\31\7\14\0\1\u02b9\56\0\1\u02ba\53\0"+
    "\1\u02bb\67\0\1\u02bc\22\0\1\7\5\0\15\7\1\337"+
    "\21\7\36\0\1\u02bd\52\0\1\u02be\22\0\1\7\5\0"+
    "\4\7\1\154\32\7\6\0\1\7\5\0\15\7\1\154"+
    "\21\7\36\0\1\u02bf\22\0\1\7\5\0\15\7\1\157"+
    "\21\7\6\0\1\7\5\0\15\7\1\u01e1\21\7\6\0"+
    "\1\7\5\0\3\7\1\u02c0\33\7\6\0\1\7\5\0"+
    "\4\7\1\u02c1\32\7\20\0\1\52\70\0\1\u02c2\22\0"+
    "\1\7\5\0\15\7\1\u0114\21\7\6\0\1\7\5\0"+
    "\3\7\1\u02c3\33\7\5\0\1\u029f\24\0\1\44\11\0"+
    "\1\u029f\14\0\1\7\5\0\4\7\1\u0250\32\7\17\0"+
    "\1\u02c4\70\0\1\u02c5\7\0\1\u02c5\25\0\1\u02c6\63\0"+
    "\1\346\41\0\1\u0290\63\0\1\u0290\52\0\1\237\27\0"+
    "\1\7\5\0\1\u02c7\36\7\6\0\1\7\5\0\21\7"+
    "\1\u02c8\7\7\1\u02c8\5\7\31\0\1\u0131\27\0\1\7"+
    "\5\0\1\u0263\36\7\14\0\1\u02c9\44\0\1\7\5\0"+
    "\3\7\1\u02ca\33\7\6\0\1\7\5\0\21\7\1\u02ca"+
    "\7\7\1\u02ca\5\7\35\0\1\u02c6\7\0\1\u02c6\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[29154];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\6\1\1\11\25\1\11\0"+
    "\2\11\60\1\10\0\1\11\71\1\1\0\1\11\5\0"+
    "\74\1\4\0\1\1\1\11\3\1\2\0\12\1\2\0"+
    "\16\1\3\0\6\1\2\0\20\1\1\0\16\1\1\0"+
    "\1\11\3\0\4\1\1\0\13\1\1\0\10\1\3\0"+
    "\2\1\1\11\1\0\20\1\1\0\1\1\3\0\11\1"+
    "\1\0\10\1\4\0\2\1\1\0\1\1\1\0\5\1"+
    "\2\0\6\1\1\0\5\1\2\0\2\1\1\0\1\1"+
    "\1\0\2\1\1\11\2\0\2\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\0\10\1\1\0"+
    "\1\1\1\0\10\1\4\0\2\1\1\0\1\1\1\0"+
    "\3\1\3\0\5\1\1\0\5\1\2\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\2\0\10\1\1\0"+
    "\5\1\1\11\1\1\2\0\2\1\1\0\1\1\1\0"+
    "\2\1\1\0\12\1\1\0\5\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\7\1\1\0\3\1\1\11"+
    "\2\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0"+
    "\4\1\1\0\4\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\5\1\1\0\3\1\3\0"+
    "\2\1\1\0\1\1\1\0\1\1\3\0\3\1\1\0"+
    "\3\1\1\0\10\1\1\0\2\1\1\0\5\1\4\0"+
    "\2\1\1\11\2\0\2\1\1\0\3\1\4\0\2\1"+
    "\2\0\4\1\4\0\1\1\2\0\2\1\1\0\4\1"+
    "\2\0\2\1\1\0\1\1\7\0\2\1\1\0\1\1"+
    "\1\0\2\11\2\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[714];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

//------> User code in java syntax

    public static LinkedList<TError> LexicalErrorTable = new LinkedList<TError>();

    // newline function declaracion
    private void newline() {
        yyline++;
        yycolumn = 1;
    }

    public LinkedList getTable(){
      return LexicalErrorTable;
    }

    public LinkedList clearTable(){
      LexicalErrorTable.clear();
      return LexicalErrorTable;
    }

    public String strg;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer2(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Lexical Error: " + yytext() + ", line: " + yyline + ", column: " + yycolumn);
    TError data = new TError(yytext(), yyline, yycolumn, "Lexical Error", "Symbol does not exist in the language");
    LexicalErrorTable.add(data);

    // Switch to a different state to ignore characters until the end of the line
    yybegin(YYINITIAL);
            }
          // fall through
          case 31: break;
          case 2:
            { /* Ignore white spaces and line breaks */
            }
          // fall through
          case 32: break;
          case 3:
            { /* Ignore other text*/
            }
          // fall through
          case 33: break;
          case 4:
            { return new Symbol(Sym.NUM, yyline, yycolumn, yytext());
            }
          // fall through
          case 34: break;
          case 5:
            { return new Symbol(Sym.LESS_THAN, yyline, yycolumn, yytext());
            }
          // fall through
          case 35: break;
          case 6:
            { return new Symbol(Sym.EQUALS, yyline, yycolumn, yytext());
            }
          // fall through
          case 36: break;
          case 7:
            { return new Symbol(Sym.MORE_THAN, yyline, yycolumn, yytext());
            }
          // fall through
          case 37: break;
          case 8:
            { return new Symbol(Sym.LESS_THAN_EQUAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 38: break;
          case 9:
            { return new Symbol(Sym.MORE_THAN_EQUAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 39: break;
          case 10:
            { return new Symbol(Sym.STRING, yyline, yycolumn, yytext().substring(1, yytext().length() - 1));
            }
          // fall through
          case 40: break;
          case 11:
            { return new Symbol(Sym.ALL, yyline, yycolumn, yytext());
            }
          // fall through
          case 41: break;
          case 12:
            { return new Symbol(Sym.RELEASED_YEAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 42: break;
          case 13:
            { return new Symbol(Sym.BPM, yyline, yycolumn, yytext());
            }
          // fall through
          case 43: break;
          case 14:
            { return new Symbol(Sym.RELEASED_DAY, yyline, yycolumn, yytext());
            }
          // fall through
          case 44: break;
          case 15:
            { return new Symbol(Sym.KEY, yyline, yycolumn, yytext());
            }
          // fall through
          case 45: break;
          case 16:
            { return new Symbol(Sym.RELEASED_MONTH, yyline, yycolumn, yytext());
            }
          // fall through
          case 46: break;
          case 17:
            { return new Symbol(Sym.MODE, yyline, yycolumn, yytext());
            }
          // fall through
          case 47: break;
          case 18:
            { return new Symbol(Sym.SONG_NAME, yyline, yycolumn, yytext());
            }
          // fall through
          case 48: break;
          case 19:
            { return new Symbol(Sym.NULL, yyline, yycolumn, yytext());
            }
          // fall through
          case 49: break;
          case 20:
            { return new Symbol(Sym.SPEECHINESS, yyline, yycolumn, yytext());
            }
          // fall through
          case 50: break;
          case 21:
            { return new Symbol(Sym.ARTIST, yyline, yycolumn, yytext());
            }
          // fall through
          case 51: break;
          case 22:
            { return new Symbol(Sym.ENERGY, yyline, yycolumn, yytext());
            }
          // fall through
          case 52: break;
          case 23:
            { return new Symbol(Sym.NUMBER, yyline, yycolumn, yytext());
            }
          // fall through
          case 53: break;
          case 24:
            { return new Symbol(Sym.STREAMS, yyline, yycolumn, yytext());
            }
          // fall through
          case 54: break;
          case 25:
            { return new Symbol(Sym.VALENCE, yyline, yycolumn, yytext());
            }
          // fall through
          case 55: break;
          case 26:
            { return new Symbol(Sym.ARTIST_COUNT, yyline, yycolumn, yytext());
            }
          // fall through
          case 56: break;
          case 27:
            { return new Symbol(Sym.LIVENESS, yyline, yycolumn, yytext());
            }
          // fall through
          case 57: break;
          case 28:
            { return new Symbol(Sym.ACOUSTICNESS, yyline, yycolumn, yytext());
            }
          // fall through
          case 58: break;
          case 29:
            { return new Symbol(Sym.DANCEABILITY, yyline, yycolumn, yytext());
            }
          // fall through
          case 59: break;
          case 30:
            { return new Symbol(Sym.INSTRUMENTALNESS, yyline, yycolumn, yytext());
            }
          // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
