// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer2.jflex

/*--------------------1. User Code--------------------*/
//------> Packages and imports
package com.ucjc.generated;

import java_cup.runtime.*;
import java.util.LinkedList;
import com.ucjc.utils.*;

/*--------------------2. Options and declarations--------------------*/

@SuppressWarnings("fallthrough")
public class Lexer2 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     5,  6,  7,  6,  0,  6,  6,  6,  6,  6,  6,  0,  6,  6,  0,  6, 
     8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  6,  6,  9, 10, 11,  6, 
     6, 12, 13, 14, 15, 16,  6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
    26, 27, 28, 29, 30, 31, 32, 33,  6, 34, 35,  6,  6,  6,  0, 36, 
     0, 12, 13, 14, 15, 16,  6, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
    26, 27, 28, 37, 30, 31, 32, 33,  6, 34, 35,  6,  0,  6,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  6,  0,  0,  0,  0,  0,  6,  0,  0,  6,  6,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  6,  6,  6,  0,  0,  6,  6,  0,  0,  0,  6, 
     6, 38,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 39,  6,  6, 
     6, 40,  6, 41,  6,  6,  6,  0,  6,  6, 42,  6,  6,  6,  6,  6, 
     6, 38,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 39,  6,  6, 
     6, 40,  6, 41,  6,  6,  6,  0,  6,  6, 42,  6,  6,  6,  6,  6
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\4\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\23\3\1\2\11\0\1\10\1\11\61\3\10\0"+
    "\1\12\2\3\1\13\1\14\2\3\1\15\3\3\2\16"+
    "\7\3\1\17\5\3\1\20\37\3\1\0\1\16\5\0"+
    "\2\3\1\14\2\3\1\14\6\3\1\16\2\3\1\16"+
    "\11\3\1\7\4\3\1\20\2\3\1\20\1\21\2\3"+
    "\1\22\1\3\1\23\11\3\1\22\10\3\1\24\1\14"+
    "\1\3\4\0\1\24\1\14\2\3\1\14\2\0\1\14"+
    "\1\3\1\14\6\3\1\16\2\0\1\16\1\3\1\16"+
    "\4\3\1\24\2\3\1\5\3\3\3\0\5\3\1\20"+
    "\2\0\1\20\1\3\2\20\1\7\14\3\1\0\11\3"+
    "\1\24\1\3\2\24\1\3\1\0\1\20\3\0\1\24"+
    "\2\3\1\14\1\0\1\3\1\25\1\3\1\26\3\3"+
    "\1\16\1\0\2\3\1\27\3\3\1\6\1\3\3\0"+
    "\2\3\1\7\1\0\1\3\1\7\3\3\1\5\3\3"+
    "\1\5\2\3\1\5\2\3\1\20\1\0\1\3\3\0"+
    "\1\3\2\30\6\3\1\0\10\3\4\0\2\3\1\0"+
    "\1\3\1\0\1\25\5\3\1\0\5\3\2\0\2\3"+
    "\1\0\1\3\1\0\2\3\1\5\2\0\2\3\2\0"+
    "\1\3\1\0\1\3\1\0\1\3\2\0\1\3\1\0"+
    "\10\3\1\0\1\3\1\0\1\3\1\31\1\3\1\32"+
    "\4\3\4\0\2\3\1\0\1\3\1\0\1\33\4\3"+
    "\1\0\5\3\2\0\1\3\1\34\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\2\0\1\3\2\0\2\3\1\24\5\3\1\0"+
    "\5\3\1\33\1\24\2\0\2\3\1\0\1\3\1\0"+
    "\3\3\1\0\5\3\1\0\1\5\2\11\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\7\1\0\1\24\1\3\1\24\3\3\1\0"+
    "\3\3\1\22\2\3\3\0\2\3\1\0\1\3\1\0"+
    "\3\3\1\0\2\3\1\24\1\3\2\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\5\3\1\0"+
    "\3\3\3\0\1\3\1\35\1\0\1\3\1\0\2\3"+
    "\1\0\3\3\1\0\1\11\1\3\2\10\1\3\3\10"+
    "\1\0\2\3\1\0\5\3\4\0\1\3\1\36\1\0"+
    "\3\3\4\0\2\3\2\0\4\3\4\0\1\3\1\0"+
    "\4\3\2\0\2\3\1\0\1\3\5\0\2\3\1\0"+
    "\1\3\1\0\1\31\1\24\2\3\1\0\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[668];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\53\0\201\0\254\0\327\0\u0102"+
    "\0\u012d\0\u0158\0\53\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387"+
    "\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df"+
    "\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637"+
    "\0\u0662\0\53\0\53\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739"+
    "\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891"+
    "\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9"+
    "\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41"+
    "\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99"+
    "\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1"+
    "\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49"+
    "\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\53\0\u1020\0\u104b\0\327"+
    "\0\u1076\0\u10a1\0\u10cc\0\327\0\u10f7\0\u1122\0\u114d\0\327"+
    "\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5"+
    "\0\327\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2"+
    "\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a"+
    "\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682"+
    "\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da"+
    "\0\u1805\0\u1830\0\u185b\0\u1886\0\u18b1\0\u18dc\0\u1907\0\53"+
    "\0\u1932\0\u195d\0\u1988\0\u19b3\0\u19de\0\u1a09\0\u1a34\0\u1a5f"+
    "\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7"+
    "\0\u1be2\0\u1c0d\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f"+
    "\0\u1d3a\0\u1d65\0\u1d90\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1e67"+
    "\0\u1e92\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\u1f94\0\327"+
    "\0\u1fbf\0\u1fea\0\327\0\u2015\0\327\0\u2040\0\u206b\0\u2096"+
    "\0\u20c1\0\u20ec\0\u2117\0\u2142\0\u216d\0\u2198\0\u21c3\0\u21ee"+
    "\0\u2219\0\u2244\0\u226f\0\u229a\0\u22c5\0\u22f0\0\u231b\0\u2346"+
    "\0\327\0\u2371\0\u239c\0\u23c7\0\u23f2\0\u241d\0\u2448\0\53"+
    "\0\u2473\0\u249e\0\u24c9\0\u24f4\0\u251f\0\u254a\0\u2575\0\u25a0"+
    "\0\u25cb\0\u25f6\0\u2621\0\u264c\0\u2677\0\u26a2\0\u26cd\0\u26f8"+
    "\0\u2723\0\u274e\0\u2779\0\u27a4\0\u27cf\0\u27fa\0\u2825\0\u2850"+
    "\0\u287b\0\u28a6\0\u28d1\0\u28fc\0\u2927\0\u2952\0\u297d\0\u29a8"+
    "\0\u29d3\0\u29fe\0\u2a29\0\u2a54\0\u2a7f\0\u2aaa\0\u2ad5\0\u2b00"+
    "\0\u2b2b\0\u2b56\0\u2b81\0\u2bac\0\u2bd7\0\327\0\u2c02\0\u2c2d"+
    "\0\u2c58\0\u2c83\0\u2cae\0\u2cd9\0\u2d04\0\u2d2f\0\u2d5a\0\u2d85"+
    "\0\u2db0\0\u2ddb\0\u2e06\0\u2e31\0\u2e5c\0\u2e87\0\u2eb2\0\u2edd"+
    "\0\u2f08\0\u2f33\0\u2f5e\0\u2f89\0\u2fb4\0\u2fdf\0\u300a\0\u3035"+
    "\0\u3060\0\u308b\0\u30b6\0\53\0\u30e1\0\u310c\0\u3137\0\u3162"+
    "\0\u318d\0\u31b8\0\u31e3\0\u320e\0\u3239\0\u3264\0\u328f\0\327"+
    "\0\u32ba\0\u32e5\0\u3310\0\u333b\0\u3366\0\u3391\0\u33bc\0\327"+
    "\0\u33e7\0\u3412\0\u343d\0\u3468\0\u3493\0\u34be\0\u34e9\0\u3514"+
    "\0\u353f\0\u356a\0\53\0\u3595\0\u35c0\0\u35eb\0\u3616\0\u3641"+
    "\0\u366c\0\u3697\0\u36c2\0\u36ed\0\u3718\0\u3743\0\u376e\0\u3799"+
    "\0\u37c4\0\u37ef\0\u381a\0\u3845\0\u3870\0\u389b\0\u38c6\0\u38f1"+
    "\0\u391c\0\u3947\0\327\0\u3972\0\u399d\0\u39c8\0\u39f3\0\u3a1e"+
    "\0\u3a49\0\u3a74\0\u3a9f\0\u3aca\0\u3af5\0\u3b20\0\u3b4b\0\u3b76"+
    "\0\u3ba1\0\u3bcc\0\u3bf7\0\u3c22\0\u3c4d\0\u3c78\0\u3ca3\0\u3cce"+
    "\0\u3cf9\0\u3d24\0\u3d4f\0\u3d7a\0\u3da5\0\u3dd0\0\u3dfb\0\u3e26"+
    "\0\u3e51\0\u3e7c\0\u3ea7\0\u3ed2\0\u3efd\0\u3f28\0\u3f53\0\u3f7e"+
    "\0\u3fa9\0\u3fd4\0\u3fff\0\u402a\0\u4055\0\u4080\0\u40ab\0\u40d6"+
    "\0\u4101\0\53\0\u412c\0\u4157\0\u4182\0\u41ad\0\u41d8\0\u4203"+
    "\0\u422e\0\u4259\0\u4284\0\u42af\0\u42da\0\u4305\0\u4330\0\u435b"+
    "\0\u4386\0\u43b1\0\u43dc\0\u4407\0\u4432\0\u445d\0\u4488\0\u44b3"+
    "\0\u44de\0\u4509\0\u4534\0\u455f\0\u458a\0\327\0\u45b5\0\327"+
    "\0\u45e0\0\u460b\0\u4636\0\u4661\0\u468c\0\u46b7\0\u46e2\0\u470d"+
    "\0\u4738\0\u4763\0\u478e\0\u47b9\0\u47e4\0\327\0\u480f\0\u483a"+
    "\0\u3972\0\u4865\0\u4890\0\u48bb\0\u48e6\0\u4911\0\u493c\0\u4967"+
    "\0\u4992\0\u49bd\0\u49e8\0\327\0\u4a13\0\u4a3e\0\u4a69\0\u4a94"+
    "\0\u4abf\0\u4aea\0\u4b15\0\u4b40\0\u4b6b\0\u4b96\0\u4bc1\0\u4bec"+
    "\0\u4c17\0\u4c42\0\u4c6d\0\u4c98\0\u4cc3\0\u4cee\0\u4d19\0\u4d44"+
    "\0\u4d6f\0\u4d9a\0\u4dc5\0\u4df0\0\u4e1b\0\u4e46\0\u4e71\0\u4e9c"+
    "\0\u4ec7\0\u4ef2\0\u3da5\0\53\0\u4f1d\0\u4f48\0\u4f73\0\u4f9e"+
    "\0\u4fc9\0\u4ff4\0\u501f\0\u504a\0\u5075\0\u50a0\0\u50cb\0\u50f6"+
    "\0\u5121\0\u514c\0\u5177\0\u51a2\0\u51cd\0\u51f8\0\u5223\0\u524e"+
    "\0\u5279\0\u52a4\0\u52cf\0\u52fa\0\u5325\0\u5350\0\u537b\0\u53a6"+
    "\0\u53d1\0\u53fc\0\u5427\0\u5452\0\u547d\0\u54a8\0\u54d3\0\u54fe"+
    "\0\u5529\0\u5554\0\u557f\0\u55aa\0\u55d5\0\u5600\0\u562b\0\u5656"+
    "\0\53\0\u5681\0\u56ac\0\u56d7\0\u5702\0\u572d\0\u5758\0\u5783"+
    "\0\u57ae\0\u57d9\0\u5804\0\u582f\0\u585a\0\u5885\0\u58b0\0\u58db"+
    "\0\u5906\0\327\0\u5931\0\u595c\0\u5987\0\u59b2\0\u59dd\0\u5a08"+
    "\0\u5a33\0\u5a5e\0\u5a89\0\u5ab4\0\u5adf\0\u5b0a\0\u5b35\0\u5b60"+
    "\0\u5b8b\0\u5bb6\0\u5be1\0\u5c0c\0\u5c37\0\u5c62\0\u5c8d\0\u5cb8"+
    "\0\u5ce3\0\u5d0e\0\327\0\u5d39\0\u5d64\0\u5d8f\0\u5dba\0\u5de5"+
    "\0\u5e10\0\u5e3b\0\u5e66\0\u5e91\0\u5ebc\0\u5ee7\0\u5f12\0\u5f3d"+
    "\0\u5f68\0\u5f93\0\u5fbe\0\u5fe9\0\u6014\0\u603f\0\u606a\0\u6095"+
    "\0\u60c0\0\u60eb\0\u6116\0\u6141\0\u616c\0\u6197\0\u61c2\0\u61ed"+
    "\0\u6218\0\u6243\0\u626e\0\327\0\u6299\0\u62c4\0\u62ef\0\u631a"+
    "\0\u6345\0\u6370\0\u639b\0\u63c6\0\u63f1\0\u641c\0\u6447\0\u6472"+
    "\0\u649d\0\u64c8\0\u64f3\0\u651e\0\u6549\0\u6574\0\u659f\0\u65ca"+
    "\0\u65f5\0\u6620\0\u664b\0\u6676\0\u66a1\0\u66cc\0\u66f7\0\u6722"+
    "\0\u674d\0\u6778\0\u67a3\0\u67ce\0\u67f9\0\u6824\0\u684f\0\u687a"+
    "\0\u68a5\0\u68d0\0\u68fb\0\u6926\0\u6951\0\u697c\0\53\0\53"+
    "\0\u69a7\0\u69d2\0\u69fd\0\327";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[668];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\7\1\22\1\23\1\7\1\24\1\25\1\26"+
    "\1\27\1\7\1\30\1\7\1\31\1\32\1\33\1\7"+
    "\1\34\1\35\1\36\1\7\1\37\1\32\5\7\54\0"+
    "\1\3\3\0\1\3\47\0\1\4\51\0\1\3\3\0"+
    "\1\40\6\0\1\41\2\0\1\42\7\0\1\43\2\0"+
    "\1\44\1\0\1\45\4\0\1\46\1\47\1\0\1\50"+
    "\14\0\1\7\5\0\37\7\7\51\1\0\43\51\10\0"+
    "\1\11\54\0\1\52\52\0\1\53\46\0\1\7\5\0"+
    "\2\7\1\54\7\7\1\55\1\7\1\56\3\7\1\57"+
    "\13\7\1\56\2\7\6\0\1\7\5\0\1\60\15\7"+
    "\1\61\4\7\1\62\13\7\6\0\1\7\5\0\1\63"+
    "\36\7\6\0\1\7\5\0\1\64\3\7\1\65\2\7"+
    "\1\66\23\7\1\66\3\7\6\0\1\7\5\0\14\7"+
    "\1\67\4\7\1\70\2\7\1\71\4\7\1\70\5\7"+
    "\6\0\1\7\5\0\1\72\36\7\6\0\1\7\5\0"+
    "\5\7\1\73\6\7\1\74\22\7\6\0\1\7\5\0"+
    "\4\7\1\75\32\7\6\0\1\7\5\0\4\7\1\76"+
    "\2\7\1\77\27\7\6\0\1\7\5\0\1\100\3\7"+
    "\1\101\10\7\1\102\14\7\1\103\4\7\6\0\1\7"+
    "\5\0\1\104\14\7\1\105\5\7\1\106\12\7\1\107"+
    "\6\0\1\7\5\0\1\110\14\7\1\111\5\7\1\112"+
    "\13\7\6\0\1\7\5\0\4\7\1\113\32\7\6\0"+
    "\1\7\5\0\4\7\1\114\10\7\1\115\1\116\3\7"+
    "\1\117\14\7\6\0\1\7\5\0\7\7\1\120\5\7"+
    "\1\121\15\7\1\122\3\7\6\0\1\7\5\0\1\123"+
    "\6\7\1\124\27\7\6\0\1\7\5\0\15\7\1\125"+
    "\21\7\6\0\1\7\5\0\4\7\1\126\32\7\5\0"+
    "\1\50\1\7\5\0\1\127\2\7\1\130\7\7\1\131"+
    "\2\7\1\132\1\7\1\133\4\7\1\35\1\36\1\7"+
    "\1\134\6\7\1\0\1\3\3\0\1\3\6\0\1\41"+
    "\15\0\1\44\1\0\1\45\52\0\1\135\32\0\1\136"+
    "\3\0\1\137\63\0\1\140\35\0\1\141\56\0\1\142"+
    "\63\0\1\143\41\0\1\144\46\0\1\41\15\0\1\44"+
    "\1\0\1\45\16\0\7\51\1\145\43\51\6\0\1\7"+
    "\5\0\15\7\1\146\5\7\1\147\13\7\6\0\1\7"+
    "\5\0\12\7\1\150\24\7\6\0\1\7\5\0\15\7"+
    "\1\151\21\7\6\0\1\7\5\0\22\7\1\152\14\7"+
    "\6\0\1\7\5\0\7\7\1\153\27\7\6\0\1\7"+
    "\5\0\13\7\1\154\23\7\6\0\1\7\5\0\21\7"+
    "\1\155\7\7\1\155\5\7\6\0\1\7\5\0\14\7"+
    "\1\156\22\7\6\0\1\7\5\0\14\7\1\157\11\7"+
    "\1\160\10\7\5\0\1\50\1\7\5\0\1\127\15\7"+
    "\1\132\1\7\1\133\7\7\1\134\6\7\6\0\1\7"+
    "\5\0\1\161\36\7\6\0\1\7\5\0\4\7\1\162"+
    "\17\7\1\163\12\7\6\0\1\7\5\0\2\7\1\164"+
    "\34\7\6\0\1\7\5\0\4\7\1\165\32\7\6\0"+
    "\1\7\5\0\1\7\1\166\35\7\6\0\1\7\5\0"+
    "\23\7\1\167\13\7\6\0\1\7\5\0\21\7\1\170"+
    "\7\7\1\170\5\7\6\0\1\7\5\0\26\7\1\171"+
    "\10\7\6\0\1\7\5\0\21\7\1\172\7\7\1\172"+
    "\5\7\6\0\1\7\5\0\24\7\1\173\12\7\6\0"+
    "\1\7\5\0\21\7\1\174\4\7\1\175\2\7\1\174"+
    "\5\7\6\0\1\7\5\0\14\7\1\176\4\7\1\177"+
    "\7\7\1\177\5\7\6\0\1\7\5\0\3\7\1\200"+
    "\10\7\1\201\3\7\1\202\16\7\6\0\1\7\5\0"+
    "\21\7\1\174\7\7\1\174\5\7\6\0\1\7\5\0"+
    "\13\7\1\203\23\7\6\0\1\7\5\0\13\7\1\204"+
    "\23\7\6\0\1\7\5\0\12\7\1\205\1\206\23\7"+
    "\6\0\1\7\5\0\13\7\1\207\23\7\6\0\1\7"+
    "\5\0\12\7\1\210\24\7\6\0\1\7\5\0\20\7"+
    "\1\211\1\212\7\7\1\212\5\7\6\0\1\7\5\0"+
    "\4\7\1\213\32\7\6\0\1\7\5\0\12\7\1\214"+
    "\3\7\1\215\20\7\6\0\1\7\5\0\1\216\36\7"+
    "\6\0\1\7\5\0\14\7\1\217\22\7\6\0\1\7"+
    "\5\0\4\7\1\220\10\7\1\221\21\7\6\0\1\7"+
    "\5\0\20\7\1\222\16\7\6\0\1\7\5\0\22\7"+
    "\1\223\14\7\6\0\1\7\5\0\3\7\1\224\10\7"+
    "\1\225\22\7\6\0\1\7\5\0\22\7\1\226\14\7"+
    "\6\0\1\7\5\0\12\7\1\227\24\7\6\0\1\7"+
    "\5\0\24\7\1\230\12\7\6\0\1\7\5\0\20\7"+
    "\1\231\16\7\6\0\1\7\5\0\1\232\36\7\6\0"+
    "\1\7\5\0\20\7\1\233\16\7\6\0\1\7\5\0"+
    "\1\234\3\7\1\65\32\7\6\0\1\7\5\0\15\7"+
    "\1\235\21\7\6\0\1\7\5\0\1\110\36\7\6\0"+
    "\1\7\5\0\4\7\1\236\32\7\6\0\1\7\5\0"+
    "\1\127\15\7\1\132\1\7\1\133\16\7\36\0\1\237"+
    "\56\0\1\240\15\0\1\50\6\0\1\41\15\0\1\44"+
    "\1\0\1\45\7\0\1\50\36\0\1\241\50\0\1\242"+
    "\56\0\1\243\54\0\1\244\32\0\1\245\44\0\1\7"+
    "\5\0\23\7\1\246\13\7\6\0\1\7\5\0\21\7"+
    "\1\247\7\7\1\247\5\7\5\0\1\250\1\7\5\0"+
    "\3\7\1\251\6\7\1\252\15\7\1\253\6\7\6\0"+
    "\1\7\5\0\7\7\1\254\27\7\6\0\1\7\5\0"+
    "\12\7\1\255\24\7\6\0\1\7\5\0\2\7\1\256"+
    "\34\7\6\0\1\7\5\0\2\7\1\257\17\7\1\260"+
    "\14\7\6\0\1\7\5\0\2\7\1\261\34\7\5\0"+
    "\1\262\1\7\5\0\3\7\1\263\6\7\1\264\15\7"+
    "\1\265\6\7\6\0\1\7\5\0\20\7\1\266\16\7"+
    "\6\0\1\7\5\0\7\7\1\267\27\7\6\0\1\7"+
    "\5\0\1\270\36\7\6\0\1\7\5\0\20\7\1\271"+
    "\16\7\6\0\1\7\5\0\12\7\1\272\24\7\6\0"+
    "\1\7\5\0\1\273\36\7\6\0\1\7\5\0\22\7"+
    "\1\274\14\7\6\0\1\7\5\0\21\7\1\275\7\7"+
    "\1\275\5\7\6\0\1\7\5\0\4\7\1\276\32\7"+
    "\5\0\1\277\1\7\5\0\7\7\1\300\20\7\1\301"+
    "\6\7\6\0\1\7\5\0\15\7\1\302\21\7\6\0"+
    "\1\7\5\0\15\7\1\303\21\7\5\0\1\304\1\7"+
    "\5\0\3\7\1\305\6\7\1\306\15\7\1\307\6\7"+
    "\6\0\1\7\5\0\4\7\1\310\10\7\1\310\21\7"+
    "\6\0\1\7\5\0\22\7\1\311\14\7\6\0\1\7"+
    "\5\0\4\7\1\312\32\7\6\0\1\7\5\0\4\7"+
    "\1\313\32\7\6\0\1\7\5\0\1\7\1\314\35\7"+
    "\6\0\1\7\5\0\12\7\1\315\2\7\1\315\21\7"+
    "\6\0\1\7\5\0\1\7\1\316\2\7\1\317\32\7"+
    "\6\0\1\7\5\0\4\7\1\317\32\7\6\0\1\7"+
    "\5\0\1\320\36\7\6\0\1\7\5\0\2\7\1\321"+
    "\34\7\6\0\1\7\5\0\7\7\1\322\27\7\6\0"+
    "\1\7\5\0\21\7\1\323\7\7\1\323\5\7\6\0"+
    "\1\7\5\0\4\7\1\324\32\7\6\0\1\7\5\0"+
    "\20\7\1\325\16\7\6\0\1\7\5\0\20\7\1\326"+
    "\16\7\6\0\1\7\5\0\5\7\1\327\31\7\6\0"+
    "\1\7\5\0\4\7\1\330\32\7\6\0\1\7\5\0"+
    "\11\7\1\331\25\7\6\0\1\7\5\0\4\7\1\332"+
    "\32\7\6\0\1\7\5\0\12\7\1\203\10\7\1\333"+
    "\13\7\6\0\1\7\5\0\1\334\14\7\1\150\21\7"+
    "\6\0\1\7\5\0\1\335\14\7\1\171\21\7\6\0"+
    "\1\7\5\0\23\7\1\333\13\7\6\0\1\7\5\0"+
    "\4\7\1\336\32\7\6\0\1\7\5\0\1\337\36\7"+
    "\6\0\1\7\5\0\3\7\1\340\33\7\6\0\1\7"+
    "\5\0\20\7\1\341\16\7\6\0\1\7\5\0\22\7"+
    "\1\342\14\7\6\0\1\7\5\0\26\7\1\160\10\7"+
    "\6\0\1\7\5\0\14\7\1\201\22\7\6\0\1\7"+
    "\5\0\16\7\1\215\20\7\23\0\1\343\65\0\1\344"+
    "\30\0\1\345\72\0\1\346\35\0\1\347\67\0\1\350"+
    "\24\0\1\7\5\0\21\7\1\351\7\7\1\351\5\7"+
    "\6\0\1\7\5\0\22\7\1\352\14\7\5\0\1\353"+
    "\11\0\1\354\6\0\1\355\15\0\1\353\14\0\1\7"+
    "\5\0\4\7\1\356\32\7\6\0\1\7\5\0\1\357"+
    "\36\7\5\0\1\353\1\7\5\0\3\7\1\251\6\7"+
    "\1\252\15\7\1\360\6\7\6\0\1\7\5\0\21\7"+
    "\1\361\7\7\1\361\5\7\6\0\1\7\5\0\1\362"+
    "\36\7\6\0\1\7\5\0\1\363\36\7\6\0\1\7"+
    "\5\0\7\7\1\364\27\7\6\0\1\7\5\0\7\7"+
    "\1\365\27\7\6\0\1\7\5\0\4\7\1\366\32\7"+
    "\5\0\1\367\11\0\1\370\6\0\1\371\15\0\1\367"+
    "\14\0\1\7\5\0\4\7\1\372\32\7\6\0\1\7"+
    "\5\0\1\373\36\7\5\0\1\367\1\7\5\0\3\7"+
    "\1\263\6\7\1\264\15\7\1\374\6\7\6\0\1\7"+
    "\5\0\5\7\1\375\31\7\6\0\1\7\5\0\24\7"+
    "\1\376\12\7\6\0\1\7\5\0\12\7\1\377\24\7"+
    "\6\0\1\7\5\0\26\7\1\u0100\10\7\6\0\1\7"+
    "\5\0\1\u0101\36\7\6\0\1\7\5\0\12\7\1\u0102"+
    "\24\7\6\0\1\7\5\0\20\7\1\u0103\16\7\5\0"+
    "\1\u0104\1\7\5\0\22\7\1\u0105\5\7\1\u0106\6\7"+
    "\6\0\1\7\5\0\14\7\1\u0107\22\7\17\0\1\u0108"+
    "\3\0\1\u0109\7\0\1\u010a\25\0\1\7\5\0\5\7"+
    "\1\u010b\31\7\6\0\1\7\5\0\7\7\1\300\27\7"+
    "\6\0\1\7\5\0\20\7\1\u010c\16\7\6\0\1\7"+
    "\5\0\20\7\1\u010d\1\u010e\7\7\1\u010f\5\7\5\0"+
    "\1\u0110\11\0\1\u0111\6\0\1\u0112\15\0\1\u0110\14\0"+
    "\1\7\5\0\4\7\1\u0113\32\7\6\0\1\7\5\0"+
    "\1\u0114\36\7\5\0\1\u0110\1\7\5\0\3\7\1\305"+
    "\6\7\1\306\15\7\1\u0115\6\7\6\0\1\7\5\0"+
    "\6\7\1\u0116\30\7\5\0\1\u0117\1\7\5\0\22\7"+
    "\1\u0118\5\7\1\u0119\6\7\6\0\1\7\5\0\20\7"+
    "\1\203\16\7\6\0\1\7\5\0\4\7\1\u011a\32\7"+
    "\6\0\1\7\5\0\20\7\1\u011b\16\7\6\0\1\7"+
    "\5\0\1\7\1\u011c\35\7\6\0\1\7\5\0\4\7"+
    "\1\u011d\32\7\6\0\1\7\5\0\2\7\1\u011e\17\7"+
    "\1\u011f\14\7\6\0\1\7\5\0\22\7\1\u0120\14\7"+
    "\6\0\1\7\5\0\1\u0121\36\7\6\0\1\7\5\0"+
    "\15\7\1\u0122\21\7\6\0\1\7\5\0\2\7\1\u0123"+
    "\34\7\5\0\1\u0124\1\7\5\0\14\7\1\u0125\13\7"+
    "\1\u0126\6\7\6\0\1\7\5\0\2\7\1\u0127\34\7"+
    "\6\0\1\7\5\0\4\7\1\u0128\32\7\6\0\1\7"+
    "\5\0\1\u0129\36\7\6\0\1\7\5\0\12\7\1\u012a"+
    "\24\7\6\0\1\7\5\0\21\7\1\150\7\7\1\150"+
    "\5\7\6\0\1\7\5\0\12\7\1\u012b\24\7\6\0"+
    "\1\7\5\0\14\7\1\u012c\22\7\6\0\1\7\5\0"+
    "\2\7\1\u012d\34\7\5\0\1\u012e\1\7\5\0\16\7"+
    "\1\u012f\2\7\1\u0130\6\7\1\u0131\1\u0130\5\7\6\0"+
    "\1\7\5\0\7\7\1\u0132\27\7\35\0\1\u0133\7\0"+
    "\1\u0133\27\0\1\u0134\45\0\1\u0135\66\0\1\u0136\26\0"+
    "\1\u012e\24\0\1\u0137\2\0\1\u0138\6\0\1\u012e\1\u0138"+
    "\13\0\1\7\5\0\22\7\1\u0139\14\7\6\0\1\7"+
    "\5\0\7\7\1\u013a\27\7\26\0\1\355\44\0\1\u013b"+
    "\46\0\1\u013c\43\0\1\353\1\7\5\0\12\7\1\252"+
    "\15\7\1\360\6\7\6\0\1\7\5\0\14\7\1\u013d"+
    "\22\7\6\0\1\7\5\0\12\7\1\252\24\7\6\0"+
    "\1\7\5\0\22\7\1\u013e\14\7\6\0\1\7\5\0"+
    "\1\7\1\u013f\35\7\6\0\1\7\5\0\20\7\1\u0140"+
    "\16\7\6\0\1\7\5\0\15\7\1\u0141\17\7\1\u0141"+
    "\1\7\6\0\1\7\5\0\3\7\1\u0142\33\7\6\0"+
    "\1\7\5\0\1\u0143\36\7\26\0\1\371\44\0\1\u0144"+
    "\46\0\1\u0145\43\0\1\367\1\7\5\0\12\7\1\264"+
    "\15\7\1\374\6\7\6\0\1\7\5\0\14\7\1\u0146"+
    "\22\7\6\0\1\7\5\0\12\7\1\264\24\7\6\0"+
    "\1\7\5\0\7\7\1\u0147\16\7\1\u0148\10\7\6\0"+
    "\1\7\5\0\4\7\1\u0149\32\7\6\0\1\7\5\0"+
    "\1\310\36\7\6\0\1\7\5\0\22\7\1\u014a\14\7"+
    "\6\0\1\7\5\0\3\7\1\u014b\33\7\5\0\1\u014c"+
    "\1\7\5\0\37\7\6\0\1\7\5\0\23\7\1\u014d"+
    "\13\7\5\0\1\u014e\12\0\1\u014f\15\0\1\u0150\5\0"+
    "\1\u014e\14\0\1\7\5\0\6\7\1\u0151\30\7\5\0"+
    "\1\u014e\1\7\5\0\22\7\1\u0105\14\7\6\0\1\7"+
    "\5\0\4\7\1\u0152\32\7\20\0\1\u0153\53\0\1\u0154"+
    "\70\0\1\u0108\21\0\1\7\5\0\23\7\1\u0155\13\7"+
    "\5\0\1\u0156\1\7\5\0\4\7\1\u0157\2\7\1\u0158"+
    "\20\7\1\u0159\6\7\5\0\1\u015a\1\7\5\0\4\7"+
    "\1\u015b\2\7\1\u015c\20\7\1\u015d\6\7\5\0\1\u015e"+
    "\1\7\5\0\7\7\1\u015f\20\7\1\u0160\6\7\5\0"+
    "\1\u0161\1\7\5\0\7\7\1\u0162\20\7\1\u0163\6\7"+
    "\26\0\1\u0112\44\0\1\u0164\46\0\1\u0165\43\0\1\u0110"+
    "\1\7\5\0\12\7\1\306\15\7\1\u0115\6\7\6\0"+
    "\1\7\5\0\14\7\1\u0166\22\7\6\0\1\7\5\0"+
    "\12\7\1\306\24\7\5\0\1\u0167\12\0\1\u0168\15\0"+
    "\1\u0169\5\0\1\u0167\14\0\1\7\5\0\6\7\1\u016a"+
    "\30\7\5\0\1\u0167\1\7\5\0\22\7\1\u0118\14\7"+
    "\6\0\1\7\5\0\20\7\1\u016b\16\7\6\0\1\7"+
    "\5\0\15\7\1\u016c\21\7\6\0\1\7\5\0\20\7"+
    "\1\u016d\16\7\6\0\1\7\5\0\14\7\1\u016e\22\7"+
    "\6\0\1\7\5\0\7\7\1\u016f\27\7\6\0\1\7"+
    "\5\0\7\7\1\u0170\27\7\6\0\1\7\5\0\15\7"+
    "\1\u016b\21\7\6\0\1\7\5\0\21\7\1\u0171\7\7"+
    "\1\u0171\5\7\6\0\1\7\5\0\3\7\1\u0172\33\7"+
    "\6\0\1\7\5\0\6\7\1\u0140\30\7\30\0\1\u0173"+
    "\30\0\1\7\5\0\1\104\36\7\6\0\1\7\5\0"+
    "\14\7\1\u0125\22\7\6\0\1\7\5\0\6\7\1\u0174"+
    "\30\7\6\0\1\7\5\0\14\7\1\u0175\22\7\6\0"+
    "\1\7\5\0\13\7\1\u0176\23\7\6\0\1\7\5\0"+
    "\15\7\1\313\21\7\6\0\1\7\5\0\7\7\1\u0177"+
    "\27\7\6\0\1\7\5\0\2\7\1\u0178\34\7\6\0"+
    "\1\7\5\0\7\7\1\u0179\27\7\32\0\1\u0137\26\0"+
    "\1\7\5\0\4\7\1\u017a\32\7\5\0\1\u012e\1\7"+
    "\5\0\16\7\1\u012f\11\7\1\u0131\6\7\6\0\1\7"+
    "\5\0\16\7\1\u012f\20\7\6\0\1\7\5\0\21\7"+
    "\1\u017b\7\7\1\u017b\5\7\36\0\1\u017c\50\0\1\u017d"+
    "\35\0\1\u017e\53\0\1\u017f\37\0\1\u012e\24\0\1\u0137"+
    "\11\0\1\u012e\14\0\1\7\5\0\7\7\1\u0180\27\7"+
    "\6\0\1\7\5\0\2\7\1\u0181\34\7\5\0\1\353"+
    "\20\0\1\355\15\0\1\353\36\0\1\u0182\30\0\1\7"+
    "\5\0\27\7\1\u0183\7\7\5\0\1\u0184\1\7\5\0"+
    "\1\u0185\1\7\1\u0186\25\7\1\u0187\6\7\6\0\1\7"+
    "\5\0\7\7\1\u0188\27\7\6\0\1\7\5\0\14\7"+
    "\1\313\22\7\6\0\1\7\5\0\1\u0189\36\7\6\0"+
    "\1\7\5\0\1\7\1\u018a\35\7\5\0\1\367\20\0"+
    "\1\371\15\0\1\367\36\0\1\u018b\30\0\1\7\5\0"+
    "\27\7\1\u018c\7\7\6\0\1\7\5\0\1\u0148\36\7"+
    "\6\0\1\7\5\0\2\7\1\u018d\34\7\6\0\1\7"+
    "\5\0\6\7\1\u018e\30\7\6\0\1\7\5\0\23\7"+
    "\1\u018f\13\7\14\0\1\13\44\0\1\7\5\0\13\7"+
    "\1\u0190\23\7\20\0\1\u014f\65\0\1\u0191\41\0\1\u0192"+
    "\36\0\1\7\5\0\1\u0193\36\7\6\0\1\7\5\0"+
    "\21\7\1\u0194\7\7\1\u0194\5\7\37\0\1\u0195\21\0"+
    "\1\7\5\0\1\u0196\36\7\14\0\1\u0153\6\0\1\u0197"+
    "\7\0\1\u010a\25\0\1\7\5\0\21\7\1\u0198\7\7"+
    "\1\u0198\5\7\6\0\1\7\5\0\5\7\1\u0199\31\7"+
    "\6\0\1\7\5\0\7\7\1\u0158\27\7\14\0\1\u019a"+
    "\6\0\1\u019b\7\0\1\u019c\25\0\1\7\5\0\21\7"+
    "\1\u019d\7\7\1\u019d\5\7\6\0\1\7\5\0\5\7"+
    "\1\u019e\31\7\6\0\1\7\5\0\7\7\1\u015c\27\7"+
    "\17\0\1\u019f\3\0\1\u01a0\7\0\1\u019c\25\0\1\7"+
    "\5\0\5\7\1\u01a1\31\7\6\0\1\7\5\0\7\7"+
    "\1\u015f\27\7\17\0\1\u019f\3\0\1\u01a2\7\0\1\u019c"+
    "\25\0\1\7\5\0\5\7\1\u01a3\31\7\6\0\1\7"+
    "\5\0\7\7\1\u0162\27\7\5\0\1\u0110\20\0\1\u0112"+
    "\15\0\1\u0110\36\0\1\u01a4\30\0\1\7\5\0\27\7"+
    "\1\u01a5\7\7\20\0\1\u0168\65\0\1\u01a6\41\0\1\u01a7"+
    "\36\0\1\7\5\0\1\u01a8\36\7\5\0\1\u01a9\1\7"+
    "\5\0\1\127\2\7\1\u01aa\14\7\1\133\7\7\1\u01ab"+
    "\6\7\6\0\1\7\5\0\1\u01ac\36\7\6\0\1\7"+
    "\5\0\22\7\1\u01ad\14\7\6\0\1\7\5\0\15\7"+
    "\1\u01ae\17\7\1\u01ae\1\7\6\0\1\7\5\0\15\7"+
    "\1\u01ae\6\7\1\u01af\12\7\6\0\1\7\5\0\4\7"+
    "\1\u01b0\32\7\6\0\1\7\5\0\23\7\1\u01b1\13\7"+
    "\14\0\1\u01b2\44\0\1\7\5\0\7\7\1\u01b3\27\7"+
    "\5\0\1\u01b4\1\7\5\0\25\7\1\35\2\7\1\u01b5"+
    "\6\7\6\0\1\7\5\0\21\7\1\u01b6\7\7\1\u01b6"+
    "\5\7\6\0\1\7\5\0\3\7\1\u01b7\33\7\6\0"+
    "\1\7\5\0\4\7\1\u01b8\2\7\1\u01b9\27\7\6\0"+
    "\1\7\5\0\3\7\1\u01ba\33\7\6\0\1\7\5\0"+
    "\20\7\1\u01bb\16\7\6\0\1\7\5\0\22\7\1\u01bc"+
    "\14\7\14\0\1\u01bd\52\0\1\u01be\75\0\1\u01bf\47\0"+
    "\1\u01c0\24\0\1\7\5\0\2\7\1\u01c1\34\7\6\0"+
    "\1\7\5\0\7\7\1\u01c2\27\7\43\0\1\u01c3\15\0"+
    "\1\7\5\0\1\u01c4\36\7\16\0\1\u01c5\42\0\1\7"+
    "\5\0\21\7\1\u01c6\7\7\1\u01c6\5\7\6\0\1\7"+
    "\5\0\15\7\1\u01c7\21\7\6\0\1\7\5\0\2\7"+
    "\1\u0186\34\7\6\0\1\7\5\0\12\7\1\u01c8\24\7"+
    "\6\0\1\7\5\0\3\7\1\u01c9\33\7\6\0\1\7"+
    "\5\0\7\7\1\u01ca\27\7\43\0\1\u01cb\15\0\1\7"+
    "\5\0\1\u01cc\36\7\6\0\1\7\5\0\7\7\1\u01cd"+
    "\27\7\6\0\1\7\5\0\7\7\1\u01ce\27\7\6\0"+
    "\1\7\5\0\20\7\1\u01cf\16\7\6\0\1\7\5\0"+
    "\4\7\1\u01d0\32\7\37\0\1\u01d1\27\0\1\u01d2\44\0"+
    "\1\7\5\0\14\7\1\u01d3\22\7\6\0\1\7\5\0"+
    "\21\7\1\u01d4\7\7\1\u01d4\5\7\14\0\1\u01d5\44\0"+
    "\1\7\5\0\12\7\1\u01d6\24\7\21\0\1\u01d7\36\0"+
    "\1\u0156\1\7\5\0\7\7\1\u0158\20\7\1\u0159\6\7"+
    "\6\0\1\7\5\0\23\7\1\u01d8\13\7\21\0\1\u01d9"+
    "\70\0\1\u019f\20\0\1\u015a\1\7\5\0\7\7\1\u015c"+
    "\20\7\1\u015d\6\7\6\0\1\7\5\0\23\7\1\u01da"+
    "\13\7\20\0\1\u019a\53\0\1\u01db\37\0\1\7\5\0"+
    "\23\7\1\u01dc\13\7\21\0\1\u01dd\37\0\1\7\5\0"+
    "\23\7\1\u01de\13\7\43\0\1\u01df\15\0\1\7\5\0"+
    "\1\u01e0\36\7\37\0\1\u01e1\27\0\1\u01e2\44\0\1\7"+
    "\5\0\14\7\1\u01e3\22\7\5\0\1\u01e4\6\0\1\41"+
    "\2\0\1\u01e5\14\0\1\45\7\0\1\u01e4\14\0\1\7"+
    "\5\0\4\7\1\u01e6\32\7\5\0\1\u01e4\1\7\5\0"+
    "\1\127\2\7\1\u01aa\14\7\1\133\7\7\1\u01e7\6\7"+
    "\6\0\1\7\5\0\21\7\1\u01e8\7\7\1\u01e8\5\7"+
    "\6\0\1\7\5\0\1\u01e9\36\7\6\0\1\7\5\0"+
    "\14\7\1\u016b\22\7\6\0\1\7\5\0\4\7\1\u01ea"+
    "\2\7\1\u01eb\27\7\6\0\1\7\5\0\3\7\1\u01ec"+
    "\33\7\6\0\1\7\5\0\2\7\1\u01ed\34\7\27\0"+
    "\1\u01ee\31\0\1\7\5\0\14\7\1\u01ef\22\7\41\0"+
    "\1\46\17\0\1\7\5\0\25\7\1\35\11\7\6\0"+
    "\1\7\5\0\1\u01f0\36\7\6\0\1\7\5\0\1\u01b8"+
    "\36\7\6\0\1\7\5\0\1\u01f1\36\7\6\0\1\7"+
    "\5\0\2\7\1\u01f2\34\7\6\0\1\7\5\0\1\u01f3"+
    "\36\7\35\0\1\u01f4\7\0\1\u01f4\42\0\1\u01f5\7\0"+
    "\1\u01f5\23\0\1\u01f6\52\0\1\u01f7\42\0\1\7\5\0"+
    "\14\7\1\u01f8\22\7\6\0\1\7\5\0\3\7\1\u01f9"+
    "\33\7\14\0\1\u01fa\44\0\1\7\5\0\13\7\1\u01fb"+
    "\23\7\31\0\1\u01fc\27\0\1\7\5\0\23\7\1\u01fd"+
    "\13\7\6\0\1\7\5\0\7\7\1\u01fe\27\7\6\0"+
    "\1\7\5\0\12\7\1\u01ff\24\7\14\0\1\u0200\44\0"+
    "\1\7\5\0\13\7\1\u0201\23\7\6\0\1\7\5\0"+
    "\13\7\1\u0202\23\7\6\0\1\7\5\0\14\7\1\u0203"+
    "\22\7\6\0\1\7\5\0\7\7\1\u0204\27\7\6\0"+
    "\1\7\5\0\14\7\1\u0205\22\7\14\0\1\u0206\66\0"+
    "\1\u0207\27\0\1\u014e\1\7\5\0\37\7\26\0\1\u0208"+
    "\31\0\1\u0209\1\7\5\0\37\7\37\0\1\u020a\21\0"+
    "\1\7\5\0\1\u020b\36\7\37\0\1\u020c\21\0\1\7"+
    "\5\0\1\u020d\36\7\37\0\1\u020e\21\0\1\7\5\0"+
    "\1\u020f\36\7\37\0\1\u0210\21\0\1\7\5\0\1\u0211"+
    "\36\7\14\0\1\u0212\44\0\1\7\5\0\13\7\1\u0213"+
    "\23\7\14\0\1\u0214\66\0\1\u0215\27\0\1\u0167\1\7"+
    "\5\0\37\7\14\0\1\41\17\0\1\45\36\0\1\u0216"+
    "\37\0\1\u01e4\1\7\5\0\1\127\17\7\1\133\7\7"+
    "\1\u01e7\6\7\6\0\1\7\5\0\1\127\17\7\1\133"+
    "\16\7\5\0\1\u0217\1\7\5\0\6\7\1\u0218\21\7"+
    "\1\u0219\6\7\6\0\1\7\5\0\10\7\1\u021a\26\7"+
    "\6\0\1\7\5\0\14\7\1\u021b\22\7\6\0\1\7"+
    "\5\0\3\7\1\u021c\33\7\5\0\1\u021d\1\7\5\0"+
    "\3\7\1\u021e\7\7\1\131\12\7\1\36\1\7\1\u021f"+
    "\6\7\6\0\1\7\5\0\2\7\1\u0220\34\7\20\0"+
    "\1\u0221\40\0\1\7\5\0\4\7\1\u0222\32\7\6\0"+
    "\1\7\5\0\3\7\1\171\33\7\6\0\1\7\5\0"+
    "\3\7\1\u01d4\33\7\6\0\1\7\5\0\4\7\1\u0223"+
    "\32\7\5\0\1\u0217\14\0\1\u0224\21\0\1\u0217\24\0"+
    "\1\u0225\54\0\1\u0226\40\0\1\7\5\0\4\7\1\u0227"+
    "\32\7\6\0\1\7\5\0\1\u0228\36\7\27\0\1\u0229"+
    "\31\0\1\7\5\0\7\7\1\u022a\27\7\37\0\1\u022b"+
    "\21\0\1\7\5\0\14\7\1\u022c\22\7\6\0\1\7"+
    "\5\0\3\7\1\u022d\33\7\6\0\1\7\5\0\7\7"+
    "\1\u022e\27\7\27\0\1\u022f\31\0\1\7\5\0\7\7"+
    "\1\u0230\27\7\6\0\1\7\5\0\7\7\1\u0231\27\7"+
    "\6\0\1\7\5\0\5\7\1\150\31\7\6\0\1\7"+
    "\5\0\1\u0232\36\7\6\0\1\7\5\0\22\7\1\u0233"+
    "\14\7\26\0\1\52\31\0\1\u014e\12\0\1\u014f\23\0"+
    "\1\u014e\13\0\1\u0209\6\0\1\53\16\0\1\u0234\10\0"+
    "\1\u0209\22\0\1\53\16\0\1\u0234\33\0\1\u0235\44\0"+
    "\1\7\5\0\12\7\1\u0236\24\7\14\0\1\u0237\44\0"+
    "\1\7\5\0\12\7\1\u0238\24\7\14\0\1\u0239\44\0"+
    "\1\7\5\0\12\7\1\u023a\24\7\14\0\1\u023b\44\0"+
    "\1\7\5\0\12\7\1\u023c\24\7\27\0\1\u023d\31\0"+
    "\1\7\5\0\7\7\1\u023e\27\7\26\0\1\53\31\0"+
    "\1\u0167\12\0\1\u0168\23\0\1\u0167\13\0\1\u01e4\6\0"+
    "\1\41\17\0\1\45\7\0\1\u01e4\30\0\1\u0224\36\0"+
    "\1\7\5\0\1\u023f\36\7\6\0\1\7\5\0\6\7"+
    "\1\u0218\30\7\6\0\1\7\5\0\4\7\1\u0240\32\7"+
    "\6\0\1\7\5\0\4\7\1\u0241\32\7\6\0\1\7"+
    "\5\0\1\u0242\36\7\17\0\1\u0243\7\0\1\43\12\0"+
    "\1\47\16\0\1\7\5\0\1\234\36\7\6\0\1\7"+
    "\5\0\3\7\1\u021e\7\7\1\131\12\7\1\36\10\7"+
    "\6\0\1\7\5\0\7\7\1\u0244\27\7\6\0\1\7"+
    "\5\0\21\7\1\u0245\7\7\1\u0245\5\7\6\0\1\7"+
    "\5\0\14\7\1\u0246\22\7\14\0\1\u0247\61\0\1\u0248"+
    "\57\0\1\u0249\30\0\1\7\5\0\21\7\1\u024a\7\7"+
    "\1\u024a\5\7\6\0\1\7\5\0\3\7\1\u024b\33\7"+
    "\23\0\1\u024c\35\0\1\7\5\0\4\7\1\u024d\32\7"+
    "\30\0\1\u024e\30\0\1\7\5\0\22\7\1\u01c6\14\7"+
    "\6\0\1\7\5\0\1\u024f\36\7\6\0\1\7\5\0"+
    "\22\7\1\u0250\14\7\23\0\1\u0251\35\0\1\7\5\0"+
    "\4\7\1\u0252\32\7\6\0\1\7\5\0\4\7\1\u0253"+
    "\32\7\6\0\1\7\5\0\1\u0254\36\7\37\0\1\u0255"+
    "\41\0\1\u0256\31\0\1\u0209\1\7\5\0\4\7\1\u0257"+
    "\32\7\26\0\1\u0258\31\0\1\u0259\1\7\5\0\4\7"+
    "\1\u025a\32\7\26\0\1\u025b\31\0\1\u0259\1\7\5\0"+
    "\37\7\26\0\1\u025c\31\0\1\u025d\1\7\5\0\37\7"+
    "\23\0\1\u025e\35\0\1\7\5\0\4\7\1\u025f\32\7"+
    "\6\0\1\7\5\0\1\7\1\u0260\35\7\5\0\1\u0261"+
    "\1\7\5\0\3\7\1\u0262\12\7\1\132\11\7\1\u0263"+
    "\6\7\6\0\1\7\5\0\21\7\1\u0264\7\7\1\u0264"+
    "\5\7\6\0\1\7\5\0\3\7\1\u01b8\33\7\14\0"+
    "\1\136\44\0\1\7\5\0\15\7\1\u0265\21\7\6\0"+
    "\1\7\5\0\21\7\1\u0232\7\7\1\u0232\5\7\6\0"+
    "\1\7\5\0\22\7\1\u0266\14\7\15\0\1\u0267\66\0"+
    "\1\u0268\57\0\1\u0269\22\0\1\7\5\0\21\7\1\u024b"+
    "\7\7\1\u024b\5\7\20\0\1\u026a\40\0\1\7\5\0"+
    "\14\7\1\u026b\22\7\36\0\1\u01f4\22\0\1\7\5\0"+
    "\3\7\1\u026c\33\7\6\0\1\7\5\0\26\7\1\u026c"+
    "\10\7\20\0\1\u026d\40\0\1\7\5\0\14\7\1\u026e"+
    "\22\7\6\0\1\7\5\0\14\7\1\u026f\22\7\6\0"+
    "\1\7\5\0\12\7\1\u0270\24\7\20\0\1\53\37\0"+
    "\1\u0209\6\0\1\53\3\0\1\u0271\12\0\1\u0234\10\0"+
    "\1\u0209\14\0\1\7\5\0\21\7\1\u01d6\7\7\1\u01d6"+
    "\5\7\5\0\1\u0259\6\0\1\52\3\0\1\u0272\12\0"+
    "\1\u0273\10\0\1\u0259\22\0\1\52\16\0\1\u0273\25\0"+
    "\1\7\5\0\21\7\1\u023a\7\7\1\u023a\5\7\5\0"+
    "\1\u0259\6\0\1\52\16\0\1\u0273\10\0\1\u0259\13\0"+
    "\1\u025d\6\0\1\52\27\0\1\u025d\22\0\1\52\56\0"+
    "\1\u0274\40\0\1\7\5\0\14\7\1\u0275\22\7\6\0"+
    "\1\7\5\0\12\7\1\u0276\24\7\5\0\1\u0277\11\0"+
    "\1\u0278\12\0\1\44\11\0\1\u0277\14\0\1\7\5\0"+
    "\4\7\1\u0279\32\7\5\0\1\u0277\1\7\5\0\3\7"+
    "\1\u0262\12\7\1\132\11\7\1\u027a\6\7\6\0\1\7"+
    "\5\0\21\7\1\u01b8\7\7\1\u01b8\5\7\6\0\1\7"+
    "\5\0\14\7\1\u027b\22\7\6\0\1\7\5\0\1\u027c"+
    "\36\7\26\0\1\u027d\54\0\1\u027e\36\0\1\u027f\66\0"+
    "\1\u0280\30\0\1\7\5\0\22\7\1\u0281\14\7\30\0"+
    "\1\u0282\30\0\1\7\5\0\22\7\1\u0283\14\7\6\0"+
    "\1\7\5\0\22\7\1\u0284\14\7\6\0\1\7\5\0"+
    "\7\7\1\u0285\4\7\1\u0286\22\7\35\0\1\u0208\7\0"+
    "\1\u0208\42\0\1\u025b\7\0\1\u025b\44\0\1\u0287\43\0"+
    "\1\u0288\30\0\1\7\5\0\22\7\1\u0289\14\7\6\0"+
    "\1\7\5\0\1\u028a\36\7\32\0\1\44\40\0\1\u028b"+
    "\37\0\1\u0277\1\7\5\0\16\7\1\132\11\7\1\u027a"+
    "\6\7\6\0\1\7\5\0\16\7\1\132\20\7\6\0"+
    "\1\7\5\0\4\7\1\u0176\32\7\6\0\1\7\5\0"+
    "\5\7\1\u028c\31\7\14\0\1\u028d\56\0\1\u028e\53\0"+
    "\1\u028f\67\0\1\u0290\22\0\1\7\5\0\15\7\1\341"+
    "\21\7\36\0\1\u0291\22\0\1\7\5\0\15\7\1\160"+
    "\21\7\6\0\1\7\5\0\15\7\1\u01d4\21\7\6\0"+
    "\1\7\5\0\3\7\1\u0292\33\7\6\0\1\7\5\0"+
    "\4\7\1\u0293\32\7\20\0\1\52\70\0\1\u0294\22\0"+
    "\1\7\5\0\15\7\1\u0116\21\7\6\0\1\7\5\0"+
    "\3\7\1\u0295\33\7\5\0\1\u0277\24\0\1\44\11\0"+
    "\1\u0277\14\0\1\7\5\0\4\7\1\u0232\32\7\17\0"+
    "\1\u0296\70\0\1\u0297\7\0\1\u0297\25\0\1\u0298\63\0"+
    "\1\350\52\0\1\240\27\0\1\7\5\0\1\u0299\36\7"+
    "\6\0\1\7\5\0\21\7\1\u029a\7\7\1\u029a\5\7"+
    "\31\0\1\u0134\27\0\1\7\5\0\1\u0245\36\7\14\0"+
    "\1\u029b\44\0\1\7\5\0\3\7\1\u029c\33\7\6\0"+
    "\1\7\5\0\21\7\1\u029c\7\7\1\u029c\5\7\35\0"+
    "\1\u0298\7\0\1\u0298\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[27176];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\6\1\1\11\25\1\11\0"+
    "\2\11\61\1\10\0\1\11\71\1\1\0\1\11\5\0"+
    "\75\1\4\0\1\1\1\11\3\1\2\0\12\1\2\0"+
    "\16\1\3\0\6\1\2\0\21\1\1\0\16\1\1\0"+
    "\1\11\3\0\4\1\1\0\10\1\1\0\10\1\3\0"+
    "\2\1\1\11\1\0\20\1\1\0\1\1\3\0\11\1"+
    "\1\0\10\1\4\0\2\1\1\0\1\1\1\0\6\1"+
    "\1\0\5\1\2\0\2\1\1\0\1\1\1\0\2\1"+
    "\1\11\2\0\2\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\1\0\10\1\1\0\1\1\1\0"+
    "\10\1\4\0\2\1\1\0\1\1\1\0\5\1\1\0"+
    "\5\1\2\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\2\0\10\1\1\0\5\1\1\11\1\1\2\0"+
    "\2\1\1\0\1\1\1\0\3\1\1\0\5\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\6\1\1\0"+
    "\3\1\1\11\2\1\3\0\2\1\1\0\1\1\1\0"+
    "\3\1\1\0\4\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\5\1\1\0\3\1\3\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\0\3\1\1\0"+
    "\10\1\1\0\2\1\1\0\5\1\4\0\2\1\1\0"+
    "\3\1\4\0\2\1\2\0\4\1\4\0\1\1\1\0"+
    "\4\1\2\0\2\1\1\0\1\1\5\0\2\1\1\0"+
    "\1\1\1\0\2\11\2\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[668];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

//------> User code in java syntax

    public static LinkedList<TError> LexicalErrorTable = new LinkedList<TError>();

    // newline function declaracion
    private void newline() {
        yyline++;
        yycolumn = 1;
    }

    public LinkedList getTable(){
      return LexicalErrorTable;
    }

    public LinkedList clearTable(){
      LexicalErrorTable.clear();
      return LexicalErrorTable;
    }

    public String strg;



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer2(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Lexical Error: " + yytext() + ", line: " + yyline + ", column: " + yycolumn);
    TError data = new TError(yytext(), yyline, yycolumn, "Lexical Error", "Symbol does not exist in the language");
    LexicalErrorTable.add(data);

    // Switch to a different state to ignore characters until the end of the line
    yybegin(YYINITIAL);
            }
          // fall through
          case 32: break;
          case 2:
            { /* Ignore white spaces and line breaks */
            }
          // fall through
          case 33: break;
          case 3:
            { /* Ignore other text*/
            }
          // fall through
          case 34: break;
          case 4:
            { return new Symbol(Sym.NUM, yyline, yycolumn, yytext());
            }
          // fall through
          case 35: break;
          case 5:
            { return new Symbol(Sym.LESS_THAN, yyline, yycolumn, yytext());
            }
          // fall through
          case 36: break;
          case 6:
            { return new Symbol(Sym.EQUALS, yyline, yycolumn, yytext());
            }
          // fall through
          case 37: break;
          case 7:
            { return new Symbol(Sym.MORE_THAN, yyline, yycolumn, yytext());
            }
          // fall through
          case 38: break;
          case 8:
            { return new Symbol(Sym.LESS_THAN_EQUAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 39: break;
          case 9:
            { return new Symbol(Sym.MORE_THAN_EQUAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 40: break;
          case 10:
            { return new Symbol(Sym.STRING, yyline, yycolumn, yytext().substring(1, yytext().length() - 1));
            }
          // fall through
          case 41: break;
          case 11:
            { return new Symbol(Sym.ALL, yyline, yycolumn, yytext());
            }
          // fall through
          case 42: break;
          case 12:
            { return new Symbol(Sym.RELEASED_YEAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 43: break;
          case 13:
            { return new Symbol(Sym.BPM, yyline, yycolumn, yytext());
            }
          // fall through
          case 44: break;
          case 14:
            { return new Symbol(Sym.RELEASED_DAY, yyline, yycolumn, yytext());
            }
          // fall through
          case 45: break;
          case 15:
            { return new Symbol(Sym.KEY, yyline, yycolumn, yytext());
            }
          // fall through
          case 46: break;
          case 16:
            { return new Symbol(Sym.RELEASED_MONTH, yyline, yycolumn, yytext());
            }
          // fall through
          case 47: break;
          case 17:
            { return new Symbol(Sym.MODE, yyline, yycolumn, yytext());
            }
          // fall through
          case 48: break;
          case 18:
            { return new Symbol(Sym.SONG_NAME, yyline, yycolumn, yytext());
            }
          // fall through
          case 49: break;
          case 19:
            { return new Symbol(Sym.NULL, yyline, yycolumn, yytext());
            }
          // fall through
          case 50: break;
          case 20:
            { return new Symbol(Sym.SPEECHINESS, yyline, yycolumn, yytext());
            }
          // fall through
          case 51: break;
          case 21:
            { return new Symbol(Sym.ARTIST, yyline, yycolumn, yytext());
            }
          // fall through
          case 52: break;
          case 22:
            { return new Symbol(Sym.SEARCH, yyline, yycolumn, yytext());
            }
          // fall through
          case 53: break;
          case 23:
            { return new Symbol(Sym.ENERGY, yyline, yycolumn, yytext());
            }
          // fall through
          case 54: break;
          case 24:
            { return new Symbol(Sym.NUMBER, yyline, yycolumn, yytext());
            }
          // fall through
          case 55: break;
          case 25:
            { return new Symbol(Sym.STREAMS, yyline, yycolumn, yytext());
            }
          // fall through
          case 56: break;
          case 26:
            { return new Symbol(Sym.VALENCE, yyline, yycolumn, yytext());
            }
          // fall through
          case 57: break;
          case 27:
            { return new Symbol(Sym.ARTIST_COUNT, yyline, yycolumn, yytext());
            }
          // fall through
          case 58: break;
          case 28:
            { return new Symbol(Sym.LIVENESS, yyline, yycolumn, yytext());
            }
          // fall through
          case 59: break;
          case 29:
            { return new Symbol(Sym.ACOUSTICNESS, yyline, yycolumn, yytext());
            }
          // fall through
          case 60: break;
          case 30:
            { return new Symbol(Sym.DANCEABILITY, yyline, yycolumn, yytext());
            }
          // fall through
          case 61: break;
          case 31:
            { return new Symbol(Sym.INSTRUMENTALNESS, yyline, yycolumn, yytext());
            }
          // fall through
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
