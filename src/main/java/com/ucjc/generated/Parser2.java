
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.ucjc.generated;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import com.ucjc.utils.TError;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\012\003\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\007\004\000\002\004\004\000\002" +
    "\005\004\000\002\014\005\000\002\015\005\000\002\015" +
    "\005\000\002\016\005\000\002\016\005\000\002\017\005" +
    "\000\002\017\005\000\002\020\005\000\002\021\005\000" +
    "\002\022\004\000\002\023\004\000\002\024\005\000\002" +
    "\024\005\000\002\025\005\000\002\025\005\000\002\026" +
    "\005\000\002\026\005\000\002\027\005\000\002\027\005" +
    "\000\002\030\005\000\002\030\005\000\002\031\005\000" +
    "\002\031\005\000\002\032\005\000\002\032\005\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\002\000\002\011\003" +
    "\000\002\011\003\000\002\033\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\066\004\005\005\017\006\035\011\053\013" +
    "\uffc9\014\056\015\057\016\044\017\016\020\015\021\004" +
    "\022\014\023\051\024\043\025\055\026\024\027\052\030" +
    "\032\031\045\032\040\033\061\034\006\035\011\036\041" +
    "\037\010\040\uffc9\001\002\000\020\013\uffc9\014\056\015" +
    "\057\016\044\017\016\020\015\040\uffc9\001\002\000\006" +
    "\012\071\040\072\001\002\000\020\013\uffc9\014\056\015" +
    "\057\016\044\017\016\020\015\040\uffc9\001\002\000\004" +
    "\002\134\001\002\000\020\013\uffc9\014\056\015\057\016" +
    "\044\017\016\020\015\040\uffc9\001\002\000\020\013\uffc9" +
    "\014\056\015\057\016\044\017\016\020\015\040\uffc9\001" +
    "\002\000\070\002\ufff0\004\ufff0\005\ufff0\006\ufff0\011\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\040\ufff0\001\002\000\070\002\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\001\002" +
    "\000\020\013\uffc9\014\056\015\057\016\044\017\016\020" +
    "\015\040\uffc9\001\002\000\006\013\uffca\040\uffca\001\002" +
    "\000\006\013\uffcb\040\uffcb\001\002\000\006\012\071\040" +
    "\072\001\002\000\070\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\011\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\040\ufff6\001\002\000\070\002\ufff5" +
    "\004\ufff5\005\ufff5\006\ufff5\011\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\001\002\000\070\002\ufff7\004\ufff7\005\ufff7\006\ufff7\011" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\001\002\000\004\002\000\001" +
    "\002\000\020\013\uffc9\014\056\015\057\016\044\017\016" +
    "\020\015\040\uffc9\001\002\000\070\002\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\011\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9" +
    "\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\001\002\000" +
    "\070\002\uffee\004\uffee\005\uffee\006\uffee\011\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee" +
    "\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\001\002\000\070\002\uffed\004\uffed\005\uffed" +
    "\006\uffed\011\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\001\002\000\070" +
    "\002\ufffc\004\ufffc\005\ufffc\006\ufffc\011\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc" +
    "\040\ufffc\001\002\000\070\002\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\011\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\040\ufff3\001\002\000\006\012" +
    "\071\040\072\001\002\000\070\002\uffef\004\uffef\005\uffef" +
    "\006\uffef\011\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\001\002\000\070" +
    "\002\ufffb\004\ufffb\005\ufffb\006\ufffb\011\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\001\002\000\006\013\064\040\065\001\002\000" +
    "\070\002\ufff4\004\ufff4\005\ufff4\006\ufff4\011\ufff4\013\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\001\002\000\070\002\uffeb\004\uffeb\005\uffeb" +
    "\006\uffeb\011\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\001\002\000\020" +
    "\013\uffc9\014\056\015\057\016\044\017\016\020\015\040" +
    "\uffc9\001\002\000\020\013\uffc9\014\056\015\057\016\044" +
    "\017\016\020\015\040\uffc9\001\002\000\070\002\uffec\004" +
    "\uffec\005\uffec\006\uffec\011\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\001" +
    "\002\000\020\013\uffc9\014\056\015\057\016\044\017\016" +
    "\020\015\040\uffc9\001\002\000\006\013\uffcc\040\uffcc\001" +
    "\002\000\020\013\uffc9\014\056\015\057\016\044\017\016" +
    "\020\015\040\uffc9\001\002\000\070\002\ufffa\004\ufffa\005" +
    "\ufffa\006\ufffa\011\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\001\002\000" +
    "\070\002\ufff2\004\ufff2\005\ufff2\006\ufff2\011\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\001\002\000\006\013\064\040\065\001\002" +
    "\000\020\013\uffc9\014\056\015\057\016\044\017\016\020" +
    "\015\040\uffc9\001\002\000\006\012\071\040\072\001\002" +
    "\000\004\002\ufffd\001\002\000\070\002\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\011\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\001\002\000" +
    "\020\013\uffc9\014\056\015\057\016\044\017\016\020\015" +
    "\040\uffc9\001\002\000\006\013\uffce\040\uffce\001\002\000" +
    "\006\013\uffcd\040\uffcd\001\002\000\070\002\ufffe\004\005" +
    "\005\017\006\035\011\053\013\uffc9\014\056\015\057\016" +
    "\044\017\016\020\015\021\004\022\014\023\051\024\043" +
    "\025\055\026\024\027\052\030\032\031\045\032\040\033" +
    "\061\034\006\035\011\036\041\037\010\040\uffc9\001\002" +
    "\000\020\013\uffc9\014\056\015\057\016\044\017\016\020" +
    "\015\040\uffc9\001\002\000\006\013\064\040\065\001\002" +
    "\000\070\002\uffd8\004\uffd8\005\uffd8\006\uffd8\011\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\001\002\000\070\002\uffc6\004\uffc6\005" +
    "\uffc6\006\uffc6\011\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\001\002\000" +
    "\070\002\uffc5\004\uffc5\005\uffc5\006\uffc5\011\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\001\002\000\004\002\uffff\001\002\000\006" +
    "\013\064\040\065\001\002\000\070\002\uffe0\004\uffe0\005" +
    "\uffe0\006\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\001\002\000" +
    "\070\002\uffc8\004\uffc8\005\uffc8\006\uffc8\011\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\001\002\000\070\002\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\011\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\001\002\000\070" +
    "\002\uffde\004\uffde\005\uffde\006\uffde\011\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\001\002\000\006\013\064\040\065\001\002\000" +
    "\070\002\uffe4\004\uffe4\005\uffe4\006\uffe4\011\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\001\002\000\026\022\105\023\077\024\110" +
    "\031\107\032\101\033\100\034\104\035\102\036\103\037" +
    "\106\001\002\000\070\002\uffe3\004\uffe3\005\uffe3\006\uffe3" +
    "\011\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\001\002\000\070\002\uffd7" +
    "\004\uffd7\005\uffd7\006\uffd7\011\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\001\002\000\070\002\uffd9\004\uffd9\005\uffd9\006\uffd9\011" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\001\002\000\070\002\uffd3\004" +
    "\uffd3\005\uffd3\006\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\001" +
    "\002\000\070\002\uffd1\004\uffd1\005\uffd1\006\uffd1\011\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\001\002\000\070\002\uffd5\004\uffd5" +
    "\005\uffd5\006\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\001\002" +
    "\000\070\002\uffe5\004\uffe5\005\uffe5\006\uffe5\011\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\001\002\000\070\002\uffcf\004\uffcf\005" +
    "\uffcf\006\uffcf\011\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\001\002\000" +
    "\070\002\uffdb\004\uffdb\005\uffdb\006\uffdb\011\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\001\002\000\070\002\uffe1\004\uffe1\005\uffe1" +
    "\006\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\001\002\000\006" +
    "\013\064\040\065\001\002\000\070\002\uffdc\004\uffdc\005" +
    "\uffdc\006\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\001\002\000" +
    "\006\013\064\040\065\001\002\000\070\002\uffe2\004\uffe2" +
    "\005\uffe2\006\uffe2\011\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\001\002" +
    "\000\006\013\064\040\065\001\002\000\070\002\uffd2\004" +
    "\uffd2\005\uffd2\006\uffd2\011\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\001" +
    "\002\000\006\013\064\040\065\001\002\000\070\002\uffda" +
    "\004\uffda\005\uffda\006\uffda\011\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\001\002\000\070\002\uffea\004\uffea\005\uffea\006\uffea\011" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\001\002\000\070\002\uffdd\004" +
    "\uffdd\005\uffdd\006\uffdd\011\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\001" +
    "\002\000\006\013\064\040\065\001\002\000\070\002\uffdf" +
    "\004\uffdf\005\uffdf\006\uffdf\011\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\001\002\000\070\002\uffe8\004\uffe8\005\uffe8\006\uffe8\011" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\001\002\000\006\013\064\040" +
    "\065\001\002\000\070\002\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\011\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\001\002\000\006\013\064" +
    "\040\065\001\002\000\070\002\uffd4\004\uffd4\005\uffd4\006" +
    "\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\001\002\000\006\013" +
    "\064\040\065\001\002\000\070\002\uffd0\004\uffd0\005\uffd0" +
    "\006\uffd0\011\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\001\002\000\004" +
    "\002\001\001\002\000\006\013\064\040\065\001\002\000" +
    "\070\002\uffd6\004\uffd6\005\uffd6\006\uffd6\011\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\001\002\000\070\002\uffe9\004\uffe9\005\uffe9" +
    "\006\uffe9\011\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\001\002\000\006" +
    "\013\064\040\065\001\002\000\070\002\uffe7\004\uffe7\005" +
    "\uffe7\006\uffe7\011\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\056\002\022\003\057\004\033\005\045\007" +
    "\027\012\006\013\047\014\024\015\012\016\021\017\017" +
    "\020\020\021\035\022\030\023\046\024\053\025\011\026" +
    "\032\027\025\030\026\031\041\032\036\001\001\000\004" +
    "\013\137\001\001\000\004\011\136\001\001\000\004\013" +
    "\134\001\001\000\002\001\001\000\004\013\131\001\001" +
    "\000\004\013\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\116\001\001\000\004\013\114\001\001\000" +
    "\002\001\001\000\004\013\112\001\001\000\002\001\001" +
    "\000\004\013\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\075\001\001\000\004\013\073\001\001" +
    "\000\004\011\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\002\065\003\057\004\033\005\045\007" +
    "\027\013\047\014\024\015\012\016\021\017\017\020\020" +
    "\021\035\022\030\023\046\024\053\025\011\026\032\027" +
    "\025\030\026\031\041\032\036\001\001\000\004\013\061" +
    "\001\001\000\004\033\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\111" +
    "\001\001\000\002\001\001\000\004\033\113\001\001\000" +
    "\002\001\001\000\004\033\115\001\001\000\002\001\001" +
    "\000\004\033\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\126\001\001\000" +
    "\002\001\001\000\004\033\130\001\001\000\002\001\001" +
    "\000\004\033\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\140\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Import necessary packages and define additional code if needed
    public String result = "";
    public String str = "";
    public String num = "";

    public static LinkedList<TError> SyntaxErrorTable = new LinkedList<TError>();

    //Method that is automatically called when there is a syntax error
    public void syntax_error(Symbol s) {
    Object value = s.value;
    String lexeme = (value != null) ? value.toString() : "null";
    int line = s.left;
    int column = s.right;

    System.out.println("!!!!!!! Syntax Error Recovered !!!!!!!");
    System.out.println("\t\tLexeme: " + lexeme);
    System.out.println("\t\tLine: " + line);
    System.out.println("\t\tColumn: " + column);

    TError data = new TError(lexeme, line, column, "Syntax Error", "Unexpected character");
    SyntaxErrorTable.add(data);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
    Object value = s.value;
    String lexeme = (value != null) ? value.toString() : "null";
    int line = s.left;
    int column = s.right;

    System.out.println("!!!!!!! Syntax Error, Panic Mode !!!!!!!");
    System.out.println("\t\tLexeme: " + lexeme);
    System.out.println("\t\tLine: " + line);
    System.out.println("\t\tColumn: " + column);

    TError data = new TError(lexeme, line, column, "Syntax Error", "Unexpected character");
    SyntaxErrorTable.add(data);
    }

    public int error_count() {
        return SyntaxErrorTable.size();
    }

    public LinkedList getTable(){
      return SyntaxErrorTable;
    }

        public LinkedList clearTable(){
      SyntaxErrorTable.clear();
      return SyntaxErrorTable;
    }

    public static List<String> searchInDatabase(String jdbcUrl, String username, String password,
                                            String tableName, String columnName, String targetValue, String comparisonOperator) {
    List<String> results = new ArrayList<>();

    if (jdbcUrl == null || username == null || password == null || tableName == null || columnName == null || comparisonOperator == null) {
        // Add appropriate error handling or logging for invalid input parameters
        return results;
    }

    try {
      Class.forName("com.mysql.cj.jdbc.Driver");
    } catch (ClassNotFoundException e) {
      e.printStackTrace();
    }

    try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
        // Build the SQL query dynamically based on the comparison operator
        String sql = "SELECT * FROM " + tableName + " WHERE " + columnName + " " + comparisonOperator + " ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            // Set the parameter value
            statement.setString(1, targetValue);

            try (ResultSet resultSet = statement.executeQuery()) {
                while (resultSet.next()) {
                    // Construct a string representation of the entire row and add it to the results
                    StringBuilder row = new StringBuilder();
                    ResultSetMetaData metaData = resultSet.getMetaData();
                    int columnCount = metaData.getColumnCount();
                    for (int i = 1; i <= columnCount; i++) {
                        row.append(resultSet.getString(i));
                        if (i < columnCount) {
                            row.append(", ");
                        }
                    }
                    results.add(row.toString());
                }
            }
        }
    } catch (SQLException e) {
        // Log or handle the exception appropriately
        e.printStackTrace();
    }

    return results;
}

public String genericSearch(String columnName, String target, String comparisonOperator) {
    String jdbcUrl = "jdbc:mysql://sql8.freesqldatabase.com:3306/sql8672470";
    String username = "sql8672470";
    String password = "tjUFjunKny";
    String tableName = "Spotify_2023";

    System.out.println("Target (value): " + target);
    System.out.println("Column name (filter for the database): " + columnName);
    System.out.println("Comparison operator: " + comparisonOperator);

    // Get column names from the database
    List<String> columnNames = getColumnNames(jdbcUrl, username, password, tableName);

    if (!columnNames.isEmpty()) {
        // Build a table with column names and values
        StringBuilder table = new StringBuilder();

        // Add column names as headers
        for (String colName : columnNames) {
            table.append(String.format("%-20s", colName)); // Adjust the width as needed
        }
        table.append(System.lineSeparator());

        // Retrieve values based on the provided search criteria
        List<String> foundValues = searchInDatabase(jdbcUrl, username, password, tableName, columnName, target, comparisonOperator);

        // Add values for each row
        for (String value : foundValues) {
            String[] rowValues = value.split(", ");
            for (String rowValue : rowValues) {
                table.append(String.format("%-20s", rowValue)); // Adjust the width as needed
            }
            table.append(System.lineSeparator());
        }

        return table.toString();
    } else {
        System.out.println("Unable to retrieve column names from the database.");
        return null;
    }
}

// Helper method to retrieve column names from the database
private static List<String> getColumnNames(String jdbcUrl, String username, String password, String tableName) {
    List<String> columnNames = new ArrayList<>();

    try {
      Class.forName("com.mysql.cj.jdbc.Driver");
    } catch (ClassNotFoundException e) {
      e.printStackTrace();
    }

    try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
        DatabaseMetaData metaData = connection.getMetaData();
        try (ResultSet resultSet = metaData.getColumns(null, null, tableName, null)) {
            while (resultSet.next()) {
                String columnName = resultSet.getString("COLUMN_NAME");
                columnNames.add(columnName);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace(); // Log or handle the exception appropriately
    }

    return columnNames;
}


public static List<String> getAllFromDatabase(String jdbcUrl, String username, String password, String tableName) {
    List<String> results = new ArrayList<>();

    if (jdbcUrl == null || username == null || password == null || tableName == null) {
        // Add appropriate error handling or logging for invalid input parameters
        return results;
    }

    try {
      Class.forName("com.mysql.cj.jdbc.Driver");
    } catch (ClassNotFoundException e) {
      e.printStackTrace();
    }

    try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
        // Build the SQL query to select all records from the table
        String sql = "SELECT * FROM " + tableName;
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            try (ResultSet resultSet = statement.executeQuery()) {
                while (resultSet.next()) {
                    // Construct a string representation of the entire row and add it to the results
                    StringBuilder row = new StringBuilder();
                    ResultSetMetaData metaData = resultSet.getMetaData();
                    int columnCount = metaData.getColumnCount();
                    for (int i = 1; i <= columnCount; i++) {
                        row.append(resultSet.getString(i));
                        if (i < columnCount) {
                            row.append(", ");
                        }
                    }
                    results.add(row.toString());
                }
            }
        }
    } catch (SQLException e) {
        // Log or handle the exception appropriately
        e.printStackTrace();
    }

    return results;
}


public String getAllRecords() {
    String jdbcUrl = "jdbc:mysql://sql8.freesqldatabase.com:3306/sql8672470";
    String username = "sql8672470";
    String password = "tjUFjunKny";
    String tableName = "Spotify_2023";
    
    List<String> allValues = getAllFromDatabase(jdbcUrl, username, password, tableName);

    if (!allValues.isEmpty()) {
        // Get column names from the database
        List<String> columnNames = getColumnNames(jdbcUrl, username, password, tableName);

        // Build a table with column names and values
        StringBuilder table = new StringBuilder();

        // Add column names as headers
        for (String colName : columnNames) {
            table.append(String.format("%-20s", colName)); // Adjust the width as needed
        }
        table.append(System.lineSeparator());

        // Add values for each row
        for (String value : allValues) {
            String[] rowValues = value.split(", ");
            for (String rowValue : rowValues) {
                table.append(String.format("%-20s", rowValue)); // Adjust the width as needed
            }
            table.append(System.lineSeparator());
        }

        return table.toString();
    } else {
        System.out.println("No records found in the database.");
        return null;
    }
}




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser2$actions {



  private final Parser2 parser;

  /** Constructor */
  CUP$Parser2$actions(Parser2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser2$do_action_part00000000(
    int                        CUP$Parser2$act_num,
    java_cup.runtime.lr_parser CUP$Parser2$parser,
    java.util.Stack            CUP$Parser2$stack,
    int                        CUP$Parser2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser2$result;

      /* select the action based on the action number */
      switch (CUP$Parser2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= QUERY EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		RESULT = start_val;
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser2$parser.done_parsing();
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // QUERY ::= Search 
            {
              String RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    result = res; 
    System.out.println("QUERY: " + result);
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("QUERY",8, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Search ::= Field Search 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		
    RESULT = a + b;
    System.out.println("Search: " + RESULT);
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Search",0, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Search ::= Field 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = a;
    System.out.println("Search: " + RESULT);
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Search",0, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Search ::= ALL 
            {
              String RESULT =null;
		
    RESULT = getAllRecords();
    System.out.println("Getting everything... " + RESULT);
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Search",0, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Field ::= NumberField 
            {
              String RESULT =null;
		int fld1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld1 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld1; 
    System.out.println("Field: NumberField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Field ::= SongNameField 
            {
              String RESULT =null;
		int fld2left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld2right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld2 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld2; 
    System.out.println("Field: SongNameField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Field ::= ArtistField 
            {
              String RESULT =null;
		int fld3left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld3right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld3 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld3; 
    System.out.println("Field: ArtistField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Field ::= ArtistCountField 
            {
              String RESULT =null;
		int fld4left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld4right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld4 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld4; 
    System.out.println("Field: ArtistCountField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Field ::= ReleasedYearField 
            {
              String RESULT =null;
		int fld5left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld5right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld5 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld5; 
    System.out.println("Field: ReleasedYearField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Field ::= ReleasedMonthField 
            {
              String RESULT =null;
		int fld6left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld6right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld6 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld6; 
    System.out.println("Field: ReleasedMonthField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Field ::= ReleasedDayField 
            {
              String RESULT =null;
		int fld7left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld7right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld7 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld7; 
    System.out.println("Field: ReleasedDayField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Field ::= StreamsField 
            {
              String RESULT =null;
		int fld8left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld8right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld8 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld8; 
    System.out.println("Field: StreamsField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Field ::= BpmField 
            {
              String RESULT =null;
		int fld9left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld9right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld9 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld9; 
    System.out.println("Field: BpmField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Field ::= KeyField 
            {
              String RESULT =null;
		int fld10left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld10right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld10 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld10; 
    System.out.println("Field: KeyField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Field ::= ModeField 
            {
              String RESULT =null;
		int fld11left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld11right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld11 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld11; 
    System.out.println("Field: ModeField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Field ::= DanceabilityField 
            {
              String RESULT =null;
		int fld12left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld12right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld12 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld12; 
    System.out.println("Field: DanceabilityField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Field ::= ValenceField 
            {
              String RESULT =null;
		int fld13left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld13right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld13 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld13; 
    System.out.println("Field: ValenceField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Field ::= EnergyField 
            {
              String RESULT =null;
		int fld14left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld14right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld14 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld14; 
    System.out.println("Field: EnergyField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Field ::= AcousticnessField 
            {
              String RESULT =null;
		int fld15left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld15right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld15 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld15; 
    System.out.println("Field: AcousticnessField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Field ::= InstrumentalnessField 
            {
              String RESULT =null;
		int fld16left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld16right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld16 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld16; 
    System.out.println("Field: InstrumentalnessField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Field ::= LivenessField 
            {
              String RESULT =null;
		int fld17left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld17right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld17 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld17; 
    System.out.println("Field: LivenessField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Field ::= SpeechinessField 
            {
              String RESULT =null;
		int fld18left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld18right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld18 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld18; 
    System.out.println("Field: SpeechinessField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NumberField ::= NUMBER CompareNum 
            {
              String RESULT =null;
		int numericValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int numericValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String numericValue = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("NUMBER", String.valueOf(comparisonValue), "="); 
    System.out.println("Specific field: NUMBER");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("NumberField",5, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SongNameField ::= SONG_NAME CompareString 
            {
              String RESULT =null;
		int songNameleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int songNameright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String songName = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonStringleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonStringright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String comparisonString = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    String searchStringSng = "%" + comparisonString + "%";
    RESULT = genericSearch("SONG_NAME", searchStringSng, "LIKE"); 
    System.out.println("Specific field: SONG_NAME");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("SongNameField",2, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ArtistField ::= ARTIST CompareString 
            {
              String RESULT =null;
		int artistNameleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int artistNameright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String artistName = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonStringleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonStringright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String comparisonString = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    String searchStringArt = "%" + comparisonString + "%";
    RESULT = genericSearch("ARTIST", searchStringArt, "LIKE"); 
    System.out.println("Specific field: ARTIST");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ArtistField",3, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ArtistCountField ::= ARTIST_COUNT ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int artistCountleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int artistCountright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String artistCount = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("ARTIST_COUNT", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: ARTIST_COUNT");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ArtistCountField",10, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ReleasedYearField ::= RELEASED_YEAR ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int releasedYearleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int releasedYearright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String releasedYear = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("RELEASED_YEAR", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: RELEASED_YEAR");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ReleasedYearField",11, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ReleasedYearField ::= ComparisonOperator CompareNum RELEASED_YEAR 
            {
              String RESULT =null;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int releasedYearleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int releasedYearright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String releasedYear = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("RELEASED_YEAR", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: RELEASED_YEAR");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ReleasedYearField",11, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ReleasedMonthField ::= RELEASED_MONTH ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int releasedMonthleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int releasedMonthright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String releasedMonth = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("RELEASED_MONTH", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: RELEASED_MONTH");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ReleasedMonthField",12, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ReleasedMonthField ::= ComparisonOperator CompareNum RELEASED_MONTH 
            {
              String RESULT =null;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int releasedMonthleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int releasedMonthright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String releasedMonth = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("RELEASED_MONTH", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: RELEASED_MONTH");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ReleasedMonthField",12, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ReleasedDayField ::= RELEASED_DAY ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int releasedDayleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int releasedDayright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String releasedDay = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("RELEASED_DAY", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: RELEASED_DAY");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ReleasedDayField",13, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ReleasedDayField ::= ComparisonOperator CompareNum RELEASED_DAY 
            {
              String RESULT =null;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int releasedDayleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int releasedDayright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String releasedDay = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("RELEASED_DAY", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: RELEASED_DAY");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ReleasedDayField",13, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StreamsField ::= STREAMS ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int streamsleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int streamsright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String streams = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("STREAMS", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: STREAMS");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("StreamsField",14, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BpmField ::= BPM ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int bpmleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int bpmright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String bpm = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("BPM", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: BPM");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("BpmField",15, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // KeyField ::= KEY CompareString 
            {
              String RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonStringleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonStringright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String comparisonString = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("`KEY`", comparisonString, "="); 
    System.out.println("Specific field: KEY");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("KeyField",16, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ModeField ::= MODE CompareString 
            {
              String RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String mode = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonStringleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonStringright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String comparisonString = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    String searchStringMde = "%" + comparisonString + "%";
    RESULT = genericSearch("MODE", searchStringMde, "LIKE"); 
    System.out.println("Specific field: MODE");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ModeField",17, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DanceabilityField ::= DANCEABILITY ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int danceabilityleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int danceabilityright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String danceability = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("DANCEABILITY", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: DANCEABILITY");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("DanceabilityField",18, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DanceabilityField ::= ComparisonOperator CompareNum DANCEABILITY 
            {
              String RESULT =null;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int danceabilityleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int danceabilityright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String danceability = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("DANCEABILITY", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: DANCEABILITY");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("DanceabilityField",18, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ValenceField ::= VALENCE ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int valenceleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int valenceright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String valence = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("VALENCE", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: VALENCE");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ValenceField",19, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ValenceField ::= ComparisonOperator CompareNum VALENCE 
            {
              String RESULT =null;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int valenceleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int valenceright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String valence = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("VALENCE", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: VALENCE");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ValenceField",19, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EnergyField ::= ENERGY ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int energyleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int energyright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String energy = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("ENERGY", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: ENERGY");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("EnergyField",20, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EnergyField ::= ComparisonOperator CompareNum ENERGY 
            {
              String RESULT =null;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int energyleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int energyright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String energy = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("ENERGY", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: ENERGY");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("EnergyField",20, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AcousticnessField ::= ACOUSTICNESS ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int acousticnessleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int acousticnessright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String acousticness = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("ACOUSTICNESS", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: ACOUSTICNESS");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("AcousticnessField",21, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AcousticnessField ::= ComparisonOperator CompareNum ACOUSTICNESS 
            {
              String RESULT =null;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int acousticnessleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int acousticnessright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String acousticness = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("ACOUSTICNESS", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: ACOUSTICNESS");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("AcousticnessField",21, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // InstrumentalnessField ::= INSTRUMENTALNESS ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int instrumentalnessleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int instrumentalnessright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String instrumentalness = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("INSTRUMENTALNESS", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: INSTRUMENTALNESS");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("InstrumentalnessField",22, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // InstrumentalnessField ::= ComparisonOperator CompareNum INSTRUMENTALNESS 
            {
              String RESULT =null;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int instrumentalnessleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int instrumentalnessright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String instrumentalness = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("INSTRUMENTALNESS", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: INSTRUMENTALNESS");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("InstrumentalnessField",22, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LivenessField ::= LIVENESS ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int livenessleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int livenessright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String liveness = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("LIVENESS", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: LIVENESS");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("LivenessField",23, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LivenessField ::= ComparisonOperator CompareNum LIVENESS 
            {
              String RESULT =null;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int livenessleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int livenessright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String liveness = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("LIVENESS", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: LIVENESS");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("LivenessField",23, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SpeechinessField ::= SPEECHINESS ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int speechinessleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int speechinessright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String speechiness = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("SPEECHINESS", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: SPEECHINESS");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("SpeechinessField",24, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SpeechinessField ::= ComparisonOperator CompareNum SPEECHINESS 
            {
              String RESULT =null;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int speechinessleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int speechinessright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String speechiness = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("SPEECHINESS", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: SPEECHINESS");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("SpeechinessField",24, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ComparisonOperator ::= MORE_THAN 
            {
              String RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String mt = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = ">"; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ComparisonOperator ::= LESS_THAN 
            {
              String RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String lt = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = "<"; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ComparisonOperator ::= MORE_THAN_EQUAL 
            {
              String RESULT =null;
		int mteleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int mteright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String mte = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = ">="; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ComparisonOperator ::= LESS_THAN_EQUAL 
            {
              String RESULT =null;
		int lteleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int lteright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String lte = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = "<="; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ComparisonOperator ::= EQUALS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = "="; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ComparisonOperator ::= 
            {
              String RESULT =null;
		RESULT = "="; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CompareString ::= STRING 
            {
              String RESULT =null;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
  RESULT = stringValue; 
    System.out.println("Comparison field: " + stringValue);

              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("CompareString",7, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CompareString ::= NULL 
            {
              String RESULT =null;
		int nllleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int nllright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String nll = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
  RESULT = "NULL"; 
  System.out.println("Comparison field: STRING-NULL");

              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("CompareString",7, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CompareNum ::= NUM 
            {
              Object RESULT =null;
		int numberValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int numberValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String numberValue = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
  RESULT = Integer.parseInt(numberValue); 
  System.out.println("Comparison field: " + numberValue);

              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("CompareNum",25, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CompareNum ::= NULL 
            {
              Object RESULT =null;
		int nllleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int nllright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String nll = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
  RESULT = "NULL"; 
  System.out.println("Comparison field: NUM-NULL");

              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("CompareNum",25, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser2$do_action(
    int                        CUP$Parser2$act_num,
    java_cup.runtime.lr_parser CUP$Parser2$parser,
    java.util.Stack            CUP$Parser2$stack,
    int                        CUP$Parser2$top)
    throws java.lang.Exception
    {
              return CUP$Parser2$do_action_part00000000(
                               CUP$Parser2$act_num,
                               CUP$Parser2$parser,
                               CUP$Parser2$stack,
                               CUP$Parser2$top);
    }
}

}
