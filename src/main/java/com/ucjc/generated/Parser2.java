
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.ucjc.generated;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import com.ucjc.utils.TError;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\012\003\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\007\004\000\002\004\004\000\002" +
    "\005\004\000\002\014\005\000\002\015\005\000\002\016" +
    "\005\000\002\017\005\000\002\020\005\000\002\021\005" +
    "\000\002\022\004\000\002\023\004\000\002\024\005\000" +
    "\002\025\005\000\002\026\005\000\002\027\005\000\002" +
    "\030\005\000\002\031\005\000\002\032\005\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\002\000\002\011\003\000" +
    "\002\011\003\000\002\033\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\050\004\005\005\015\006\033\012\047\022" +
    "\004\023\014\024\045\025\041\026\051\027\022\030\046" +
    "\031\030\032\042\033\035\034\053\035\006\036\011\037" +
    "\037\040\010\001\002\000\020\014\uffd3\015\061\016\055" +
    "\017\060\020\057\021\056\041\uffd3\001\002\000\006\013" +
    "\070\041\071\001\002\000\020\014\uffd3\015\061\016\055" +
    "\017\060\020\057\021\056\041\uffd3\001\002\000\004\002" +
    "\120\001\002\000\020\014\uffd3\015\061\016\055\017\060" +
    "\020\057\021\056\041\uffd3\001\002\000\020\014\uffd3\015" +
    "\061\016\055\017\060\020\057\021\056\041\uffd3\001\002" +
    "\000\052\002\ufff0\004\ufff0\005\ufff0\006\ufff0\012\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\001\002\000\052\002\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\012\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\035\ufff8\036\ufff8\037\ufff8\040\ufff8\001\002\000\020\014" +
    "\uffd3\015\061\016\055\017\060\020\057\021\056\041\uffd3" +
    "\001\002\000\006\013\070\041\071\001\002\000\052\002" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\012\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032" +
    "\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\001\002\000\052\002\ufff5\004\ufff5\005\ufff5\006\ufff5\012" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036" +
    "\ufff5\037\ufff5\040\ufff5\001\002\000\052\002\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\012\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\001\002\000" +
    "\004\002\000\001\002\000\020\014\uffd3\015\061\016\055" +
    "\017\060\020\057\021\056\041\uffd3\001\002\000\052\002" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\012\ufff9\022\ufff9\023\ufff9" +
    "\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032" +
    "\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\001\002\000\052\002\uffee\004\uffee\005\uffee\006\uffee\012" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\001\002\000\052\002\uffed\004\uffed" +
    "\005\uffed\006\uffed\012\uffed\022\uffed\023\uffed\024\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed" +
    "\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\001\002\000" +
    "\052\002\ufffc\004\ufffc\005\ufffc\006\ufffc\012\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc" +
    "\040\ufffc\001\002\000\052\002\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\012\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\036\ufff3\037\ufff3\040\ufff3\001\002\000\006\013\070" +
    "\041\071\001\002\000\052\002\uffef\004\uffef\005\uffef\006" +
    "\uffef\012\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\001\002\000\052\002\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\012\ufffb\022\ufffb\023\ufffb\024" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\001" +
    "\002\000\006\014\063\041\064\001\002\000\052\002\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\012\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\001" +
    "\002\000\020\014\uffd3\015\061\016\055\017\060\020\057" +
    "\021\056\041\uffd3\001\002\000\052\002\uffeb\004\uffeb\005" +
    "\uffeb\006\uffeb\012\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\001\002\000\020" +
    "\014\uffd3\015\061\016\055\017\060\020\057\021\056\041" +
    "\uffd3\001\002\000\052\002\uffec\004\uffec\005\uffec\006\uffec" +
    "\012\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027" +
    "\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\001\002\000\020\014\uffd3\015" +
    "\061\016\055\017\060\020\057\021\056\041\uffd3\001\002" +
    "\000\020\014\uffd3\015\061\016\055\017\060\020\057\021" +
    "\056\041\uffd3\001\002\000\052\002\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\012\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\040\ufffa\001\002\000\052\002" +
    "\ufff2\004\ufff2\005\ufff2\006\ufff2\012\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\001\002\000\020\014\uffd3\015\061\016\055\017\060\020" +
    "\057\021\056\041\uffd3\001\002\000\006\013\070\041\071" +
    "\001\002\000\004\002\ufffd\001\002\000\052\002\ufff1\004" +
    "\ufff1\005\ufff1\006\ufff1\012\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\001\002" +
    "\000\020\014\uffd3\015\061\016\055\017\060\020\057\021" +
    "\056\041\uffd3\001\002\000\052\002\ufffe\004\005\005\015" +
    "\006\033\012\047\022\004\023\014\024\045\025\041\026" +
    "\051\027\022\030\046\031\030\032\042\033\035\034\053" +
    "\035\006\036\011\037\037\040\010\001\002\000\020\014" +
    "\uffd3\015\061\016\055\017\060\020\057\021\056\041\uffd3" +
    "\001\002\000\006\014\063\041\064\001\002\000\006\014" +
    "\uffd7\041\uffd7\001\002\000\006\014\uffd4\041\uffd4\001\002" +
    "\000\006\014\uffd5\041\uffd5\001\002\000\006\014\uffd6\041" +
    "\uffd6\001\002\000\006\014\uffd8\041\uffd8\001\002\000\052" +
    "\002\uffdd\004\uffdd\005\uffdd\006\uffdd\012\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\001\002\000\052\002\uffd0\004\uffd0\005\uffd0\006\uffd0" +
    "\012\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\001\002\000\052\002\uffcf\004" +
    "\uffcf\005\uffcf\006\uffcf\012\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\001\002" +
    "\000\004\002\uffff\001\002\000\006\014\063\041\064\001" +
    "\002\000\052\002\uffe3\004\uffe3\005\uffe3\006\uffe3\012\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\001\002\000\052\002\uffd2\004\uffd2\005" +
    "\uffd2\006\uffd2\012\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\001\002\000\052" +
    "\002\uffd1\004\uffd1\005\uffd1\006\uffd1\012\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\001\002\000\052\002\uffe1\004\uffe1\005\uffe1\006\uffe1" +
    "\012\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\001\002\000\006\014\063\041" +
    "\064\001\002\000\052\002\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\012\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\001\002\000\006\014\063\041" +
    "\064\001\002\000\052\002\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\012\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\001\002\000\006\014\063\041" +
    "\064\001\002\000\052\002\uffe4\004\uffe4\005\uffe4\006\uffe4" +
    "\012\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\001\002\000\006\014\063\041" +
    "\064\001\002\000\052\002\uffda\004\uffda\005\uffda\006\uffda" +
    "\012\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\001\002\000\006\014\063\041" +
    "\064\001\002\000\052\002\uffde\004\uffde\005\uffde\006\uffde" +
    "\012\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\001\002\000\052\002\uffea\004" +
    "\uffea\005\uffea\006\uffea\012\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\001\002" +
    "\000\052\002\uffe0\004\uffe0\005\uffe0\006\uffe0\012\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\001\002\000\006\014\063\041\064\001\002" +
    "\000\052\002\uffe2\004\uffe2\005\uffe2\006\uffe2\012\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\001\002\000\052\002\uffe8\004\uffe8\005\uffe8" +
    "\006\uffe8\012\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\001\002\000\006\014" +
    "\063\041\064\001\002\000\052\002\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\012\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\001\002\000\006\014" +
    "\063\041\064\001\002\000\052\002\uffdb\004\uffdb\005\uffdb" +
    "\006\uffdb\012\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\001\002\000\006\014" +
    "\063\041\064\001\002\000\052\002\uffd9\004\uffd9\005\uffd9" +
    "\006\uffd9\012\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\001\002\000\004\002" +
    "\001\001\002\000\006\014\063\041\064\001\002\000\052" +
    "\002\uffdc\004\uffdc\005\uffdc\006\uffdc\012\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\001\002\000\052\002\uffe9\004\uffe9\005\uffe9\006\uffe9" +
    "\012\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\001\002\000\006\014\063\041" +
    "\064\001\002\000\052\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\012\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\054\002\020\003\051\004\031\005\042\007" +
    "\025\012\006\014\022\015\012\016\017\017\015\020\016" +
    "\021\033\022\026\023\043\024\047\025\011\026\030\027" +
    "\023\030\024\031\037\032\035\001\001\000\004\013\123" +
    "\001\001\000\004\011\122\001\001\000\004\013\120\001" +
    "\001\000\002\001\001\000\004\013\115\001\001\000\004" +
    "\013\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\111\001\001\000\004\011\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\104\001\001\000\002\001\001\000" +
    "\004\013\102\001\001\000\002\001\001\000\004\013\100" +
    "\001\001\000\002\001\001\000\004\013\076\001\001\000" +
    "\004\013\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\072\001\001\000\004\011\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\065\001\001" +
    "\000\052\002\064\003\051\004\031\005\042\007\025\014" +
    "\022\015\012\016\017\017\015\020\016\021\033\022\026" +
    "\023\043\024\047\025\011\026\030\027\023\030\024\031" +
    "\037\032\035\001\001\000\004\013\053\001\001\000\004" +
    "\033\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\073\001\001\000\002\001\001\000\004\033\075\001\001" +
    "\000\002\001\001\000\004\033\077\001\001\000\002\001" +
    "\001\000\004\033\101\001\001\000\002\001\001\000\004" +
    "\033\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\112\001\001\000\002\001" +
    "\001\000\004\033\114\001\001\000\002\001\001\000\004" +
    "\033\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\124\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Import necessary packages and define additional code if needed
    public String result = "";
    public String str = "";
    public String num = "";

    public static LinkedList<TError> SyntaxErrorTable = new LinkedList<TError>();

    //Method that is automatically called when there is a syntax error
    public void syntax_error(Symbol s) {
    Object value = s.value;
    String lexeme = (value != null) ? value.toString() : "null";
    int line = s.left;
    int column = s.right;

    System.out.println("!!!!!!! Syntax Error Recovered !!!!!!!");
    System.out.println("\t\tLexeme: " + lexeme);
    System.out.println("\t\tLine: " + line);
    System.out.println("\t\tColumn: " + column);

    TError data = new TError(lexeme, line, column, "Syntax Error", "Unexpected character");
    SyntaxErrorTable.add(data);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
    Object value = s.value;
    String lexeme = (value != null) ? value.toString() : "null";
    int line = s.left;
    int column = s.right;

    System.out.println("!!!!!!! Syntax Error, Panic Mode !!!!!!!");
    System.out.println("\t\tLexeme: " + lexeme);
    System.out.println("\t\tLine: " + line);
    System.out.println("\t\tColumn: " + column);

    TError data = new TError(lexeme, line, column, "Syntax Error", "Unexpected character");
    SyntaxErrorTable.add(data);
    }

    public int error_count() {
        return SyntaxErrorTable.size();
    }

    public LinkedList getTable(){
      return SyntaxErrorTable;
    }

        public LinkedList clearTable(){
      SyntaxErrorTable.clear();
      return SyntaxErrorTable;
    }

    public static List<String> searchInDatabase(String jdbcUrl, String username, String password,
                                            String tableName, String columnName, String targetValue, String comparisonOperator) {
    List<String> results = new ArrayList<>();

    if (jdbcUrl == null || username == null || password == null || tableName == null || columnName == null || comparisonOperator == null) {
        // Add appropriate error handling or logging for invalid input parameters
        return results;
    }

    try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
        // Build the SQL query dynamically based on the comparison operator
        String sql = "SELECT * FROM " + tableName + " WHERE " + columnName + " " + comparisonOperator + " ?";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            // Set the parameter value
            statement.setString(1, targetValue);

            try (ResultSet resultSet = statement.executeQuery()) {
                while (resultSet.next()) {
                    // Construct a string representation of the entire row and add it to the results
                    StringBuilder row = new StringBuilder();
                    ResultSetMetaData metaData = resultSet.getMetaData();
                    int columnCount = metaData.getColumnCount();
                    for (int i = 1; i <= columnCount; i++) {
                        row.append(resultSet.getString(i));
                        if (i < columnCount) {
                            row.append(", ");
                        }
                    }
                    results.add(row.toString());
                }
            }
        }
    } catch (SQLException e) {
        // Log or handle the exception appropriately
        e.printStackTrace();
    }

    return results;
}

public String genericSearch(String columnName, String target, String comparisonOperator) {
    String jdbcUrl = "jdbc:mysql://sql8.freesqldatabase.com:3306/sql8672470";
    String username = "sql8672470";
    String password = "tjUFjunKny";
    String tableName = "Spotify_2023";

    System.out.println("Target (value): " + target);
    System.out.println("Column name (filter for the database): " + columnName);
    System.out.println("Comparison operator: " + comparisonOperator);

    // Get column names from the database
    List<String> columnNames = getColumnNames(jdbcUrl, username, password, tableName);

    if (!columnNames.isEmpty()) {
        // Build a table with column names and values
        StringBuilder table = new StringBuilder();

        // Add column names as headers
        for (String colName : columnNames) {
            table.append(String.format("%-20s", colName)); // Adjust the width as needed
        }
        table.append(System.lineSeparator());

        // Retrieve values based on the provided search criteria
        List<String> foundValues = searchInDatabase(jdbcUrl, username, password, tableName, columnName, target, comparisonOperator);

        // Add values for each row
        for (String value : foundValues) {
            String[] rowValues = value.split(", ");
            for (String rowValue : rowValues) {
                table.append(String.format("%-20s", rowValue)); // Adjust the width as needed
            }
            table.append(System.lineSeparator());
        }

        return table.toString();
    } else {
        System.out.println("Unable to retrieve column names from the database.");
        return null;
    }
}

// Helper method to retrieve column names from the database
private static List<String> getColumnNames(String jdbcUrl, String username, String password, String tableName) {
    List<String> columnNames = new ArrayList<>();

    try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
        DatabaseMetaData metaData = connection.getMetaData();
        try (ResultSet resultSet = metaData.getColumns(null, null, tableName, null)) {
            while (resultSet.next()) {
                String columnName = resultSet.getString("COLUMN_NAME");
                columnNames.add(columnName);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace(); // Log or handle the exception appropriately
    }

    return columnNames;
}


public static List<String> getAllFromDatabase(String jdbcUrl, String username, String password, String tableName) {
    List<String> results = new ArrayList<>();

    if (jdbcUrl == null || username == null || password == null || tableName == null) {
        // Add appropriate error handling or logging for invalid input parameters
        return results;
    }

    try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
        // Build the SQL query to select all records from the table
        String sql = "SELECT * FROM " + tableName;
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            try (ResultSet resultSet = statement.executeQuery()) {
                while (resultSet.next()) {
                    // Construct a string representation of the entire row and add it to the results
                    StringBuilder row = new StringBuilder();
                    ResultSetMetaData metaData = resultSet.getMetaData();
                    int columnCount = metaData.getColumnCount();
                    for (int i = 1; i <= columnCount; i++) {
                        row.append(resultSet.getString(i));
                        if (i < columnCount) {
                            row.append(", ");
                        }
                    }
                    results.add(row.toString());
                }
            }
        }
    } catch (SQLException e) {
        // Log or handle the exception appropriately
        e.printStackTrace();
    }

    return results;
}


public String getAllRecords() {
    String jdbcUrl = "jdbc:mysql://sql8.freesqldatabase.com:3306/sql8672470";
    String username = "sql8672470";
    String password = "tjUFjunKny";
    String tableName = "Spotify_2023";
    
    List<String> allValues = getAllFromDatabase(jdbcUrl, username, password, tableName);

    if (!allValues.isEmpty()) {
        // Get column names from the database
        List<String> columnNames = getColumnNames(jdbcUrl, username, password, tableName);

        // Build a table with column names and values
        StringBuilder table = new StringBuilder();

        // Add column names as headers
        for (String colName : columnNames) {
            table.append(String.format("%-20s", colName)); // Adjust the width as needed
        }
        table.append(System.lineSeparator());

        // Add values for each row
        for (String value : allValues) {
            String[] rowValues = value.split(", ");
            for (String rowValue : rowValues) {
                table.append(String.format("%-20s", rowValue)); // Adjust the width as needed
            }
            table.append(System.lineSeparator());
        }

        return table.toString();
    } else {
        System.out.println("No records found in the database.");
        return null;
    }
}




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser2$actions {



  private final Parser2 parser;

  /** Constructor */
  CUP$Parser2$actions(Parser2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser2$do_action_part00000000(
    int                        CUP$Parser2$act_num,
    java_cup.runtime.lr_parser CUP$Parser2$parser,
    java.util.Stack            CUP$Parser2$stack,
    int                        CUP$Parser2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser2$result;

      /* select the action based on the action number */
      switch (CUP$Parser2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= QUERY EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		RESULT = start_val;
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser2$parser.done_parsing();
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // QUERY ::= Search 
            {
              String RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    result = res; 
    System.out.println("QUERY: " + result);
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("QUERY",8, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Search ::= Field Search 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		
    RESULT = a + b;
    System.out.println("Search: " + RESULT);
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Search",0, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Search ::= Field 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = a;
    System.out.println("Search: " + RESULT);
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Search",0, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Search ::= ALL 
            {
              String RESULT =null;
		
    RESULT = getAllRecords();
    System.out.println("Getting everything... " + RESULT);
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Search",0, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Field ::= NumberField 
            {
              String RESULT =null;
		int fld1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld1 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld1; 
    System.out.println("Field: NumberField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Field ::= SongNameField 
            {
              String RESULT =null;
		int fld2left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld2right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld2 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld2; 
    System.out.println("Field: SongNameField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Field ::= ArtistField 
            {
              String RESULT =null;
		int fld3left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld3right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld3 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld3; 
    System.out.println("Field: ArtistField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Field ::= ArtistCountField 
            {
              String RESULT =null;
		int fld4left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld4right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld4 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld4; 
    System.out.println("Field: ArtistCountField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Field ::= ReleasedYearField 
            {
              String RESULT =null;
		int fld5left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld5right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld5 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld5; 
    System.out.println("Field: ReleasedYearField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Field ::= ReleasedMonthField 
            {
              String RESULT =null;
		int fld6left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld6right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld6 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld6; 
    System.out.println("Field: ReleasedMonthField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Field ::= ReleasedDayField 
            {
              String RESULT =null;
		int fld7left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld7right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld7 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld7; 
    System.out.println("Field: ReleasedDayField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Field ::= StreamsField 
            {
              String RESULT =null;
		int fld8left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld8right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld8 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld8; 
    System.out.println("Field: StreamsField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Field ::= BpmField 
            {
              String RESULT =null;
		int fld9left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld9right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld9 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld9; 
    System.out.println("Field: BpmField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Field ::= KeyField 
            {
              String RESULT =null;
		int fld10left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld10right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld10 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld10; 
    System.out.println("Field: KeyField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Field ::= ModeField 
            {
              String RESULT =null;
		int fld11left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld11right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld11 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld11; 
    System.out.println("Field: ModeField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Field ::= DanceabilityField 
            {
              String RESULT =null;
		int fld12left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld12right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld12 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld12; 
    System.out.println("Field: DanceabilityField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Field ::= ValenceField 
            {
              String RESULT =null;
		int fld13left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld13right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld13 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld13; 
    System.out.println("Field: ValenceField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Field ::= EnergyField 
            {
              String RESULT =null;
		int fld14left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld14right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld14 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld14; 
    System.out.println("Field: EnergyField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Field ::= AcousticnessField 
            {
              String RESULT =null;
		int fld15left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld15right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld15 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld15; 
    System.out.println("Field: AcousticnessField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Field ::= InstrumentalnessField 
            {
              String RESULT =null;
		int fld16left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld16right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld16 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld16; 
    System.out.println("Field: InstrumentalnessField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Field ::= LivenessField 
            {
              String RESULT =null;
		int fld17left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld17right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld17 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld17; 
    System.out.println("Field: LivenessField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Field ::= SpeechinessField 
            {
              String RESULT =null;
		int fld18left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fld18right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String fld18 = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = fld18; 
    System.out.println("Field: SpeechinessField");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("Field",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NumberField ::= NUMBER CompareNum 
            {
              String RESULT =null;
		int numericValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int numericValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String numericValue = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("NUMBER", String.valueOf(comparisonValue), "="); 
    System.out.println("Specific field: NUMBER");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("NumberField",5, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SongNameField ::= SONG_NAME CompareString 
            {
              String RESULT =null;
		int songNameleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int songNameright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String songName = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonStringleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonStringright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String comparisonString = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("SONG_NAME", comparisonString, "="); 
    System.out.println("Specific field: SONG_NAME");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("SongNameField",2, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ArtistField ::= ARTIST CompareString 
            {
              String RESULT =null;
		int artistNameleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int artistNameright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String artistName = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonStringleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonStringright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String comparisonString = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("ARTIST", comparisonString, "="); 
    System.out.println("Specific field: ARTIST");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ArtistField",3, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ArtistCountField ::= ARTIST_COUNT ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int artistCountleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int artistCountright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String artistCount = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("ARTIST_COUNT", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: ARTIST_COUNT");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ArtistCountField",10, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ReleasedYearField ::= RELEASED_YEAR ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int releasedYearleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int releasedYearright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String releasedYear = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("RELEASED_YEAR", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: RELEASED_YEAR");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ReleasedYearField",11, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ReleasedMonthField ::= RELEASED_MONTH ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int releasedMonthleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int releasedMonthright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String releasedMonth = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("RELEASED_MONTH", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: RELEASED_MONTH");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ReleasedMonthField",12, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ReleasedDayField ::= RELEASED_DAY ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int releasedDayleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int releasedDayright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String releasedDay = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("RELEASED_DAY", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: RELEASED_DAY");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ReleasedDayField",13, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StreamsField ::= STREAMS ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int streamsleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int streamsright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String streams = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("STREAMS", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: STREAMS");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("StreamsField",14, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BpmField ::= BPM ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int bpmleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int bpmright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String bpm = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("BPM", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: BPM");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("BpmField",15, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // KeyField ::= KEY CompareString 
            {
              String RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonStringleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonStringright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String comparisonString = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("`KEY`", comparisonString, "="); 
    System.out.println("Specific field: KEY");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("KeyField",16, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ModeField ::= MODE CompareString 
            {
              String RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String mode = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonStringleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonStringright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String comparisonString = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("MODE", comparisonString, "="); 
    System.out.println("Specific field: MODE");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ModeField",17, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DanceabilityField ::= DANCEABILITY ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int danceabilityleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int danceabilityright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String danceability = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("DANCEABILITY", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: DANCEABILITY");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("DanceabilityField",18, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ValenceField ::= VALENCE ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int valenceleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int valenceright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String valence = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("VALENCE", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: VALENCE");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ValenceField",19, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EnergyField ::= ENERGY ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int energyleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int energyright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String energy = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("ENERGY", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: ENERGY");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("EnergyField",20, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AcousticnessField ::= ACOUSTICNESS ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int acousticnessleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int acousticnessright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String acousticness = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("ACOUSTICNESS", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: ACOUSTICNESS");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("AcousticnessField",21, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // InstrumentalnessField ::= INSTRUMENTALNESS ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int instrumentalnessleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int instrumentalnessright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String instrumentalness = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("INSTRUMENTALNESS", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: INSTRUMENTALNESS");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("InstrumentalnessField",22, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LivenessField ::= LIVENESS ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int livenessleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int livenessright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String liveness = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("LIVENESS", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: LIVENESS");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("LivenessField",23, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SpeechinessField ::= SPEECHINESS ComparisonOperator CompareNum 
            {
              String RESULT =null;
		int speechinessleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int speechinessright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String speechiness = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int comparisonOperatorleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int comparisonOperatorright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		String comparisonOperator = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int comparisonValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int comparisonValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object comparisonValue = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
    RESULT = genericSearch("SPEECHINESS", String.valueOf(comparisonValue), comparisonOperator); 
    System.out.println("Specific field: SPEECHINESS");
  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("SpeechinessField",24, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ComparisonOperator ::= MORE_THAN 
            {
              String RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String mt = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = ">"; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ComparisonOperator ::= LESS_THAN 
            {
              String RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String lt = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = "<"; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ComparisonOperator ::= MORE_THAN_EQUAL 
            {
              String RESULT =null;
		int mteleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int mteright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String mte = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = ">="; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ComparisonOperator ::= LESS_THAN_EQUAL 
            {
              String RESULT =null;
		int lteleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int lteright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String lte = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = "<="; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ComparisonOperator ::= EQUALS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = "="; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ComparisonOperator ::= 
            {
              String RESULT =null;
		RESULT = "="; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",9, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CompareString ::= STRING 
            {
              String RESULT =null;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
  RESULT = stringValue; 
    System.out.println("Comparison field: STRING");


              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("CompareString",7, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CompareString ::= NULL 
            {
              String RESULT =null;
		int nllleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int nllright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String nll = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
  RESULT = "NULL"; 
  System.out.println("Comparison field: STRING-NULL");

              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("CompareString",7, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CompareNum ::= NUM 
            {
              Object RESULT =null;
		int numberValueleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int numberValueright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String numberValue = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
  RESULT = Integer.parseInt(numberValue); 
  System.out.println("Comparison field: NUM");

              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("CompareNum",25, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CompareNum ::= NULL 
            {
              Object RESULT =null;
		int nllleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int nllright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String nll = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 
  RESULT = "NULL"; 
  System.out.println("Comparison field: NUM-NULL");

              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("CompareNum",25, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser2$do_action(
    int                        CUP$Parser2$act_num,
    java_cup.runtime.lr_parser CUP$Parser2$parser,
    java.util.Stack            CUP$Parser2$stack,
    int                        CUP$Parser2$top)
    throws java.lang.Exception
    {
              return CUP$Parser2$do_action_part00000000(
                               CUP$Parser2$act_num,
                               CUP$Parser2$parser,
                               CUP$Parser2$stack,
                               CUP$Parser2$top);
    }
}

}
